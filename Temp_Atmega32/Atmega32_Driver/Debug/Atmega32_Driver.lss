
Atmega32_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000050dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e2  00800060  000050dc  00005170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800142  00800142  00005252  2**0
                  ALLOC
  3 .stab         00004f5c  00000000  00000000  00005254  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001dd6  00000000  00000000  0000a1b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000bf86  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000c0c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000c236  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000de7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ed6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000fb18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000fc78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ff05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000106d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <__vector_1>
       8:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <__vector_2>
       c:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ed       	ldi	r30, 0xDC	; 220
      68:	f0 e5       	ldi	r31, 0x50	; 80
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 34       	cpi	r26, 0x42	; 66
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e4       	ldi	r26, 0x42	; 66
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 35       	cpi	r26, 0x56	; 86
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <main>
      8a:	0c 94 6c 28 	jmp	0x50d8	; 0x50d8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8b 25 	jmp	0x4b16	; 0x4b16 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e1       	ldi	r26, 0x1F	; 31
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a7 25 	jmp	0x4b4e	; 0x4b4e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 97 25 	jmp	0x4b2e	; 0x4b2e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b3 25 	jmp	0x4b66	; 0x4b66 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 97 25 	jmp	0x4b2e	; 0x4b2e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b3 25 	jmp	0x4b66	; 0x4b66 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8b 25 	jmp	0x4b16	; 0x4b16 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e1       	ldi	r24, 0x1F	; 31
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a7 25 	jmp	0x4b4e	; 0x4b4e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 97 25 	jmp	0x4b2e	; 0x4b2e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b3 25 	jmp	0x4b66	; 0x4b66 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 97 25 	jmp	0x4b2e	; 0x4b2e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b3 25 	jmp	0x4b66	; 0x4b66 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 97 25 	jmp	0x4b2e	; 0x4b2e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b3 25 	jmp	0x4b66	; 0x4b66 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9b 25 	jmp	0x4b36	; 0x4b36 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b7 25 	jmp	0x4b6e	; 0x4b6e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer0_Init>:
 * Arguments:
	 * Port_Id: port .
	 * Pin_Id: pin on the port .
 * Return Value: no return ( void ) .
 */
void Timer0_Init( Mode_Type Mode , uint16 Prescaler , uint8 Output ,uint8 Compare_Val ){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	7b 83       	std	Y+3, r23	; 0x03
     b5e:	6a 83       	std	Y+2, r22	; 0x02
     b60:	4c 83       	std	Y+4, r20	; 0x04
     b62:	2d 83       	std	Y+5, r18	; 0x05
	GPIO_SetPinDirction(PORTB_ID,PIN3_ID,PIN_OUTPUT);
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	63 e0       	ldi	r22, 0x03	; 3
     b68:	41 e0       	ldi	r20, 0x01	; 1
     b6a:	0e 94 d5 07 	call	0xfaa	; 0xfaa <GPIO_SetPinDirction>
	SREG |= (1<<7);
     b6e:	af e5       	ldi	r26, 0x5F	; 95
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	ef e5       	ldi	r30, 0x5F	; 95
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	80 68       	ori	r24, 0x80	; 128
     b7a:	8c 93       	st	X, r24
	TIMSK |= (1<<OCIE0);
     b7c:	a9 e5       	ldi	r26, 0x59	; 89
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	e9 e5       	ldi	r30, 0x59	; 89
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	82 60       	ori	r24, 0x02	; 2
     b88:	8c 93       	st	X, r24
	switch(Mode){
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	28 2f       	mov	r18, r24
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	3d 87       	std	Y+13, r19	; 0x0d
     b92:	2c 87       	std	Y+12, r18	; 0x0c
     b94:	8c 85       	ldd	r24, Y+12	; 0x0c
     b96:	9d 85       	ldd	r25, Y+13	; 0x0d
     b98:	81 30       	cpi	r24, 0x01	; 1
     b9a:	91 05       	cpc	r25, r1
     b9c:	81 f1       	breq	.+96     	; 0xbfe <Timer0_Init+0xb8>
     b9e:	2c 85       	ldd	r18, Y+12	; 0x0c
     ba0:	3d 85       	ldd	r19, Y+13	; 0x0d
     ba2:	22 30       	cpi	r18, 0x02	; 2
     ba4:	31 05       	cpc	r19, r1
     ba6:	2c f4       	brge	.+10     	; 0xbb2 <Timer0_Init+0x6c>
     ba8:	8c 85       	ldd	r24, Y+12	; 0x0c
     baa:	9d 85       	ldd	r25, Y+13	; 0x0d
     bac:	00 97       	sbiw	r24, 0x00	; 0
     bae:	69 f0       	breq	.+26     	; 0xbca <Timer0_Init+0x84>
     bb0:	f3 c1       	rjmp	.+998    	; 0xf98 <Timer0_Init+0x452>
     bb2:	2c 85       	ldd	r18, Y+12	; 0x0c
     bb4:	3d 85       	ldd	r19, Y+13	; 0x0d
     bb6:	22 30       	cpi	r18, 0x02	; 2
     bb8:	31 05       	cpc	r19, r1
     bba:	d9 f1       	breq	.+118    	; 0xc32 <Timer0_Init+0xec>
     bbc:	8c 85       	ldd	r24, Y+12	; 0x0c
     bbe:	9d 85       	ldd	r25, Y+13	; 0x0d
     bc0:	83 30       	cpi	r24, 0x03	; 3
     bc2:	91 05       	cpc	r25, r1
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <Timer0_Init+0x82>
     bc6:	4f c0       	rjmp	.+158    	; 0xc66 <Timer0_Init+0x120>
     bc8:	e7 c1       	rjmp	.+974    	; 0xf98 <Timer0_Init+0x452>
		case NORMAL :
			TCNT0 = Compare_Val;
     bca:	e2 e5       	ldi	r30, 0x52	; 82
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	8d 81       	ldd	r24, Y+5	; 0x05
     bd0:	80 83       	st	Z, r24
			TCCR0 |= (1<<FOC0);
     bd2:	a3 e5       	ldi	r26, 0x53	; 83
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	e3 e5       	ldi	r30, 0x53	; 83
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	80 68       	ori	r24, 0x80	; 128
     bde:	8c 93       	st	X, r24
			TCCR0 &= ~(1<<WGM00);
     be0:	a3 e5       	ldi	r26, 0x53	; 83
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	e3 e5       	ldi	r30, 0x53	; 83
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	8f 7b       	andi	r24, 0xBF	; 191
     bec:	8c 93       	st	X, r24
			TCCR0 &= ~(1<<WGM01);
     bee:	a3 e5       	ldi	r26, 0x53	; 83
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e3 e5       	ldi	r30, 0x53	; 83
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	87 7f       	andi	r24, 0xF7	; 247
     bfa:	8c 93       	st	X, r24
     bfc:	4d c0       	rjmp	.+154    	; 0xc98 <Timer0_Init+0x152>
			break ;
		case CTC :
			OCR0 = Compare_Val ;
     bfe:	ec e5       	ldi	r30, 0x5C	; 92
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	8d 81       	ldd	r24, Y+5	; 0x05
     c04:	80 83       	st	Z, r24
			TCCR0 |= (1<<FOC0);
     c06:	a3 e5       	ldi	r26, 0x53	; 83
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e3 e5       	ldi	r30, 0x53	; 83
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	80 68       	ori	r24, 0x80	; 128
     c12:	8c 93       	st	X, r24
			TCCR0 &= ~(1<<WGM00);
     c14:	a3 e5       	ldi	r26, 0x53	; 83
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e3 e5       	ldi	r30, 0x53	; 83
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	8f 7b       	andi	r24, 0xBF	; 191
     c20:	8c 93       	st	X, r24
			TCCR0 |= (1<<WGM01);
     c22:	a3 e5       	ldi	r26, 0x53	; 83
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	e3 e5       	ldi	r30, 0x53	; 83
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	88 60       	ori	r24, 0x08	; 8
     c2e:	8c 93       	st	X, r24
     c30:	33 c0       	rjmp	.+102    	; 0xc98 <Timer0_Init+0x152>
			break ;
		case PCPWM :
			OCR0 = Compare_Val ;
     c32:	ec e5       	ldi	r30, 0x5C	; 92
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	8d 81       	ldd	r24, Y+5	; 0x05
     c38:	80 83       	st	Z, r24
			TCCR0 &= ~(1<<FOC0);
     c3a:	a3 e5       	ldi	r26, 0x53	; 83
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e3 e5       	ldi	r30, 0x53	; 83
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	8f 77       	andi	r24, 0x7F	; 127
     c46:	8c 93       	st	X, r24
			TCCR0 |= (1<<WGM00);
     c48:	a3 e5       	ldi	r26, 0x53	; 83
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e3 e5       	ldi	r30, 0x53	; 83
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	80 64       	ori	r24, 0x40	; 64
     c54:	8c 93       	st	X, r24
			TCCR0 &= ~(1<<WGM01);
     c56:	a3 e5       	ldi	r26, 0x53	; 83
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e3 e5       	ldi	r30, 0x53	; 83
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	87 7f       	andi	r24, 0xF7	; 247
     c62:	8c 93       	st	X, r24
     c64:	19 c0       	rjmp	.+50     	; 0xc98 <Timer0_Init+0x152>
			break ;
		case FPWM :
			OCR0 = Compare_Val ;
     c66:	ec e5       	ldi	r30, 0x5C	; 92
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	8d 81       	ldd	r24, Y+5	; 0x05
     c6c:	80 83       	st	Z, r24
			TCCR0 &= ~(1<<FOC0);
     c6e:	a3 e5       	ldi	r26, 0x53	; 83
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	e3 e5       	ldi	r30, 0x53	; 83
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	8f 77       	andi	r24, 0x7F	; 127
     c7a:	8c 93       	st	X, r24
			TCCR0 |= (1<<WGM00);
     c7c:	a3 e5       	ldi	r26, 0x53	; 83
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e3 e5       	ldi	r30, 0x53	; 83
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	80 64       	ori	r24, 0x40	; 64
     c88:	8c 93       	st	X, r24
			TCCR0 |= (1<<WGM01);
     c8a:	a3 e5       	ldi	r26, 0x53	; 83
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e3 e5       	ldi	r30, 0x53	; 83
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	88 60       	ori	r24, 0x08	; 8
     c96:	8c 93       	st	X, r24
			break ;
		default : return;
	}

	switch(Prescaler){
     c98:	2a 81       	ldd	r18, Y+2	; 0x02
     c9a:	3b 81       	ldd	r19, Y+3	; 0x03
     c9c:	3f 87       	std	Y+15, r19	; 0x0f
     c9e:	2e 87       	std	Y+14, r18	; 0x0e
     ca0:	8e 85       	ldd	r24, Y+14	; 0x0e
     ca2:	9f 85       	ldd	r25, Y+15	; 0x0f
     ca4:	80 34       	cpi	r24, 0x40	; 64
     ca6:	91 05       	cpc	r25, r1
     ca8:	09 f4       	brne	.+2      	; 0xcac <Timer0_Init+0x166>
     caa:	4b c0       	rjmp	.+150    	; 0xd42 <Timer0_Init+0x1fc>
     cac:	2e 85       	ldd	r18, Y+14	; 0x0e
     cae:	3f 85       	ldd	r19, Y+15	; 0x0f
     cb0:	21 34       	cpi	r18, 0x41	; 65
     cb2:	31 05       	cpc	r19, r1
     cb4:	58 f4       	brcc	.+22     	; 0xccc <Timer0_Init+0x186>
     cb6:	8e 85       	ldd	r24, Y+14	; 0x0e
     cb8:	9f 85       	ldd	r25, Y+15	; 0x0f
     cba:	81 30       	cpi	r24, 0x01	; 1
     cbc:	91 05       	cpc	r25, r1
     cbe:	a9 f0       	breq	.+42     	; 0xcea <Timer0_Init+0x1a4>
     cc0:	2e 85       	ldd	r18, Y+14	; 0x0e
     cc2:	3f 85       	ldd	r19, Y+15	; 0x0f
     cc4:	28 30       	cpi	r18, 0x08	; 8
     cc6:	31 05       	cpc	r19, r1
     cc8:	31 f1       	breq	.+76     	; 0xd16 <Timer0_Init+0x1d0>
     cca:	66 c1       	rjmp	.+716    	; 0xf98 <Timer0_Init+0x452>
     ccc:	8e 85       	ldd	r24, Y+14	; 0x0e
     cce:	9f 85       	ldd	r25, Y+15	; 0x0f
     cd0:	21 e0       	ldi	r18, 0x01	; 1
     cd2:	80 30       	cpi	r24, 0x00	; 0
     cd4:	92 07       	cpc	r25, r18
     cd6:	09 f4       	brne	.+2      	; 0xcda <Timer0_Init+0x194>
     cd8:	4a c0       	rjmp	.+148    	; 0xd6e <Timer0_Init+0x228>
     cda:	8e 85       	ldd	r24, Y+14	; 0x0e
     cdc:	9f 85       	ldd	r25, Y+15	; 0x0f
     cde:	24 e0       	ldi	r18, 0x04	; 4
     ce0:	80 30       	cpi	r24, 0x00	; 0
     ce2:	92 07       	cpc	r25, r18
     ce4:	09 f4       	brne	.+2      	; 0xce8 <Timer0_Init+0x1a2>
     ce6:	59 c0       	rjmp	.+178    	; 0xd9a <Timer0_Init+0x254>
     ce8:	57 c1       	rjmp	.+686    	; 0xf98 <Timer0_Init+0x452>
		case PS_1 :
			TCCR0 |= (1<<CS00);
     cea:	a3 e5       	ldi	r26, 0x53	; 83
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e3 e5       	ldi	r30, 0x53	; 83
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	81 60       	ori	r24, 0x01	; 1
     cf6:	8c 93       	st	X, r24
			TCCR0 &= ~(1<<CS01);
     cf8:	a3 e5       	ldi	r26, 0x53	; 83
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e3 e5       	ldi	r30, 0x53	; 83
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	8d 7f       	andi	r24, 0xFD	; 253
     d04:	8c 93       	st	X, r24
			TCCR0 &= ~(1<<CS02);
     d06:	a3 e5       	ldi	r26, 0x53	; 83
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e3 e5       	ldi	r30, 0x53	; 83
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	8b 7f       	andi	r24, 0xFB	; 251
     d12:	8c 93       	st	X, r24
     d14:	57 c0       	rjmp	.+174    	; 0xdc4 <Timer0_Init+0x27e>
			break ;
		case PS_8 :
			TCCR0 &= ~(1<<CS00);
     d16:	a3 e5       	ldi	r26, 0x53	; 83
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e3 e5       	ldi	r30, 0x53	; 83
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	8e 7f       	andi	r24, 0xFE	; 254
     d22:	8c 93       	st	X, r24
			TCCR0 |= (1<<CS01);
     d24:	a3 e5       	ldi	r26, 0x53	; 83
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e3 e5       	ldi	r30, 0x53	; 83
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	82 60       	ori	r24, 0x02	; 2
     d30:	8c 93       	st	X, r24
			TCCR0 &= ~(1<<CS02);
     d32:	a3 e5       	ldi	r26, 0x53	; 83
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e3 e5       	ldi	r30, 0x53	; 83
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	8b 7f       	andi	r24, 0xFB	; 251
     d3e:	8c 93       	st	X, r24
     d40:	41 c0       	rjmp	.+130    	; 0xdc4 <Timer0_Init+0x27e>
			break ;
		case PS_64 :
			TCCR0 |= (1<<CS00);
     d42:	a3 e5       	ldi	r26, 0x53	; 83
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e3 e5       	ldi	r30, 0x53	; 83
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	81 60       	ori	r24, 0x01	; 1
     d4e:	8c 93       	st	X, r24
			TCCR0 |= (1<<CS01);
     d50:	a3 e5       	ldi	r26, 0x53	; 83
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	e3 e5       	ldi	r30, 0x53	; 83
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	82 60       	ori	r24, 0x02	; 2
     d5c:	8c 93       	st	X, r24
			TCCR0 &= ~(1<<CS02);
     d5e:	a3 e5       	ldi	r26, 0x53	; 83
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e3 e5       	ldi	r30, 0x53	; 83
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	8b 7f       	andi	r24, 0xFB	; 251
     d6a:	8c 93       	st	X, r24
     d6c:	2b c0       	rjmp	.+86     	; 0xdc4 <Timer0_Init+0x27e>
			break ;
		case PS_256 :
			TCCR0 &= ~(1<<CS00);
     d6e:	a3 e5       	ldi	r26, 0x53	; 83
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e3 e5       	ldi	r30, 0x53	; 83
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	8e 7f       	andi	r24, 0xFE	; 254
     d7a:	8c 93       	st	X, r24
			TCCR0 &= ~(1<<CS01);
     d7c:	a3 e5       	ldi	r26, 0x53	; 83
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e3 e5       	ldi	r30, 0x53	; 83
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	8d 7f       	andi	r24, 0xFD	; 253
     d88:	8c 93       	st	X, r24
			TCCR0 |= (1<<CS02);
     d8a:	a3 e5       	ldi	r26, 0x53	; 83
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e3 e5       	ldi	r30, 0x53	; 83
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	84 60       	ori	r24, 0x04	; 4
     d96:	8c 93       	st	X, r24
     d98:	15 c0       	rjmp	.+42     	; 0xdc4 <Timer0_Init+0x27e>
			break ;
		case PS_1024 :
			TCCR0 |= (1<<CS00);
     d9a:	a3 e5       	ldi	r26, 0x53	; 83
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e3 e5       	ldi	r30, 0x53	; 83
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	81 60       	ori	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
			TCCR0 &= ~(1<<CS01);
     da8:	a3 e5       	ldi	r26, 0x53	; 83
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e3 e5       	ldi	r30, 0x53	; 83
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	8d 7f       	andi	r24, 0xFD	; 253
     db4:	8c 93       	st	X, r24
			TCCR0 |= (1<<CS02);
     db6:	a3 e5       	ldi	r26, 0x53	; 83
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e3 e5       	ldi	r30, 0x53	; 83
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	84 60       	ori	r24, 0x04	; 4
     dc2:	8c 93       	st	X, r24
			break ;
		default : return ;
	}

	if( Mode == NORMAL || Mode == CTC ){
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	88 23       	and	r24, r24
     dc8:	21 f0       	breq	.+8      	; 0xdd2 <Timer0_Init+0x28c>
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	81 30       	cpi	r24, 0x01	; 1
     dce:	09 f0       	breq	.+2      	; 0xdd2 <Timer0_Init+0x28c>
     dd0:	5b c0       	rjmp	.+182    	; 0xe88 <Timer0_Init+0x342>
		switch(Output){
     dd2:	8c 81       	ldd	r24, Y+4	; 0x04
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	3b 87       	std	Y+11, r19	; 0x0b
     dda:	2a 87       	std	Y+10, r18	; 0x0a
     ddc:	8a 85       	ldd	r24, Y+10	; 0x0a
     dde:	9b 85       	ldd	r25, Y+11	; 0x0b
     de0:	81 30       	cpi	r24, 0x01	; 1
     de2:	91 05       	cpc	r25, r1
     de4:	21 f1       	breq	.+72     	; 0xe2e <Timer0_Init+0x2e8>
     de6:	2a 85       	ldd	r18, Y+10	; 0x0a
     de8:	3b 85       	ldd	r19, Y+11	; 0x0b
     dea:	22 30       	cpi	r18, 0x02	; 2
     dec:	31 05       	cpc	r19, r1
     dee:	2c f4       	brge	.+10     	; 0xdfa <Timer0_Init+0x2b4>
     df0:	8a 85       	ldd	r24, Y+10	; 0x0a
     df2:	9b 85       	ldd	r25, Y+11	; 0x0b
     df4:	00 97       	sbiw	r24, 0x00	; 0
     df6:	61 f0       	breq	.+24     	; 0xe10 <Timer0_Init+0x2ca>
     df8:	cf c0       	rjmp	.+414    	; 0xf98 <Timer0_Init+0x452>
     dfa:	2a 85       	ldd	r18, Y+10	; 0x0a
     dfc:	3b 85       	ldd	r19, Y+11	; 0x0b
     dfe:	22 30       	cpi	r18, 0x02	; 2
     e00:	31 05       	cpc	r19, r1
     e02:	21 f1       	breq	.+72     	; 0xe4c <Timer0_Init+0x306>
     e04:	8a 85       	ldd	r24, Y+10	; 0x0a
     e06:	9b 85       	ldd	r25, Y+11	; 0x0b
     e08:	83 30       	cpi	r24, 0x03	; 3
     e0a:	91 05       	cpc	r25, r1
     e0c:	71 f1       	breq	.+92     	; 0xe6a <Timer0_Init+0x324>
     e0e:	c4 c0       	rjmp	.+392    	; 0xf98 <Timer0_Init+0x452>
			case NO_OUTPUT :
				TCCR0 &= ~(1<<COM00);
     e10:	a3 e5       	ldi	r26, 0x53	; 83
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e3 e5       	ldi	r30, 0x53	; 83
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	8f 7e       	andi	r24, 0xEF	; 239
     e1c:	8c 93       	st	X, r24
				TCCR0 &= ~(1<<COM01);
     e1e:	a3 e5       	ldi	r26, 0x53	; 83
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e3 e5       	ldi	r30, 0x53	; 83
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	8f 7d       	andi	r24, 0xDF	; 223
     e2a:	8c 93       	st	X, r24
     e2c:	b5 c0       	rjmp	.+362    	; 0xf98 <Timer0_Init+0x452>
				break ;
			case TOGGLE_OC0 :
				TCCR0 |= (1<<COM00);
     e2e:	a3 e5       	ldi	r26, 0x53	; 83
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e3 e5       	ldi	r30, 0x53	; 83
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	80 61       	ori	r24, 0x10	; 16
     e3a:	8c 93       	st	X, r24
				TCCR0 &= ~(1<<COM01);
     e3c:	a3 e5       	ldi	r26, 0x53	; 83
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e3 e5       	ldi	r30, 0x53	; 83
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	8f 7d       	andi	r24, 0xDF	; 223
     e48:	8c 93       	st	X, r24
     e4a:	a6 c0       	rjmp	.+332    	; 0xf98 <Timer0_Init+0x452>
				break ;
			case CLEAR_OC0 :
				TCCR0 &= ~(1<<COM00);
     e4c:	a3 e5       	ldi	r26, 0x53	; 83
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e3 e5       	ldi	r30, 0x53	; 83
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	8f 7e       	andi	r24, 0xEF	; 239
     e58:	8c 93       	st	X, r24
				TCCR0 |= (1<<COM01);
     e5a:	a3 e5       	ldi	r26, 0x53	; 83
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e3 e5       	ldi	r30, 0x53	; 83
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	80 62       	ori	r24, 0x20	; 32
     e66:	8c 93       	st	X, r24
     e68:	97 c0       	rjmp	.+302    	; 0xf98 <Timer0_Init+0x452>
				break ;
			case SET_OC0 :
				TCCR0 |= (1<<COM00);
     e6a:	a3 e5       	ldi	r26, 0x53	; 83
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e3 e5       	ldi	r30, 0x53	; 83
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	80 61       	ori	r24, 0x10	; 16
     e76:	8c 93       	st	X, r24
				TCCR0 |= (1<<COM01);
     e78:	a3 e5       	ldi	r26, 0x53	; 83
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e3 e5       	ldi	r30, 0x53	; 83
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	80 62       	ori	r24, 0x20	; 32
     e84:	8c 93       	st	X, r24
     e86:	88 c0       	rjmp	.+272    	; 0xf98 <Timer0_Init+0x452>
				break ;
			default : return ;
		}
	}
	else if( Mode == PCPWM ){
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	82 30       	cpi	r24, 0x02	; 2
     e8c:	09 f0       	breq	.+2      	; 0xe90 <Timer0_Init+0x34a>
     e8e:	41 c0       	rjmp	.+130    	; 0xf12 <Timer0_Init+0x3cc>
		switch(Output){
     e90:	8c 81       	ldd	r24, Y+4	; 0x04
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	39 87       	std	Y+9, r19	; 0x09
     e98:	28 87       	std	Y+8, r18	; 0x08
     e9a:	88 85       	ldd	r24, Y+8	; 0x08
     e9c:	99 85       	ldd	r25, Y+9	; 0x09
     e9e:	82 30       	cpi	r24, 0x02	; 2
     ea0:	91 05       	cpc	r25, r1
     ea2:	c9 f0       	breq	.+50     	; 0xed6 <Timer0_Init+0x390>
     ea4:	28 85       	ldd	r18, Y+8	; 0x08
     ea6:	39 85       	ldd	r19, Y+9	; 0x09
     ea8:	23 30       	cpi	r18, 0x03	; 3
     eaa:	31 05       	cpc	r19, r1
     eac:	19 f1       	breq	.+70     	; 0xef4 <Timer0_Init+0x3ae>
     eae:	88 85       	ldd	r24, Y+8	; 0x08
     eb0:	99 85       	ldd	r25, Y+9	; 0x09
     eb2:	00 97       	sbiw	r24, 0x00	; 0
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <Timer0_Init+0x372>
     eb6:	70 c0       	rjmp	.+224    	; 0xf98 <Timer0_Init+0x452>
			case NO_OUTPUT :
				TCCR0 &= ~(1<<COM00);
     eb8:	a3 e5       	ldi	r26, 0x53	; 83
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e3 e5       	ldi	r30, 0x53	; 83
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	8f 7e       	andi	r24, 0xEF	; 239
     ec4:	8c 93       	st	X, r24
				TCCR0 &= ~(1<<COM01);
     ec6:	a3 e5       	ldi	r26, 0x53	; 83
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e3 e5       	ldi	r30, 0x53	; 83
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	8f 7d       	andi	r24, 0xDF	; 223
     ed2:	8c 93       	st	X, r24
     ed4:	61 c0       	rjmp	.+194    	; 0xf98 <Timer0_Init+0x452>
				break ;
			case CLEAR_UPCOUNTING_SET_DOWNCOUNTING :
				TCCR0 &= ~(1<<COM00);
     ed6:	a3 e5       	ldi	r26, 0x53	; 83
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e3 e5       	ldi	r30, 0x53	; 83
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	8f 7e       	andi	r24, 0xEF	; 239
     ee2:	8c 93       	st	X, r24
				TCCR0 |= (1<<COM01);
     ee4:	a3 e5       	ldi	r26, 0x53	; 83
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e3 e5       	ldi	r30, 0x53	; 83
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	80 62       	ori	r24, 0x20	; 32
     ef0:	8c 93       	st	X, r24
     ef2:	52 c0       	rjmp	.+164    	; 0xf98 <Timer0_Init+0x452>
				break ;
			case SET_UPCOUNTING_CLEAR_DOWNCOUNTING :
				TCCR0 |= (1<<COM00);
     ef4:	a3 e5       	ldi	r26, 0x53	; 83
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e3 e5       	ldi	r30, 0x53	; 83
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	80 61       	ori	r24, 0x10	; 16
     f00:	8c 93       	st	X, r24
				TCCR0 |= (1<<COM01);
     f02:	a3 e5       	ldi	r26, 0x53	; 83
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e3 e5       	ldi	r30, 0x53	; 83
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	80 62       	ori	r24, 0x20	; 32
     f0e:	8c 93       	st	X, r24
     f10:	43 c0       	rjmp	.+134    	; 0xf98 <Timer0_Init+0x452>
				break ;
			default : return ;
		}
	}
	else if( Mode == FPWM ){
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	83 30       	cpi	r24, 0x03	; 3
     f16:	09 f0       	breq	.+2      	; 0xf1a <Timer0_Init+0x3d4>
     f18:	3f c0       	rjmp	.+126    	; 0xf98 <Timer0_Init+0x452>
		switch(Output){
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	3f 83       	std	Y+7, r19	; 0x07
     f22:	2e 83       	std	Y+6, r18	; 0x06
     f24:	8e 81       	ldd	r24, Y+6	; 0x06
     f26:	9f 81       	ldd	r25, Y+7	; 0x07
     f28:	82 30       	cpi	r24, 0x02	; 2
     f2a:	91 05       	cpc	r25, r1
     f2c:	c1 f0       	breq	.+48     	; 0xf5e <Timer0_Init+0x418>
     f2e:	2e 81       	ldd	r18, Y+6	; 0x06
     f30:	3f 81       	ldd	r19, Y+7	; 0x07
     f32:	23 30       	cpi	r18, 0x03	; 3
     f34:	31 05       	cpc	r19, r1
     f36:	11 f1       	breq	.+68     	; 0xf7c <Timer0_Init+0x436>
     f38:	8e 81       	ldd	r24, Y+6	; 0x06
     f3a:	9f 81       	ldd	r25, Y+7	; 0x07
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	61 f5       	brne	.+88     	; 0xf98 <Timer0_Init+0x452>
			case NO_OUTPUT :
				TCCR0 &= ~(1<<COM00);
     f40:	a3 e5       	ldi	r26, 0x53	; 83
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e3 e5       	ldi	r30, 0x53	; 83
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	8f 7e       	andi	r24, 0xEF	; 239
     f4c:	8c 93       	st	X, r24
				TCCR0 &= ~(1<<COM01);
     f4e:	a3 e5       	ldi	r26, 0x53	; 83
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e3 e5       	ldi	r30, 0x53	; 83
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	8f 7d       	andi	r24, 0xDF	; 223
     f5a:	8c 93       	st	X, r24
     f5c:	1d c0       	rjmp	.+58     	; 0xf98 <Timer0_Init+0x452>
				break ;
			case CLEAR_COMPARE_SET_TOP :
				TCCR0 &= ~(1<<COM00);
     f5e:	a3 e5       	ldi	r26, 0x53	; 83
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e3 e5       	ldi	r30, 0x53	; 83
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	8f 7e       	andi	r24, 0xEF	; 239
     f6a:	8c 93       	st	X, r24
				TCCR0 |= (1<<COM01);
     f6c:	a3 e5       	ldi	r26, 0x53	; 83
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e3 e5       	ldi	r30, 0x53	; 83
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	80 62       	ori	r24, 0x20	; 32
     f78:	8c 93       	st	X, r24
     f7a:	0e c0       	rjmp	.+28     	; 0xf98 <Timer0_Init+0x452>
				break ;
			case SET_COMPARE_CLEAR_TOP :
				TCCR0 |= (1<<COM00);
     f7c:	a3 e5       	ldi	r26, 0x53	; 83
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e3 e5       	ldi	r30, 0x53	; 83
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	80 61       	ori	r24, 0x10	; 16
     f88:	8c 93       	st	X, r24
				TCCR0 |= (1<<COM01);
     f8a:	a3 e5       	ldi	r26, 0x53	; 83
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e3 e5       	ldi	r30, 0x53	; 83
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	80 62       	ori	r24, 0x20	; 32
     f96:	8c 93       	st	X, r24
				break ;
			default : return ;
		}
	}
}
     f98:	2f 96       	adiw	r28, 0x0f	; 15
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <GPIO_SetPinDirction>:
	 * Port_Id: GPIO port .
	 * Pin_Id: pin on the port .
	 * Direction: direction of pin ( Input or Output ) .
 * Return Value: no return ( void ) .
 */
void GPIO_SetPinDirction( uint8 Port_Id , uint8 Pin_Id , uint8 Direction ){
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <GPIO_SetPinDirction+0x6>
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <GPIO_SetPinDirction+0x8>
     fb2:	0f 92       	push	r0
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	6a 83       	std	Y+2, r22	; 0x02
     fbc:	4b 83       	std	Y+3, r20	; 0x03
	switch( Port_Id ){
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	3d 83       	std	Y+5, r19	; 0x05
     fc6:	2c 83       	std	Y+4, r18	; 0x04
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	9d 81       	ldd	r25, Y+5	; 0x05
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	91 05       	cpc	r25, r1
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <GPIO_SetPinDirction+0x2a>
     fd2:	43 c0       	rjmp	.+134    	; 0x105a <GPIO_SetPinDirction+0xb0>
     fd4:	2c 81       	ldd	r18, Y+4	; 0x04
     fd6:	3d 81       	ldd	r19, Y+5	; 0x05
     fd8:	22 30       	cpi	r18, 0x02	; 2
     fda:	31 05       	cpc	r19, r1
     fdc:	2c f4       	brge	.+10     	; 0xfe8 <GPIO_SetPinDirction+0x3e>
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	9d 81       	ldd	r25, Y+5	; 0x05
     fe2:	00 97       	sbiw	r24, 0x00	; 0
     fe4:	71 f0       	breq	.+28     	; 0x1002 <GPIO_SetPinDirction+0x58>
     fe6:	bc c0       	rjmp	.+376    	; 0x1160 <GPIO_SetPinDirction+0x1b6>
     fe8:	2c 81       	ldd	r18, Y+4	; 0x04
     fea:	3d 81       	ldd	r19, Y+5	; 0x05
     fec:	22 30       	cpi	r18, 0x02	; 2
     fee:	31 05       	cpc	r19, r1
     ff0:	09 f4       	brne	.+2      	; 0xff4 <GPIO_SetPinDirction+0x4a>
     ff2:	5f c0       	rjmp	.+190    	; 0x10b2 <GPIO_SetPinDirction+0x108>
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	9d 81       	ldd	r25, Y+5	; 0x05
     ff8:	83 30       	cpi	r24, 0x03	; 3
     ffa:	91 05       	cpc	r25, r1
     ffc:	09 f4       	brne	.+2      	; 0x1000 <GPIO_SetPinDirction+0x56>
     ffe:	85 c0       	rjmp	.+266    	; 0x110a <GPIO_SetPinDirction+0x160>
    1000:	af c0       	rjmp	.+350    	; 0x1160 <GPIO_SetPinDirction+0x1b6>
		case PORTA_ID :
			if( Direction == PIN_INPUT ){
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	88 23       	and	r24, r24
    1006:	a9 f4       	brne	.+42     	; 0x1032 <GPIO_SetPinDirction+0x88>
				CLR_BIT( DDRA , Pin_Id );
    1008:	aa e3       	ldi	r26, 0x3A	; 58
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	ea e3       	ldi	r30, 0x3A	; 58
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <GPIO_SetPinDirction+0x7c>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <GPIO_SetPinDirction+0x78>
    102a:	80 95       	com	r24
    102c:	84 23       	and	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	97 c0       	rjmp	.+302    	; 0x1160 <GPIO_SetPinDirction+0x1b6>
			}
			else{
				SET_BIT( DDRA , Pin_Id );
    1032:	aa e3       	ldi	r26, 0x3A	; 58
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	ea e3       	ldi	r30, 0x3A	; 58
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <GPIO_SetPinDirction+0xa6>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <GPIO_SetPinDirction+0xa2>
    1054:	84 2b       	or	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	83 c0       	rjmp	.+262    	; 0x1160 <GPIO_SetPinDirction+0x1b6>
			}
			break ;

		case PORTB_ID :
			if( Direction == PIN_INPUT ){
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	88 23       	and	r24, r24
    105e:	a9 f4       	brne	.+42     	; 0x108a <GPIO_SetPinDirction+0xe0>
				CLR_BIT( DDRB , Pin_Id );
    1060:	a7 e3       	ldi	r26, 0x37	; 55
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e7 e3       	ldi	r30, 0x37	; 55
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <GPIO_SetPinDirction+0xd4>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <GPIO_SetPinDirction+0xd0>
    1082:	80 95       	com	r24
    1084:	84 23       	and	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	6b c0       	rjmp	.+214    	; 0x1160 <GPIO_SetPinDirction+0x1b6>
			}
			else{
				SET_BIT( DDRB , Pin_Id );
    108a:	a7 e3       	ldi	r26, 0x37	; 55
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e7 e3       	ldi	r30, 0x37	; 55
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 2e       	mov	r0, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <GPIO_SetPinDirction+0xfe>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <GPIO_SetPinDirction+0xfa>
    10ac:	84 2b       	or	r24, r20
    10ae:	8c 93       	st	X, r24
    10b0:	57 c0       	rjmp	.+174    	; 0x1160 <GPIO_SetPinDirction+0x1b6>
			}
			break ;

		case PORTC_ID :
			if( Direction == PIN_INPUT ){
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	88 23       	and	r24, r24
    10b6:	a9 f4       	brne	.+42     	; 0x10e2 <GPIO_SetPinDirction+0x138>
				CLR_BIT( DDRC , Pin_Id );
    10b8:	a4 e3       	ldi	r26, 0x34	; 52
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e4 e3       	ldi	r30, 0x34	; 52
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 2e       	mov	r0, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <GPIO_SetPinDirction+0x12c>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <GPIO_SetPinDirction+0x128>
    10da:	80 95       	com	r24
    10dc:	84 23       	and	r24, r20
    10de:	8c 93       	st	X, r24
    10e0:	3f c0       	rjmp	.+126    	; 0x1160 <GPIO_SetPinDirction+0x1b6>
			}
			else{
				SET_BIT( DDRC , Pin_Id );
    10e2:	a4 e3       	ldi	r26, 0x34	; 52
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e4 e3       	ldi	r30, 0x34	; 52
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <GPIO_SetPinDirction+0x156>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <GPIO_SetPinDirction+0x152>
    1104:	84 2b       	or	r24, r20
    1106:	8c 93       	st	X, r24
    1108:	2b c0       	rjmp	.+86     	; 0x1160 <GPIO_SetPinDirction+0x1b6>
			}
			break ;

		case PORTD_ID :
			if( Direction == PIN_INPUT ){
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	88 23       	and	r24, r24
    110e:	a9 f4       	brne	.+42     	; 0x113a <GPIO_SetPinDirction+0x190>
				CLR_BIT( DDRD , Pin_Id );
    1110:	a1 e3       	ldi	r26, 0x31	; 49
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e1 e3       	ldi	r30, 0x31	; 49
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 2e       	mov	r0, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <GPIO_SetPinDirction+0x184>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <GPIO_SetPinDirction+0x180>
    1132:	80 95       	com	r24
    1134:	84 23       	and	r24, r20
    1136:	8c 93       	st	X, r24
    1138:	13 c0       	rjmp	.+38     	; 0x1160 <GPIO_SetPinDirction+0x1b6>
			}
			else{
				SET_BIT( DDRD , Pin_Id );
    113a:	a1 e3       	ldi	r26, 0x31	; 49
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e1 e3       	ldi	r30, 0x31	; 49
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <GPIO_SetPinDirction+0x1ae>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <GPIO_SetPinDirction+0x1aa>
    115c:	84 2b       	or	r24, r20
    115e:	8c 93       	st	X, r24
			}
			break ;
	}
}
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <GPIO_WritePinValue>:
	 * Port_Id: GPIO port .
	 * Pin_Id: pin on the port .
	 * Value: value of pin ( High or Low ) .
 * Return Value: no return ( void ) .
 */
void GPIO_WritePinValue( uint8 Port_Id , uint8 Pin_Id , uint8 Value ){
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	00 d0       	rcall	.+0      	; 0x1176 <GPIO_WritePinValue+0x6>
    1176:	00 d0       	rcall	.+0      	; 0x1178 <GPIO_WritePinValue+0x8>
    1178:	0f 92       	push	r0
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	89 83       	std	Y+1, r24	; 0x01
    1180:	6a 83       	std	Y+2, r22	; 0x02
    1182:	4b 83       	std	Y+3, r20	; 0x03
	switch( Port_Id ){
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	3d 83       	std	Y+5, r19	; 0x05
    118c:	2c 83       	std	Y+4, r18	; 0x04
    118e:	8c 81       	ldd	r24, Y+4	; 0x04
    1190:	9d 81       	ldd	r25, Y+5	; 0x05
    1192:	81 30       	cpi	r24, 0x01	; 1
    1194:	91 05       	cpc	r25, r1
    1196:	09 f4       	brne	.+2      	; 0x119a <GPIO_WritePinValue+0x2a>
    1198:	43 c0       	rjmp	.+134    	; 0x1220 <GPIO_WritePinValue+0xb0>
    119a:	2c 81       	ldd	r18, Y+4	; 0x04
    119c:	3d 81       	ldd	r19, Y+5	; 0x05
    119e:	22 30       	cpi	r18, 0x02	; 2
    11a0:	31 05       	cpc	r19, r1
    11a2:	2c f4       	brge	.+10     	; 0x11ae <GPIO_WritePinValue+0x3e>
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	9d 81       	ldd	r25, Y+5	; 0x05
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	71 f0       	breq	.+28     	; 0x11c8 <GPIO_WritePinValue+0x58>
    11ac:	bc c0       	rjmp	.+376    	; 0x1326 <GPIO_WritePinValue+0x1b6>
    11ae:	2c 81       	ldd	r18, Y+4	; 0x04
    11b0:	3d 81       	ldd	r19, Y+5	; 0x05
    11b2:	22 30       	cpi	r18, 0x02	; 2
    11b4:	31 05       	cpc	r19, r1
    11b6:	09 f4       	brne	.+2      	; 0x11ba <GPIO_WritePinValue+0x4a>
    11b8:	5f c0       	rjmp	.+190    	; 0x1278 <GPIO_WritePinValue+0x108>
    11ba:	8c 81       	ldd	r24, Y+4	; 0x04
    11bc:	9d 81       	ldd	r25, Y+5	; 0x05
    11be:	83 30       	cpi	r24, 0x03	; 3
    11c0:	91 05       	cpc	r25, r1
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <GPIO_WritePinValue+0x56>
    11c4:	85 c0       	rjmp	.+266    	; 0x12d0 <GPIO_WritePinValue+0x160>
    11c6:	af c0       	rjmp	.+350    	; 0x1326 <GPIO_WritePinValue+0x1b6>
		case PORTA_ID :
			if( Value == LOGIC_LOW ){
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	88 23       	and	r24, r24
    11cc:	a9 f4       	brne	.+42     	; 0x11f8 <GPIO_WritePinValue+0x88>
				CLR_BIT( PORTA , Pin_Id );
    11ce:	ab e3       	ldi	r26, 0x3B	; 59
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	eb e3       	ldi	r30, 0x3B	; 59
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	48 2f       	mov	r20, r24
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 2e       	mov	r0, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <GPIO_WritePinValue+0x7c>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	0a 94       	dec	r0
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <GPIO_WritePinValue+0x78>
    11f0:	80 95       	com	r24
    11f2:	84 23       	and	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	97 c0       	rjmp	.+302    	; 0x1326 <GPIO_WritePinValue+0x1b6>
			}
			else{
				SET_BIT( PORTA , Pin_Id );
    11f8:	ab e3       	ldi	r26, 0x3B	; 59
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	eb e3       	ldi	r30, 0x3B	; 59
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	48 2f       	mov	r20, r24
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 2e       	mov	r0, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <GPIO_WritePinValue+0xa6>
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	0a 94       	dec	r0
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <GPIO_WritePinValue+0xa2>
    121a:	84 2b       	or	r24, r20
    121c:	8c 93       	st	X, r24
    121e:	83 c0       	rjmp	.+262    	; 0x1326 <GPIO_WritePinValue+0x1b6>
			}
			break ;

		case PORTB_ID :
			if( Value == LOGIC_LOW ){
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	88 23       	and	r24, r24
    1224:	a9 f4       	brne	.+42     	; 0x1250 <GPIO_WritePinValue+0xe0>
				CLR_BIT( PORTB , Pin_Id );
    1226:	a8 e3       	ldi	r26, 0x38	; 56
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e8 e3       	ldi	r30, 0x38	; 56
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <GPIO_WritePinValue+0xd4>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <GPIO_WritePinValue+0xd0>
    1248:	80 95       	com	r24
    124a:	84 23       	and	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	6b c0       	rjmp	.+214    	; 0x1326 <GPIO_WritePinValue+0x1b6>
			}
			else{
				SET_BIT( PORTB , Pin_Id );
    1250:	a8 e3       	ldi	r26, 0x38	; 56
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e8 e3       	ldi	r30, 0x38	; 56
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 2e       	mov	r0, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <GPIO_WritePinValue+0xfe>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <GPIO_WritePinValue+0xfa>
    1272:	84 2b       	or	r24, r20
    1274:	8c 93       	st	X, r24
    1276:	57 c0       	rjmp	.+174    	; 0x1326 <GPIO_WritePinValue+0x1b6>
			}
			break ;

		case PORTC_ID :
			if( Value == LOGIC_LOW ){
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	88 23       	and	r24, r24
    127c:	a9 f4       	brne	.+42     	; 0x12a8 <GPIO_WritePinValue+0x138>
				CLR_BIT( PORTC , Pin_Id );
    127e:	a5 e3       	ldi	r26, 0x35	; 53
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e5 e3       	ldi	r30, 0x35	; 53
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 2e       	mov	r0, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <GPIO_WritePinValue+0x12c>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <GPIO_WritePinValue+0x128>
    12a0:	80 95       	com	r24
    12a2:	84 23       	and	r24, r20
    12a4:	8c 93       	st	X, r24
    12a6:	3f c0       	rjmp	.+126    	; 0x1326 <GPIO_WritePinValue+0x1b6>
			}
			else{
				SET_BIT( PORTC , Pin_Id );
    12a8:	a5 e3       	ldi	r26, 0x35	; 53
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e5 e3       	ldi	r30, 0x35	; 53
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	48 2f       	mov	r20, r24
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 2e       	mov	r0, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <GPIO_WritePinValue+0x156>
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	0a 94       	dec	r0
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <GPIO_WritePinValue+0x152>
    12ca:	84 2b       	or	r24, r20
    12cc:	8c 93       	st	X, r24
    12ce:	2b c0       	rjmp	.+86     	; 0x1326 <GPIO_WritePinValue+0x1b6>
			}
			break ;

		case PORTD_ID :
			if( Value == LOGIC_LOW ){
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	88 23       	and	r24, r24
    12d4:	a9 f4       	brne	.+42     	; 0x1300 <GPIO_WritePinValue+0x190>
				CLR_BIT( PORTD , Pin_Id );
    12d6:	a2 e3       	ldi	r26, 0x32	; 50
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e2 e3       	ldi	r30, 0x32	; 50
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 2e       	mov	r0, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <GPIO_WritePinValue+0x184>
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <GPIO_WritePinValue+0x180>
    12f8:	80 95       	com	r24
    12fa:	84 23       	and	r24, r20
    12fc:	8c 93       	st	X, r24
    12fe:	13 c0       	rjmp	.+38     	; 0x1326 <GPIO_WritePinValue+0x1b6>
			}
			else{
				SET_BIT( PORTD , Pin_Id );
    1300:	a2 e3       	ldi	r26, 0x32	; 50
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e2 e3       	ldi	r30, 0x32	; 50
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	48 2f       	mov	r20, r24
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	02 2e       	mov	r0, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <GPIO_WritePinValue+0x1ae>
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	0a 94       	dec	r0
    1320:	e2 f7       	brpl	.-8      	; 0x131a <GPIO_WritePinValue+0x1aa>
    1322:	84 2b       	or	r24, r20
    1324:	8c 93       	st	X, r24
			}
			break ;
	}
}
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <GPIO_ReadPinValue>:
 * Arguments:
	 * Port_Id: GPIO port .
	 * Pin_Id: pin on the port .
 * Return Value: return pin value ( High or Low ) .
 */
uint8 GPIO_ReadPinValue( uint8 Port_Id , uint8 Pin_Id ){
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	00 d0       	rcall	.+0      	; 0x133c <GPIO_ReadPinValue+0x6>
    133c:	00 d0       	rcall	.+0      	; 0x133e <GPIO_ReadPinValue+0x8>
    133e:	0f 92       	push	r0
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	8a 83       	std	Y+2, r24	; 0x02
    1346:	6b 83       	std	Y+3, r22	; 0x03
	uint8 PinValue ;
	switch( Port_Id ){
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	3d 83       	std	Y+5, r19	; 0x05
    1350:	2c 83       	std	Y+4, r18	; 0x04
    1352:	4c 81       	ldd	r20, Y+4	; 0x04
    1354:	5d 81       	ldd	r21, Y+5	; 0x05
    1356:	41 30       	cpi	r20, 0x01	; 1
    1358:	51 05       	cpc	r21, r1
    135a:	79 f1       	breq	.+94     	; 0x13ba <GPIO_ReadPinValue+0x84>
    135c:	8c 81       	ldd	r24, Y+4	; 0x04
    135e:	9d 81       	ldd	r25, Y+5	; 0x05
    1360:	82 30       	cpi	r24, 0x02	; 2
    1362:	91 05       	cpc	r25, r1
    1364:	34 f4       	brge	.+12     	; 0x1372 <GPIO_ReadPinValue+0x3c>
    1366:	2c 81       	ldd	r18, Y+4	; 0x04
    1368:	3d 81       	ldd	r19, Y+5	; 0x05
    136a:	21 15       	cp	r18, r1
    136c:	31 05       	cpc	r19, r1
    136e:	69 f0       	breq	.+26     	; 0x138a <GPIO_ReadPinValue+0x54>
    1370:	6b c0       	rjmp	.+214    	; 0x1448 <GPIO_ReadPinValue+0x112>
    1372:	4c 81       	ldd	r20, Y+4	; 0x04
    1374:	5d 81       	ldd	r21, Y+5	; 0x05
    1376:	42 30       	cpi	r20, 0x02	; 2
    1378:	51 05       	cpc	r21, r1
    137a:	b9 f1       	breq	.+110    	; 0x13ea <GPIO_ReadPinValue+0xb4>
    137c:	8c 81       	ldd	r24, Y+4	; 0x04
    137e:	9d 81       	ldd	r25, Y+5	; 0x05
    1380:	83 30       	cpi	r24, 0x03	; 3
    1382:	91 05       	cpc	r25, r1
    1384:	09 f4       	brne	.+2      	; 0x1388 <GPIO_ReadPinValue+0x52>
    1386:	49 c0       	rjmp	.+146    	; 0x141a <GPIO_ReadPinValue+0xe4>
    1388:	5f c0       	rjmp	.+190    	; 0x1448 <GPIO_ReadPinValue+0x112>
		case PORTA_ID :
			if( RED_BIT( PINA , Pin_Id ) ){
    138a:	e9 e3       	ldi	r30, 0x39	; 57
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a9 01       	movw	r20, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <GPIO_ReadPinValue+0x6c>
    139e:	55 95       	asr	r21
    13a0:	47 95       	ror	r20
    13a2:	8a 95       	dec	r24
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <GPIO_ReadPinValue+0x68>
    13a6:	ca 01       	movw	r24, r20
    13a8:	81 70       	andi	r24, 0x01	; 1
    13aa:	90 70       	andi	r25, 0x00	; 0
    13ac:	88 23       	and	r24, r24
    13ae:	19 f0       	breq	.+6      	; 0x13b6 <GPIO_ReadPinValue+0x80>
				PinValue = LOGIC_HIGH ;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	89 83       	std	Y+1, r24	; 0x01
    13b4:	49 c0       	rjmp	.+146    	; 0x1448 <GPIO_ReadPinValue+0x112>
			}
			else{
				PinValue = LOGIC_LOW ;
    13b6:	19 82       	std	Y+1, r1	; 0x01
    13b8:	47 c0       	rjmp	.+142    	; 0x1448 <GPIO_ReadPinValue+0x112>
			}
			break ;

		case PORTB_ID :
			if( RED_BIT( PINB , Pin_Id ) ){
    13ba:	e6 e3       	ldi	r30, 0x36	; 54
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	88 2f       	mov	r24, r24
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	a9 01       	movw	r20, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <GPIO_ReadPinValue+0x9c>
    13ce:	55 95       	asr	r21
    13d0:	47 95       	ror	r20
    13d2:	8a 95       	dec	r24
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <GPIO_ReadPinValue+0x98>
    13d6:	ca 01       	movw	r24, r20
    13d8:	81 70       	andi	r24, 0x01	; 1
    13da:	90 70       	andi	r25, 0x00	; 0
    13dc:	88 23       	and	r24, r24
    13de:	19 f0       	breq	.+6      	; 0x13e6 <GPIO_ReadPinValue+0xb0>
				PinValue = LOGIC_HIGH ;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	31 c0       	rjmp	.+98     	; 0x1448 <GPIO_ReadPinValue+0x112>
			}
			else{
				PinValue = LOGIC_LOW ;
    13e6:	19 82       	std	Y+1, r1	; 0x01
    13e8:	2f c0       	rjmp	.+94     	; 0x1448 <GPIO_ReadPinValue+0x112>
			}
			break ;

		case PORTC_ID :
			if( RED_BIT( PINC , Pin_Id ) ){
    13ea:	e3 e3       	ldi	r30, 0x33	; 51
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	88 2f       	mov	r24, r24
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	a9 01       	movw	r20, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <GPIO_ReadPinValue+0xcc>
    13fe:	55 95       	asr	r21
    1400:	47 95       	ror	r20
    1402:	8a 95       	dec	r24
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <GPIO_ReadPinValue+0xc8>
    1406:	ca 01       	movw	r24, r20
    1408:	81 70       	andi	r24, 0x01	; 1
    140a:	90 70       	andi	r25, 0x00	; 0
    140c:	88 23       	and	r24, r24
    140e:	19 f0       	breq	.+6      	; 0x1416 <GPIO_ReadPinValue+0xe0>
				PinValue = LOGIC_HIGH ;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	89 83       	std	Y+1, r24	; 0x01
    1414:	19 c0       	rjmp	.+50     	; 0x1448 <GPIO_ReadPinValue+0x112>
			}
			else{
				PinValue = LOGIC_LOW ;
    1416:	19 82       	std	Y+1, r1	; 0x01
    1418:	17 c0       	rjmp	.+46     	; 0x1448 <GPIO_ReadPinValue+0x112>
			}
			break ;

		case PORTD_ID :
			if( RED_BIT( PIND , Pin_Id ) ){
    141a:	e0 e3       	ldi	r30, 0x30	; 48
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	88 2f       	mov	r24, r24
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	a9 01       	movw	r20, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <GPIO_ReadPinValue+0xfc>
    142e:	55 95       	asr	r21
    1430:	47 95       	ror	r20
    1432:	8a 95       	dec	r24
    1434:	e2 f7       	brpl	.-8      	; 0x142e <GPIO_ReadPinValue+0xf8>
    1436:	ca 01       	movw	r24, r20
    1438:	81 70       	andi	r24, 0x01	; 1
    143a:	90 70       	andi	r25, 0x00	; 0
    143c:	88 23       	and	r24, r24
    143e:	19 f0       	breq	.+6      	; 0x1446 <GPIO_ReadPinValue+0x110>
				PinValue = LOGIC_HIGH ;
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	89 83       	std	Y+1, r24	; 0x01
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <GPIO_ReadPinValue+0x112>
			}
			else{
				PinValue = LOGIC_LOW ;
    1446:	19 82       	std	Y+1, r1	; 0x01
			}
			break ;
	}
	return PinValue ;
    1448:	89 81       	ldd	r24, Y+1	; 0x01
}
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <GPIO_TogglePinValue>:

/*************************************************************************************/

void GPIO_TogglePinValue( uint8 Port_Id , uint8 Pin_Id ){
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	00 d0       	rcall	.+0      	; 0x1460 <GPIO_TogglePinValue+0x6>
    1460:	00 d0       	rcall	.+0      	; 0x1462 <GPIO_TogglePinValue+0x8>
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	6a 83       	std	Y+2, r22	; 0x02
	switch( Port_Id ){
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	3c 83       	std	Y+4, r19	; 0x04
    1472:	2b 83       	std	Y+3, r18	; 0x03
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	81 30       	cpi	r24, 0x01	; 1
    147a:	91 05       	cpc	r25, r1
    147c:	49 f1       	breq	.+82     	; 0x14d0 <GPIO_TogglePinValue+0x76>
    147e:	2b 81       	ldd	r18, Y+3	; 0x03
    1480:	3c 81       	ldd	r19, Y+4	; 0x04
    1482:	22 30       	cpi	r18, 0x02	; 2
    1484:	31 05       	cpc	r19, r1
    1486:	2c f4       	brge	.+10     	; 0x1492 <GPIO_TogglePinValue+0x38>
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	9c 81       	ldd	r25, Y+4	; 0x04
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	61 f0       	breq	.+24     	; 0x14a8 <GPIO_TogglePinValue+0x4e>
    1490:	5a c0       	rjmp	.+180    	; 0x1546 <GPIO_TogglePinValue+0xec>
    1492:	2b 81       	ldd	r18, Y+3	; 0x03
    1494:	3c 81       	ldd	r19, Y+4	; 0x04
    1496:	22 30       	cpi	r18, 0x02	; 2
    1498:	31 05       	cpc	r19, r1
    149a:	71 f1       	breq	.+92     	; 0x14f8 <GPIO_TogglePinValue+0x9e>
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	9c 81       	ldd	r25, Y+4	; 0x04
    14a0:	83 30       	cpi	r24, 0x03	; 3
    14a2:	91 05       	cpc	r25, r1
    14a4:	e9 f1       	breq	.+122    	; 0x1520 <GPIO_TogglePinValue+0xc6>
    14a6:	4f c0       	rjmp	.+158    	; 0x1546 <GPIO_TogglePinValue+0xec>
		case PORTA_ID :
			TOG_BIT( PORTA , Pin_Id );
    14a8:	ab e3       	ldi	r26, 0x3B	; 59
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	eb e3       	ldi	r30, 0x3B	; 59
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	48 2f       	mov	r20, r24
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	02 2e       	mov	r0, r18
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <GPIO_TogglePinValue+0x6c>
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	0a 94       	dec	r0
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <GPIO_TogglePinValue+0x68>
    14ca:	84 27       	eor	r24, r20
    14cc:	8c 93       	st	X, r24
    14ce:	3b c0       	rjmp	.+118    	; 0x1546 <GPIO_TogglePinValue+0xec>
			break ;

		case PORTB_ID :
			TOG_BIT( PORTB , Pin_Id );
    14d0:	a8 e3       	ldi	r26, 0x38	; 56
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e8 e3       	ldi	r30, 0x38	; 56
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	48 2f       	mov	r20, r24
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	02 2e       	mov	r0, r18
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <GPIO_TogglePinValue+0x94>
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	0a 94       	dec	r0
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <GPIO_TogglePinValue+0x90>
    14f2:	84 27       	eor	r24, r20
    14f4:	8c 93       	st	X, r24
    14f6:	27 c0       	rjmp	.+78     	; 0x1546 <GPIO_TogglePinValue+0xec>
			break ;

		case PORTC_ID :
			TOG_BIT( PORTC , Pin_Id );
    14f8:	a5 e3       	ldi	r26, 0x35	; 53
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e5 e3       	ldi	r30, 0x35	; 53
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	48 2f       	mov	r20, r24
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 2e       	mov	r0, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <GPIO_TogglePinValue+0xbc>
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	0a 94       	dec	r0
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <GPIO_TogglePinValue+0xb8>
    151a:	84 27       	eor	r24, r20
    151c:	8c 93       	st	X, r24
    151e:	13 c0       	rjmp	.+38     	; 0x1546 <GPIO_TogglePinValue+0xec>
			break ;

		case PORTD_ID :
			TOG_BIT( PORTD , Pin_Id );
    1520:	a2 e3       	ldi	r26, 0x32	; 50
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e2 e3       	ldi	r30, 0x32	; 50
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	48 2f       	mov	r20, r24
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	02 2e       	mov	r0, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <GPIO_TogglePinValue+0xe4>
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	0a 94       	dec	r0
    1540:	e2 f7       	brpl	.-8      	; 0x153a <GPIO_TogglePinValue+0xe0>
    1542:	84 27       	eor	r24, r20
    1544:	8c 93       	st	X, r24
			break ;
	}
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <GPIO_SetPortDirction>:
 * Arguments:
	 * Port_Id: GPIO port .
	 * Direction: direction of port .
 * Return Value: no return ( void ) .
 */
void GPIO_SetPortDirction( uint8 Port_Id , uint8 Direction ){
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	00 d0       	rcall	.+0      	; 0x155a <GPIO_SetPortDirction+0x6>
    155a:	00 d0       	rcall	.+0      	; 0x155c <GPIO_SetPortDirction+0x8>
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	89 83       	std	Y+1, r24	; 0x01
    1562:	6a 83       	std	Y+2, r22	; 0x02
	switch( Port_Id ){
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	3c 83       	std	Y+4, r19	; 0x04
    156c:	2b 83       	std	Y+3, r18	; 0x03
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	9c 81       	ldd	r25, Y+4	; 0x04
    1572:	81 30       	cpi	r24, 0x01	; 1
    1574:	91 05       	cpc	r25, r1
    1576:	d1 f0       	breq	.+52     	; 0x15ac <GPIO_SetPortDirction+0x58>
    1578:	2b 81       	ldd	r18, Y+3	; 0x03
    157a:	3c 81       	ldd	r19, Y+4	; 0x04
    157c:	22 30       	cpi	r18, 0x02	; 2
    157e:	31 05       	cpc	r19, r1
    1580:	2c f4       	brge	.+10     	; 0x158c <GPIO_SetPortDirction+0x38>
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	9c 81       	ldd	r25, Y+4	; 0x04
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	61 f0       	breq	.+24     	; 0x15a2 <GPIO_SetPortDirction+0x4e>
    158a:	1e c0       	rjmp	.+60     	; 0x15c8 <GPIO_SetPortDirction+0x74>
    158c:	2b 81       	ldd	r18, Y+3	; 0x03
    158e:	3c 81       	ldd	r19, Y+4	; 0x04
    1590:	22 30       	cpi	r18, 0x02	; 2
    1592:	31 05       	cpc	r19, r1
    1594:	81 f0       	breq	.+32     	; 0x15b6 <GPIO_SetPortDirction+0x62>
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	9c 81       	ldd	r25, Y+4	; 0x04
    159a:	83 30       	cpi	r24, 0x03	; 3
    159c:	91 05       	cpc	r25, r1
    159e:	81 f0       	breq	.+32     	; 0x15c0 <GPIO_SetPortDirction+0x6c>
    15a0:	13 c0       	rjmp	.+38     	; 0x15c8 <GPIO_SetPortDirction+0x74>
		case PORTA_ID :
			DDRA = Direction ;
    15a2:	ea e3       	ldi	r30, 0x3A	; 58
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	80 83       	st	Z, r24
    15aa:	0e c0       	rjmp	.+28     	; 0x15c8 <GPIO_SetPortDirction+0x74>
			break ;

		case PORTB_ID :
			DDRB = Direction ;
    15ac:	e7 e3       	ldi	r30, 0x37	; 55
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	80 83       	st	Z, r24
    15b4:	09 c0       	rjmp	.+18     	; 0x15c8 <GPIO_SetPortDirction+0x74>
			break ;

		case PORTC_ID :
			DDRC = Direction ;
    15b6:	e4 e3       	ldi	r30, 0x34	; 52
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	80 83       	st	Z, r24
    15be:	04 c0       	rjmp	.+8      	; 0x15c8 <GPIO_SetPortDirction+0x74>
			break ;

		case PORTD_ID :
			DDRD = Direction ;
    15c0:	e1 e3       	ldi	r30, 0x31	; 49
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	80 83       	st	Z, r24
			break ;
	}
}
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <GPIO_WritePortValue>:
 * Arguments:
	 * Port_Id: GPIO port .
	 * Value: value of port .
 * Return Value: no return ( void ) .
 */
void GPIO_WritePortValue( uint8 Port_Id , uint8 Value ){
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	00 d0       	rcall	.+0      	; 0x15dc <GPIO_WritePortValue+0x6>
    15dc:	00 d0       	rcall	.+0      	; 0x15de <GPIO_WritePortValue+0x8>
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	89 83       	std	Y+1, r24	; 0x01
    15e4:	6a 83       	std	Y+2, r22	; 0x02
	switch( Port_Id ){
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	3c 83       	std	Y+4, r19	; 0x04
    15ee:	2b 83       	std	Y+3, r18	; 0x03
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	9c 81       	ldd	r25, Y+4	; 0x04
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	91 05       	cpc	r25, r1
    15f8:	d1 f0       	breq	.+52     	; 0x162e <GPIO_WritePortValue+0x58>
    15fa:	2b 81       	ldd	r18, Y+3	; 0x03
    15fc:	3c 81       	ldd	r19, Y+4	; 0x04
    15fe:	22 30       	cpi	r18, 0x02	; 2
    1600:	31 05       	cpc	r19, r1
    1602:	2c f4       	brge	.+10     	; 0x160e <GPIO_WritePortValue+0x38>
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	61 f0       	breq	.+24     	; 0x1624 <GPIO_WritePortValue+0x4e>
    160c:	1e c0       	rjmp	.+60     	; 0x164a <GPIO_WritePortValue+0x74>
    160e:	2b 81       	ldd	r18, Y+3	; 0x03
    1610:	3c 81       	ldd	r19, Y+4	; 0x04
    1612:	22 30       	cpi	r18, 0x02	; 2
    1614:	31 05       	cpc	r19, r1
    1616:	81 f0       	breq	.+32     	; 0x1638 <GPIO_WritePortValue+0x62>
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	9c 81       	ldd	r25, Y+4	; 0x04
    161c:	83 30       	cpi	r24, 0x03	; 3
    161e:	91 05       	cpc	r25, r1
    1620:	81 f0       	breq	.+32     	; 0x1642 <GPIO_WritePortValue+0x6c>
    1622:	13 c0       	rjmp	.+38     	; 0x164a <GPIO_WritePortValue+0x74>
		case PORTA_ID :
			PORTA = Value ;
    1624:	eb e3       	ldi	r30, 0x3B	; 59
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	80 83       	st	Z, r24
    162c:	0e c0       	rjmp	.+28     	; 0x164a <GPIO_WritePortValue+0x74>
			break ;

		case PORTB_ID :
			PORTB = Value ;
    162e:	e8 e3       	ldi	r30, 0x38	; 56
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	80 83       	st	Z, r24
    1636:	09 c0       	rjmp	.+18     	; 0x164a <GPIO_WritePortValue+0x74>
			break ;

		case PORTC_ID :
			PORTC = Value ;
    1638:	e5 e3       	ldi	r30, 0x35	; 53
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	80 83       	st	Z, r24
    1640:	04 c0       	rjmp	.+8      	; 0x164a <GPIO_WritePortValue+0x74>
			break ;

		case PORTD_ID :
			PORTD = Value ;
    1642:	e2 e3       	ldi	r30, 0x32	; 50
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	80 83       	st	Z, r24
			break ;
	}
}
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <GPIO_ReadPortValue>:
 * Description: This function is used to read the value of GPIO port.
 * Arguments:
	 * Port_Id: GPIO port .
 * Return Value: return port value .
 */
uint8 GPIO_ReadPortValue( uint8 Port_Id ){
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	00 d0       	rcall	.+0      	; 0x165e <GPIO_ReadPortValue+0x6>
    165e:	00 d0       	rcall	.+0      	; 0x1660 <GPIO_ReadPortValue+0x8>
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	8a 83       	std	Y+2, r24	; 0x02
	uint8 PortValue ;
	switch( Port_Id ){
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	3c 83       	std	Y+4, r19	; 0x04
    166e:	2b 83       	std	Y+3, r18	; 0x03
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	9c 81       	ldd	r25, Y+4	; 0x04
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	91 05       	cpc	r25, r1
    1678:	d1 f0       	breq	.+52     	; 0x16ae <GPIO_ReadPortValue+0x56>
    167a:	2b 81       	ldd	r18, Y+3	; 0x03
    167c:	3c 81       	ldd	r19, Y+4	; 0x04
    167e:	22 30       	cpi	r18, 0x02	; 2
    1680:	31 05       	cpc	r19, r1
    1682:	2c f4       	brge	.+10     	; 0x168e <GPIO_ReadPortValue+0x36>
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	9c 81       	ldd	r25, Y+4	; 0x04
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	61 f0       	breq	.+24     	; 0x16a4 <GPIO_ReadPortValue+0x4c>
    168c:	1e c0       	rjmp	.+60     	; 0x16ca <GPIO_ReadPortValue+0x72>
    168e:	2b 81       	ldd	r18, Y+3	; 0x03
    1690:	3c 81       	ldd	r19, Y+4	; 0x04
    1692:	22 30       	cpi	r18, 0x02	; 2
    1694:	31 05       	cpc	r19, r1
    1696:	81 f0       	breq	.+32     	; 0x16b8 <GPIO_ReadPortValue+0x60>
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	9c 81       	ldd	r25, Y+4	; 0x04
    169c:	83 30       	cpi	r24, 0x03	; 3
    169e:	91 05       	cpc	r25, r1
    16a0:	81 f0       	breq	.+32     	; 0x16c2 <GPIO_ReadPortValue+0x6a>
    16a2:	13 c0       	rjmp	.+38     	; 0x16ca <GPIO_ReadPortValue+0x72>
		case PORTA_ID :
			PortValue = PINA ;
    16a4:	e9 e3       	ldi	r30, 0x39	; 57
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	89 83       	std	Y+1, r24	; 0x01
    16ac:	0e c0       	rjmp	.+28     	; 0x16ca <GPIO_ReadPortValue+0x72>
			break ;

		case PORTB_ID :
			PortValue = PINB ;
    16ae:	e6 e3       	ldi	r30, 0x36	; 54
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	89 83       	std	Y+1, r24	; 0x01
    16b6:	09 c0       	rjmp	.+18     	; 0x16ca <GPIO_ReadPortValue+0x72>
			break ;

		case PORTC_ID :
			PortValue = PINC ;
    16b8:	e3 e3       	ldi	r30, 0x33	; 51
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	04 c0       	rjmp	.+8      	; 0x16ca <GPIO_ReadPortValue+0x72>
			break ;

		case PORTD_ID :
			PortValue = PIND ;
    16c2:	e0 e3       	ldi	r30, 0x30	; 48
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	89 83       	std	Y+1, r24	; 0x01
			break ;
	}
	return PortValue ;
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <EXT_INT0_Init>:
 * Arguments:
	 * Port_Id: port .
	 * Pin_Id: pin on the port .
 * Return Value: no return ( void ) .
 */
void EXT_INT0_Init(Trigger_Type trigger){
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <EXT_INT0_Init+0x6>
    16e0:	0f 92       	push	r0
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	89 83       	std	Y+1, r24	; 0x01
	GPIO_SetPinDirction(PORTD_ID,PIN2_ID,PIN_INPUT);
    16e8:	83 e0       	ldi	r24, 0x03	; 3
    16ea:	62 e0       	ldi	r22, 0x02	; 2
    16ec:	40 e0       	ldi	r20, 0x00	; 0
    16ee:	0e 94 d5 07 	call	0xfaa	; 0xfaa <GPIO_SetPinDirction>
	SET_BIT( SREG , I_BIT );
    16f2:	af e5       	ldi	r26, 0x5F	; 95
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	ef e5       	ldi	r30, 0x5F	; 95
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	80 68       	ori	r24, 0x80	; 128
    16fe:	8c 93       	st	X, r24
	switch(trigger){
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	3b 83       	std	Y+3, r19	; 0x03
    1708:	2a 83       	std	Y+2, r18	; 0x02
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	9b 81       	ldd	r25, Y+3	; 0x03
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	91 05       	cpc	r25, r1
    1712:	21 f1       	breq	.+72     	; 0x175c <EXT_INT0_Init+0x82>
    1714:	2a 81       	ldd	r18, Y+2	; 0x02
    1716:	3b 81       	ldd	r19, Y+3	; 0x03
    1718:	22 30       	cpi	r18, 0x02	; 2
    171a:	31 05       	cpc	r19, r1
    171c:	2c f4       	brge	.+10     	; 0x1728 <EXT_INT0_Init+0x4e>
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	9b 81       	ldd	r25, Y+3	; 0x03
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	61 f0       	breq	.+24     	; 0x173e <EXT_INT0_Init+0x64>
    1726:	4d c0       	rjmp	.+154    	; 0x17c2 <EXT_INT0_Init+0xe8>
    1728:	2a 81       	ldd	r18, Y+2	; 0x02
    172a:	3b 81       	ldd	r19, Y+3	; 0x03
    172c:	22 30       	cpi	r18, 0x02	; 2
    172e:	31 05       	cpc	r19, r1
    1730:	21 f1       	breq	.+72     	; 0x177a <EXT_INT0_Init+0xa0>
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	9b 81       	ldd	r25, Y+3	; 0x03
    1736:	83 30       	cpi	r24, 0x03	; 3
    1738:	91 05       	cpc	r25, r1
    173a:	71 f1       	breq	.+92     	; 0x1798 <EXT_INT0_Init+0xbe>
    173c:	42 c0       	rjmp	.+132    	; 0x17c2 <EXT_INT0_Init+0xe8>
		case LOW_LEVEL :
			CLR_BIT( MCUCR , ISC00 );
    173e:	a5 e5       	ldi	r26, 0x55	; 85
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e5 e5       	ldi	r30, 0x55	; 85
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	8e 7f       	andi	r24, 0xFE	; 254
    174a:	8c 93       	st	X, r24
			CLR_BIT( MCUCR , ISC01 );
    174c:	a5 e5       	ldi	r26, 0x55	; 85
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e5 e5       	ldi	r30, 0x55	; 85
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	8d 7f       	andi	r24, 0xFD	; 253
    1758:	8c 93       	st	X, r24
    175a:	2c c0       	rjmp	.+88     	; 0x17b4 <EXT_INT0_Init+0xda>
			break;
		case LOGIC_change :
			SET_BIT( MCUCR , ISC00 );
    175c:	a5 e5       	ldi	r26, 0x55	; 85
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e5 e5       	ldi	r30, 0x55	; 85
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	81 60       	ori	r24, 0x01	; 1
    1768:	8c 93       	st	X, r24
			CLR_BIT( MCUCR , ISC01 );
    176a:	a5 e5       	ldi	r26, 0x55	; 85
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e5 e5       	ldi	r30, 0x55	; 85
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	8d 7f       	andi	r24, 0xFD	; 253
    1776:	8c 93       	st	X, r24
    1778:	1d c0       	rjmp	.+58     	; 0x17b4 <EXT_INT0_Init+0xda>
			break;
		case FALLING_EDGE :
			CLR_BIT( MCUCR , ISC00 );
    177a:	a5 e5       	ldi	r26, 0x55	; 85
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e5 e5       	ldi	r30, 0x55	; 85
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	8e 7f       	andi	r24, 0xFE	; 254
    1786:	8c 93       	st	X, r24
			SET_BIT( MCUCR , ISC01 );
    1788:	a5 e5       	ldi	r26, 0x55	; 85
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e5 e5       	ldi	r30, 0x55	; 85
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	82 60       	ori	r24, 0x02	; 2
    1794:	8c 93       	st	X, r24
    1796:	0e c0       	rjmp	.+28     	; 0x17b4 <EXT_INT0_Init+0xda>
			break;
		case RISING_EDGE :
			SET_BIT( MCUCR , ISC00 );
    1798:	a5 e5       	ldi	r26, 0x55	; 85
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e5 e5       	ldi	r30, 0x55	; 85
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	81 60       	ori	r24, 0x01	; 1
    17a4:	8c 93       	st	X, r24
			SET_BIT( MCUCR , ISC01 );
    17a6:	a5 e5       	ldi	r26, 0x55	; 85
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e5 e5       	ldi	r30, 0x55	; 85
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	82 60       	ori	r24, 0x02	; 2
    17b2:	8c 93       	st	X, r24
			break;
		default : return ;
	}
	SET_BIT( GICR , INT0 );
    17b4:	ab e5       	ldi	r26, 0x5B	; 91
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	eb e5       	ldi	r30, 0x5B	; 91
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	80 64       	ori	r24, 0x40	; 64
    17c0:	8c 93       	st	X, r24
}
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	cf 91       	pop	r28
    17ca:	df 91       	pop	r29
    17cc:	08 95       	ret

000017ce <EXT_INT1_Init>:
 * Arguments:
	 * Port_Id: port .
	 * Pin_Id: pin on the port .
 * Return Value: no return ( void ) .
 */
void EXT_INT1_Init(Trigger_Type trigger){
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <EXT_INT1_Init+0x6>
    17d4:	0f 92       	push	r0
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	89 83       	std	Y+1, r24	; 0x01
	GPIO_SetPinDirction(PORTD_ID,PIN3_ID,PIN_INPUT);
    17dc:	83 e0       	ldi	r24, 0x03	; 3
    17de:	63 e0       	ldi	r22, 0x03	; 3
    17e0:	40 e0       	ldi	r20, 0x00	; 0
    17e2:	0e 94 d5 07 	call	0xfaa	; 0xfaa <GPIO_SetPinDirction>
	SET_BIT( SREG , I_BIT );
    17e6:	af e5       	ldi	r26, 0x5F	; 95
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	ef e5       	ldi	r30, 0x5F	; 95
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	80 68       	ori	r24, 0x80	; 128
    17f2:	8c 93       	st	X, r24
	switch(trigger){
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	3b 83       	std	Y+3, r19	; 0x03
    17fc:	2a 83       	std	Y+2, r18	; 0x02
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	9b 81       	ldd	r25, Y+3	; 0x03
    1802:	81 30       	cpi	r24, 0x01	; 1
    1804:	91 05       	cpc	r25, r1
    1806:	21 f1       	breq	.+72     	; 0x1850 <EXT_INT1_Init+0x82>
    1808:	2a 81       	ldd	r18, Y+2	; 0x02
    180a:	3b 81       	ldd	r19, Y+3	; 0x03
    180c:	22 30       	cpi	r18, 0x02	; 2
    180e:	31 05       	cpc	r19, r1
    1810:	2c f4       	brge	.+10     	; 0x181c <EXT_INT1_Init+0x4e>
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	9b 81       	ldd	r25, Y+3	; 0x03
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	61 f0       	breq	.+24     	; 0x1832 <EXT_INT1_Init+0x64>
    181a:	4d c0       	rjmp	.+154    	; 0x18b6 <EXT_INT1_Init+0xe8>
    181c:	2a 81       	ldd	r18, Y+2	; 0x02
    181e:	3b 81       	ldd	r19, Y+3	; 0x03
    1820:	22 30       	cpi	r18, 0x02	; 2
    1822:	31 05       	cpc	r19, r1
    1824:	21 f1       	breq	.+72     	; 0x186e <EXT_INT1_Init+0xa0>
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
    1828:	9b 81       	ldd	r25, Y+3	; 0x03
    182a:	83 30       	cpi	r24, 0x03	; 3
    182c:	91 05       	cpc	r25, r1
    182e:	71 f1       	breq	.+92     	; 0x188c <EXT_INT1_Init+0xbe>
    1830:	42 c0       	rjmp	.+132    	; 0x18b6 <EXT_INT1_Init+0xe8>
		case LOW_LEVEL :
			CLR_BIT( MCUCR , ISC10 );
    1832:	a5 e5       	ldi	r26, 0x55	; 85
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e5 e5       	ldi	r30, 0x55	; 85
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	8b 7f       	andi	r24, 0xFB	; 251
    183e:	8c 93       	st	X, r24
			CLR_BIT( MCUCR , ISC11 );
    1840:	a5 e5       	ldi	r26, 0x55	; 85
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e5 e5       	ldi	r30, 0x55	; 85
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	87 7f       	andi	r24, 0xF7	; 247
    184c:	8c 93       	st	X, r24
    184e:	2c c0       	rjmp	.+88     	; 0x18a8 <EXT_INT1_Init+0xda>
			break;
		case LOGIC_change :
			SET_BIT( MCUCR , ISC10 );
    1850:	a5 e5       	ldi	r26, 0x55	; 85
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e5 e5       	ldi	r30, 0x55	; 85
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	84 60       	ori	r24, 0x04	; 4
    185c:	8c 93       	st	X, r24
			CLR_BIT( MCUCR , ISC11 );
    185e:	a5 e5       	ldi	r26, 0x55	; 85
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e5 e5       	ldi	r30, 0x55	; 85
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	87 7f       	andi	r24, 0xF7	; 247
    186a:	8c 93       	st	X, r24
    186c:	1d c0       	rjmp	.+58     	; 0x18a8 <EXT_INT1_Init+0xda>
			break;
		case FALLING_EDGE :
			CLR_BIT( MCUCR , ISC10 );
    186e:	a5 e5       	ldi	r26, 0x55	; 85
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e5 e5       	ldi	r30, 0x55	; 85
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	8b 7f       	andi	r24, 0xFB	; 251
    187a:	8c 93       	st	X, r24
			SET_BIT( MCUCR , ISC11 );
    187c:	a5 e5       	ldi	r26, 0x55	; 85
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e5 e5       	ldi	r30, 0x55	; 85
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	88 60       	ori	r24, 0x08	; 8
    1888:	8c 93       	st	X, r24
    188a:	0e c0       	rjmp	.+28     	; 0x18a8 <EXT_INT1_Init+0xda>
			break;
		case RISING_EDGE :
			SET_BIT( MCUCR , ISC10 );
    188c:	a5 e5       	ldi	r26, 0x55	; 85
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	e5 e5       	ldi	r30, 0x55	; 85
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	84 60       	ori	r24, 0x04	; 4
    1898:	8c 93       	st	X, r24
			SET_BIT( MCUCR , ISC11 );
    189a:	a5 e5       	ldi	r26, 0x55	; 85
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e5 e5       	ldi	r30, 0x55	; 85
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	88 60       	ori	r24, 0x08	; 8
    18a6:	8c 93       	st	X, r24
			break;
		default : return ;
	}
	SET_BIT( GICR , INT1 );
    18a8:	ab e5       	ldi	r26, 0x5B	; 91
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	eb e5       	ldi	r30, 0x5B	; 91
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	80 68       	ori	r24, 0x80	; 128
    18b4:	8c 93       	st	X, r24
}
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <EXT_INT2_Init>:
 * Arguments:
	 * Port_Id: port .
	 * Pin_Id: pin on the port .
 * Return Value: no return ( void ) .
 */
void EXT_INT2_Init(Trigger_Type trigger){
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <EXT_INT2_Init+0x6>
    18c8:	0f 92       	push	r0
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	89 83       	std	Y+1, r24	; 0x01
	GPIO_SetPinDirction(PORTB_ID,PIN2_ID,PIN_INPUT);
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	62 e0       	ldi	r22, 0x02	; 2
    18d4:	40 e0       	ldi	r20, 0x00	; 0
    18d6:	0e 94 d5 07 	call	0xfaa	; 0xfaa <GPIO_SetPinDirction>
	switch(trigger){
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	3b 83       	std	Y+3, r19	; 0x03
    18e2:	2a 83       	std	Y+2, r18	; 0x02
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	9b 81       	ldd	r25, Y+3	; 0x03
    18e8:	82 30       	cpi	r24, 0x02	; 2
    18ea:	91 05       	cpc	r25, r1
    18ec:	31 f0       	breq	.+12     	; 0x18fa <EXT_INT2_Init+0x38>
    18ee:	2a 81       	ldd	r18, Y+2	; 0x02
    18f0:	3b 81       	ldd	r19, Y+3	; 0x03
    18f2:	23 30       	cpi	r18, 0x03	; 3
    18f4:	31 05       	cpc	r19, r1
    18f6:	49 f0       	breq	.+18     	; 0x190a <EXT_INT2_Init+0x48>
    18f8:	1d c0       	rjmp	.+58     	; 0x1934 <EXT_INT2_Init+0x72>
		case FALLING_EDGE :
			CLR_BIT( MCUCR , ISC2 );
    18fa:	a5 e5       	ldi	r26, 0x55	; 85
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e5 e5       	ldi	r30, 0x55	; 85
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	8f 7b       	andi	r24, 0xBF	; 191
    1906:	8c 93       	st	X, r24
    1908:	07 c0       	rjmp	.+14     	; 0x1918 <EXT_INT2_Init+0x56>
			break;
		case RISING_EDGE :
			SET_BIT( MCUCR , ISC2 );
    190a:	a5 e5       	ldi	r26, 0x55	; 85
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e5 e5       	ldi	r30, 0x55	; 85
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	80 64       	ori	r24, 0x40	; 64
    1916:	8c 93       	st	X, r24
			break;
		default : return ;
	}
	SET_BIT( GICR , INT2 );
    1918:	ab e5       	ldi	r26, 0x5B	; 91
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	eb e5       	ldi	r30, 0x5B	; 91
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	80 62       	ori	r24, 0x20	; 32
    1924:	8c 93       	st	X, r24
	SET_BIT( SREG , I_BIT );
    1926:	af e5       	ldi	r26, 0x5F	; 95
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	ef e5       	ldi	r30, 0x5F	; 95
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	80 68       	ori	r24, 0x80	; 128
    1932:	8c 93       	st	X, r24
}
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <EXT_INT0_ExecuteFun>:
 * Arguments:
	 * Port_Id: port .
	 * Pin_Id: pin on the port .
 * Return Value: no return ( void ) .
 */
void EXT_INT0_ExecuteFun( void (*PtrFun)(void) ){
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	00 d0       	rcall	.+0      	; 0x1946 <EXT_INT0_ExecuteFun+0x6>
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	9a 83       	std	Y+2, r25	; 0x02
    194c:	89 83       	std	Y+1, r24	; 0x01
	EXT_INT0_PtrFun = PtrFun ;
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	9a 81       	ldd	r25, Y+2	; 0x02
    1952:	90 93 43 01 	sts	0x0143, r25
    1956:	80 93 42 01 	sts	0x0142, r24
}
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	08 95       	ret

00001964 <EXT_INT1_ExecuteFun>:
 * Arguments:
	 * Port_Id: port .
	 * Pin_Id: pin on the port .
 * Return Value: no return ( void ) .
 */
void EXT_INT1_ExecuteFun( void (*PtrFun)(void) ){
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	00 d0       	rcall	.+0      	; 0x196a <EXT_INT1_ExecuteFun+0x6>
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	9a 83       	std	Y+2, r25	; 0x02
    1970:	89 83       	std	Y+1, r24	; 0x01
	EXT_INT1_PtrFun = PtrFun ;
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	9a 81       	ldd	r25, Y+2	; 0x02
    1976:	90 93 45 01 	sts	0x0145, r25
    197a:	80 93 44 01 	sts	0x0144, r24
}
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	08 95       	ret

00001988 <EXT_INT2_ExecuteFun>:
 * Arguments:
	 * Port_Id: port .
	 * Pin_Id: pin on the port .
 * Return Value: no return ( void ) .
 */
void EXT_INT2_ExecuteFun( void (*PtrFun)(void) ){
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	00 d0       	rcall	.+0      	; 0x198e <EXT_INT2_ExecuteFun+0x6>
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    1992:	9a 83       	std	Y+2, r25	; 0x02
    1994:	89 83       	std	Y+1, r24	; 0x01
	EXT_INT2_PtrFun = PtrFun ;
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	9a 81       	ldd	r25, Y+2	; 0x02
    199a:	90 93 47 01 	sts	0x0147, r25
    199e:	80 93 46 01 	sts	0x0146, r24
}
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	08 95       	ret

000019ac <__vector_1>:
	 * Port_Id: port .
	 * Pin_Id: pin on the port .
 * Return Value: no return ( void ) .
 */

ISR(INT0_vect){
    19ac:	1f 92       	push	r1
    19ae:	0f 92       	push	r0
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	0f 92       	push	r0
    19b4:	11 24       	eor	r1, r1
    19b6:	2f 93       	push	r18
    19b8:	3f 93       	push	r19
    19ba:	4f 93       	push	r20
    19bc:	5f 93       	push	r21
    19be:	6f 93       	push	r22
    19c0:	7f 93       	push	r23
    19c2:	8f 93       	push	r24
    19c4:	9f 93       	push	r25
    19c6:	af 93       	push	r26
    19c8:	bf 93       	push	r27
    19ca:	ef 93       	push	r30
    19cc:	ff 93       	push	r31
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
	EXT_INT0_PtrFun();
    19d6:	e0 91 42 01 	lds	r30, 0x0142
    19da:	f0 91 43 01 	lds	r31, 0x0143
    19de:	09 95       	icall
}
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	ff 91       	pop	r31
    19e6:	ef 91       	pop	r30
    19e8:	bf 91       	pop	r27
    19ea:	af 91       	pop	r26
    19ec:	9f 91       	pop	r25
    19ee:	8f 91       	pop	r24
    19f0:	7f 91       	pop	r23
    19f2:	6f 91       	pop	r22
    19f4:	5f 91       	pop	r21
    19f6:	4f 91       	pop	r20
    19f8:	3f 91       	pop	r19
    19fa:	2f 91       	pop	r18
    19fc:	0f 90       	pop	r0
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	0f 90       	pop	r0
    1a02:	1f 90       	pop	r1
    1a04:	18 95       	reti

00001a06 <__vector_2>:
	 * Port_Id: port .
	 * Pin_Id: pin on the port .
 * Return Value: no return ( void ) .
 */

ISR(INT1_vect){
    1a06:	1f 92       	push	r1
    1a08:	0f 92       	push	r0
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	0f 92       	push	r0
    1a0e:	11 24       	eor	r1, r1
    1a10:	2f 93       	push	r18
    1a12:	3f 93       	push	r19
    1a14:	4f 93       	push	r20
    1a16:	5f 93       	push	r21
    1a18:	6f 93       	push	r22
    1a1a:	7f 93       	push	r23
    1a1c:	8f 93       	push	r24
    1a1e:	9f 93       	push	r25
    1a20:	af 93       	push	r26
    1a22:	bf 93       	push	r27
    1a24:	ef 93       	push	r30
    1a26:	ff 93       	push	r31
    1a28:	df 93       	push	r29
    1a2a:	cf 93       	push	r28
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
	EXT_INT1_PtrFun();
    1a30:	e0 91 44 01 	lds	r30, 0x0144
    1a34:	f0 91 45 01 	lds	r31, 0x0145
    1a38:	09 95       	icall
}
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	ff 91       	pop	r31
    1a40:	ef 91       	pop	r30
    1a42:	bf 91       	pop	r27
    1a44:	af 91       	pop	r26
    1a46:	9f 91       	pop	r25
    1a48:	8f 91       	pop	r24
    1a4a:	7f 91       	pop	r23
    1a4c:	6f 91       	pop	r22
    1a4e:	5f 91       	pop	r21
    1a50:	4f 91       	pop	r20
    1a52:	3f 91       	pop	r19
    1a54:	2f 91       	pop	r18
    1a56:	0f 90       	pop	r0
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	0f 90       	pop	r0
    1a5c:	1f 90       	pop	r1
    1a5e:	18 95       	reti

00001a60 <__vector_3>:
	 * Port_Id: port .
	 * Pin_Id: pin on the port .
 * Return Value: no return ( void ) .
 */

ISR(INT2_vect){
    1a60:	1f 92       	push	r1
    1a62:	0f 92       	push	r0
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	0f 92       	push	r0
    1a68:	11 24       	eor	r1, r1
    1a6a:	2f 93       	push	r18
    1a6c:	3f 93       	push	r19
    1a6e:	4f 93       	push	r20
    1a70:	5f 93       	push	r21
    1a72:	6f 93       	push	r22
    1a74:	7f 93       	push	r23
    1a76:	8f 93       	push	r24
    1a78:	9f 93       	push	r25
    1a7a:	af 93       	push	r26
    1a7c:	bf 93       	push	r27
    1a7e:	ef 93       	push	r30
    1a80:	ff 93       	push	r31
    1a82:	df 93       	push	r29
    1a84:	cf 93       	push	r28
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
	EXT_INT2_PtrFun();
    1a8a:	e0 91 46 01 	lds	r30, 0x0146
    1a8e:	f0 91 47 01 	lds	r31, 0x0147
    1a92:	09 95       	icall
}
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	ff 91       	pop	r31
    1a9a:	ef 91       	pop	r30
    1a9c:	bf 91       	pop	r27
    1a9e:	af 91       	pop	r26
    1aa0:	9f 91       	pop	r25
    1aa2:	8f 91       	pop	r24
    1aa4:	7f 91       	pop	r23
    1aa6:	6f 91       	pop	r22
    1aa8:	5f 91       	pop	r21
    1aaa:	4f 91       	pop	r20
    1aac:	3f 91       	pop	r19
    1aae:	2f 91       	pop	r18
    1ab0:	0f 90       	pop	r0
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	0f 90       	pop	r0
    1ab6:	1f 90       	pop	r1
    1ab8:	18 95       	reti

00001aba <SEGMENT_Init>:
 * Description: This function is used to initialize the 7 Segment .
 * Arguments:
	 * Port_Id: port .
 * Return Value: no return ( void ) .
 */
void SEGMENT_Init( uint8 Port_id ){
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	0f 92       	push	r0
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	89 83       	std	Y+1, r24	; 0x01
	GPIO_SetPortDirction(Port_id,PORT_OUTPUT);
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	6f ef       	ldi	r22, 0xFF	; 255
    1aca:	0e 94 aa 0a 	call	0x1554	; 0x1554 <GPIO_SetPortDirction>
	GPIO_WritePortValue(Port_id,LOGIC_LOW);
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	60 e0       	ldi	r22, 0x00	; 0
    1ad2:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_WritePortValue>
}
    1ad6:	0f 90       	pop	r0
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <SEGMENT_DisplayNumer>:
 * Arguments:
	 * Port_Id: port .
	 * Number: Number will displayed .
 * Return Value: no return ( void ) .
 */
void SEGMENT_DisplayNumer( uint8 Port_id , uint8 Common , uint8 Number ){
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <SEGMENT_DisplayNumer+0x6>
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <SEGMENT_DisplayNumer+0x8>
    1ae6:	0f 92       	push	r0
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	8b 83       	std	Y+3, r24	; 0x03
    1aee:	6c 83       	std	Y+4, r22	; 0x04
    1af0:	4d 83       	std	Y+5, r20	; 0x05

	if( Number >=0 && Number <= 9 ){
    1af2:	8d 81       	ldd	r24, Y+5	; 0x05
    1af4:	8a 30       	cpi	r24, 0x0A	; 10
    1af6:	e8 f4       	brcc	.+58     	; 0x1b32 <SEGMENT_DisplayNumer+0x54>
		if( Common == COMMON_ANODE ){
    1af8:	8c 81       	ldd	r24, Y+4	; 0x04
    1afa:	81 30       	cpi	r24, 0x01	; 1
    1afc:	71 f4       	brne	.+28     	; 0x1b1a <SEGMENT_DisplayNumer+0x3c>
			GPIO_WritePortValue(Port_id,~Numbers[Number]);
    1afe:	8d 81       	ldd	r24, Y+5	; 0x05
    1b00:	88 2f       	mov	r24, r24
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	fc 01       	movw	r30, r24
    1b06:	e9 5d       	subi	r30, 0xD9	; 217
    1b08:	fe 4f       	sbci	r31, 0xFE	; 254
    1b0a:	80 81       	ld	r24, Z
    1b0c:	98 2f       	mov	r25, r24
    1b0e:	90 95       	com	r25
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	69 2f       	mov	r22, r25
    1b14:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_WritePortValue>
    1b18:	42 c0       	rjmp	.+132    	; 0x1b9e <SEGMENT_DisplayNumer+0xc0>
		}
		else{
			GPIO_WritePortValue(Port_id,Numbers[Number]);
    1b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1c:	88 2f       	mov	r24, r24
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	fc 01       	movw	r30, r24
    1b22:	e9 5d       	subi	r30, 0xD9	; 217
    1b24:	fe 4f       	sbci	r31, 0xFE	; 254
    1b26:	90 81       	ld	r25, Z
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	69 2f       	mov	r22, r25
    1b2c:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_WritePortValue>
    1b30:	36 c0       	rjmp	.+108    	; 0x1b9e <SEGMENT_DisplayNumer+0xc0>
		}
	}
	else{
		uint8 counter , flag = 0 ;
    1b32:	19 82       	std	Y+1, r1	; 0x01
		for( counter = 0 ; counter < 10 ; ++counter ){
    1b34:	1a 82       	std	Y+2, r1	; 0x02
    1b36:	11 c0       	rjmp	.+34     	; 0x1b5a <SEGMENT_DisplayNumer+0x7c>
			if( Number == Numbers[counter] ){
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	88 2f       	mov	r24, r24
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	fc 01       	movw	r30, r24
    1b40:	e9 5d       	subi	r30, 0xD9	; 217
    1b42:	fe 4f       	sbci	r31, 0xFE	; 254
    1b44:	90 81       	ld	r25, Z
    1b46:	8d 81       	ldd	r24, Y+5	; 0x05
    1b48:	98 17       	cp	r25, r24
    1b4a:	11 f4       	brne	.+4      	; 0x1b50 <SEGMENT_DisplayNumer+0x72>
				flag = 0 ;
    1b4c:	19 82       	std	Y+1, r1	; 0x01
    1b4e:	08 c0       	rjmp	.+16     	; 0x1b60 <SEGMENT_DisplayNumer+0x82>
				break ;
			}
			else{
				flag = 1 ;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	89 83       	std	Y+1, r24	; 0x01
			GPIO_WritePortValue(Port_id,Numbers[Number]);
		}
	}
	else{
		uint8 counter , flag = 0 ;
		for( counter = 0 ; counter < 10 ; ++counter ){
    1b54:	8a 81       	ldd	r24, Y+2	; 0x02
    1b56:	8f 5f       	subi	r24, 0xFF	; 255
    1b58:	8a 83       	std	Y+2, r24	; 0x02
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	8a 30       	cpi	r24, 0x0A	; 10
    1b5e:	60 f3       	brcs	.-40     	; 0x1b38 <SEGMENT_DisplayNumer+0x5a>
			else{
				flag = 1 ;
				continue ;
			}
		}
		if( flag == LOGIC_LOW ){
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	88 23       	and	r24, r24
    1b64:	e1 f4       	brne	.+56     	; 0x1b9e <SEGMENT_DisplayNumer+0xc0>
			if( Common == COMMON_ANODE ){
    1b66:	8c 81       	ldd	r24, Y+4	; 0x04
    1b68:	81 30       	cpi	r24, 0x01	; 1
    1b6a:	71 f4       	brne	.+28     	; 0x1b88 <SEGMENT_DisplayNumer+0xaa>
				GPIO_WritePortValue(Port_id, ~Numbers[Number]);
    1b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6e:	88 2f       	mov	r24, r24
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	fc 01       	movw	r30, r24
    1b74:	e9 5d       	subi	r30, 0xD9	; 217
    1b76:	fe 4f       	sbci	r31, 0xFE	; 254
    1b78:	80 81       	ld	r24, Z
    1b7a:	98 2f       	mov	r25, r24
    1b7c:	90 95       	com	r25
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	69 2f       	mov	r22, r25
    1b82:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_WritePortValue>
    1b86:	0b c0       	rjmp	.+22     	; 0x1b9e <SEGMENT_DisplayNumer+0xc0>
			}
			else{
				GPIO_WritePortValue(Port_id, Numbers[Number]);
    1b88:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8a:	88 2f       	mov	r24, r24
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	fc 01       	movw	r30, r24
    1b90:	e9 5d       	subi	r30, 0xD9	; 217
    1b92:	fe 4f       	sbci	r31, 0xFE	; 254
    1b94:	90 81       	ld	r25, Z
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	69 2f       	mov	r22, r25
    1b9a:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_WritePortValue>
		}
		else{
			/* Nothing Happened */
		}
	}
}
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <PUSHBUTTON_ButtonInit>:
	 * Pin_Id: pin on the port .
	 * Mode: Internal Pull up or Not .
 * Return Value: no return ( void ) .
 */

void PUSHBUTTON_ButtonInit( uint8 Port_Id , uint8 Pin_Id , uint8 Mode ){
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <PUSHBUTTON_ButtonInit+0x6>
    1bb4:	0f 92       	push	r0
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	89 83       	std	Y+1, r24	; 0x01
    1bbc:	6a 83       	std	Y+2, r22	; 0x02
    1bbe:	4b 83       	std	Y+3, r20	; 0x03
	GPIO_SetPinDirction(Port_Id,Pin_Id,PIN_INPUT);
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	6a 81       	ldd	r22, Y+2	; 0x02
    1bc4:	40 e0       	ldi	r20, 0x00	; 0
    1bc6:	0e 94 d5 07 	call	0xfaa	; 0xfaa <GPIO_SetPinDirction>
	if( Mode == INTERNAL_PULL_UP ){
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	81 30       	cpi	r24, 0x01	; 1
    1bce:	31 f4       	brne	.+12     	; 0x1bdc <PUSHBUTTON_ButtonInit+0x2e>
		GPIO_WritePinValue(Port_Id,Pin_Id,LOGIC_HIGH);
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	6a 81       	ldd	r22, Y+2	; 0x02
    1bd4:	41 e0       	ldi	r20, 0x01	; 1
    1bd6:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
    1bda:	05 c0       	rjmp	.+10     	; 0x1be6 <PUSHBUTTON_ButtonInit+0x38>
	}
	else{
		GPIO_WritePinValue(Port_Id,Pin_Id,LOGIC_LOW);
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	6a 81       	ldd	r22, Y+2	; 0x02
    1be0:	40 e0       	ldi	r20, 0x00	; 0
    1be2:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
	}
}
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	cf 91       	pop	r28
    1bee:	df 91       	pop	r29
    1bf0:	08 95       	ret

00001bf2 <PUSHBUTTON_IsPressed>:
 * Arguments:
	 * Port_Id: port .
	 * Pin_Id: pin on the port .
 * Return Value: returns is pressed or not .
 */
uint8 PUSHBUTTON_IsPressed( uint8 Port_Id , uint8 Pin_Id ){
    1bf2:	df 93       	push	r29
    1bf4:	cf 93       	push	r28
    1bf6:	00 d0       	rcall	.+0      	; 0x1bf8 <PUSHBUTTON_IsPressed+0x6>
    1bf8:	0f 92       	push	r0
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	8a 83       	std	Y+2, r24	; 0x02
    1c00:	6b 83       	std	Y+3, r22	; 0x03
	uint8 PinVal ;
	PinVal = GPIO_ReadPinValue(Port_Id,Pin_Id);
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	6b 81       	ldd	r22, Y+3	; 0x03
    1c06:	0e 94 9b 09 	call	0x1336	; 0x1336 <GPIO_ReadPinValue>
    1c0a:	89 83       	std	Y+1, r24	; 0x01
	return PinVal ;
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	08 95       	ret

00001c1a <LED_LedInit>:
 * Arguments:
	 * Port_Id: port .
	 * Pin_Id: pin on the port .
 * Return Value: no return ( void ) .
 */
void LED_LedInit( uint8 Port_Id , uint8 Pin_Id ){
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <LED_LedInit+0x6>
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_SetPinDirction(Port_Id,Pin_Id,PIN_OUTPUT);
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	6a 81       	ldd	r22, Y+2	; 0x02
    1c2c:	41 e0       	ldi	r20, 0x01	; 1
    1c2e:	0e 94 d5 07 	call	0xfaa	; 0xfaa <GPIO_SetPinDirction>
	GPIO_WritePinValue(Port_Id,Pin_Id,LOGIC_LOW);
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	6a 81       	ldd	r22, Y+2	; 0x02
    1c36:	40 e0       	ldi	r20, 0x00	; 0
    1c38:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
}
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	cf 91       	pop	r28
    1c42:	df 91       	pop	r29
    1c44:	08 95       	ret

00001c46 <LED_LedOn>:
 * Arguments:
	 * Port_Id: port .
	 * Pin_Id: pin on the port .
 * Return Value: no return ( void ) .
 */
void LED_LedOn( uint8 Port_Id , uint8 Pin_Id ){
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <LED_LedOn+0x6>
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	89 83       	std	Y+1, r24	; 0x01
    1c52:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_WritePinValue(Port_Id,Pin_Id,LOGIC_HIGH);
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	6a 81       	ldd	r22, Y+2	; 0x02
    1c58:	41 e0       	ldi	r20, 0x01	; 1
    1c5a:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
}
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <LED_LedOff>:
 * Arguments:
	 * Port_Id: port .
	 * Pin_Id: pin on the port .
 * Return Value: no return ( void ) .
 */
void LED_LedOff( uint8 Port_Id , uint8 Pin_Id ){
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <LED_LedOff+0x6>
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	89 83       	std	Y+1, r24	; 0x01
    1c74:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_WritePinValue(Port_Id,Pin_Id,LOGIC_LOW);
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	6a 81       	ldd	r22, Y+2	; 0x02
    1c7a:	40 e0       	ldi	r20, 0x00	; 0
    1c7c:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
}
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	cf 91       	pop	r28
    1c86:	df 91       	pop	r29
    1c88:	08 95       	ret

00001c8a <LCD_SendCommand>:
 * Description: This function is used to Send Command to LCD .
 * Arguments:
	 * Command : Command Send .
 * Return Value: no return ( void ) .
 */
void LCD_SendCommand( uint8 Command ){
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	6d 97       	sbiw	r28, 0x1d	; 29
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	de bf       	out	0x3e, r29	; 62
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	cd bf       	out	0x3d, r28	; 61
    1c9e:	8d 8f       	std	Y+29, r24	; 0x1d
	if( LCD_Bit_Mode == MODE_4_BIT || LCD_Bit_Mode == MODE_8_BIT ){
    1ca0:	80 91 4a 01 	lds	r24, 0x014A
    1ca4:	88 23       	and	r24, r24
    1ca6:	29 f0       	breq	.+10     	; 0x1cb2 <LCD_SendCommand+0x28>
    1ca8:	80 91 4a 01 	lds	r24, 0x014A
    1cac:	81 30       	cpi	r24, 0x01	; 1
    1cae:	09 f0       	breq	.+2      	; 0x1cb2 <LCD_SendCommand+0x28>
    1cb0:	32 c1       	rjmp	.+612    	; 0x1f16 <LCD_SendCommand+0x28c>
		GPIO_WritePinValue(LCD_ControlPort,RS,INSTRUCTION_CODE);
    1cb2:	80 91 49 01 	lds	r24, 0x0149
    1cb6:	60 e0       	ldi	r22, 0x00	; 0
    1cb8:	40 e0       	ldi	r20, 0x00	; 0
    1cba:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
		GPIO_WritePinValue(LCD_ControlPort,RW,INSTRUCTION_CODE);
    1cbe:	80 91 49 01 	lds	r24, 0x0149
    1cc2:	61 e0       	ldi	r22, 0x01	; 1
    1cc4:	40 e0       	ldi	r20, 0x00	; 0
    1cc6:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
		if( LCD_Bit_Mode == MODE_4_BIT ){
    1cca:	80 91 4a 01 	lds	r24, 0x014A
    1cce:	88 23       	and	r24, r24
    1cd0:	49 f5       	brne	.+82     	; 0x1d24 <LCD_SendCommand+0x9a>
			GPIO_WritePinValue(LCD_DataPort,DB4,RED_BIT(Command,PIN4_ID));
    1cd2:	90 91 48 01 	lds	r25, 0x0148
    1cd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cd8:	28 2f       	mov	r18, r24
    1cda:	20 71       	andi	r18, 0x10	; 16
    1cdc:	89 2f       	mov	r24, r25
    1cde:	64 e0       	ldi	r22, 0x04	; 4
    1ce0:	42 2f       	mov	r20, r18
    1ce2:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
			GPIO_WritePinValue(LCD_DataPort,DB5,RED_BIT(Command,PIN5_ID));
    1ce6:	90 91 48 01 	lds	r25, 0x0148
    1cea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cec:	28 2f       	mov	r18, r24
    1cee:	20 72       	andi	r18, 0x20	; 32
    1cf0:	89 2f       	mov	r24, r25
    1cf2:	65 e0       	ldi	r22, 0x05	; 5
    1cf4:	42 2f       	mov	r20, r18
    1cf6:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
			GPIO_WritePinValue(LCD_DataPort,DB6,RED_BIT(Command,PIN6_ID));
    1cfa:	90 91 48 01 	lds	r25, 0x0148
    1cfe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d00:	28 2f       	mov	r18, r24
    1d02:	20 74       	andi	r18, 0x40	; 64
    1d04:	89 2f       	mov	r24, r25
    1d06:	66 e0       	ldi	r22, 0x06	; 6
    1d08:	42 2f       	mov	r20, r18
    1d0a:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
			GPIO_WritePinValue(LCD_DataPort,DB7,RED_BIT(Command,PIN7_ID));
    1d0e:	90 91 48 01 	lds	r25, 0x0148
    1d12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d14:	28 2f       	mov	r18, r24
    1d16:	20 78       	andi	r18, 0x80	; 128
    1d18:	89 2f       	mov	r24, r25
    1d1a:	67 e0       	ldi	r22, 0x07	; 7
    1d1c:	42 2f       	mov	r20, r18
    1d1e:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
    1d22:	09 c0       	rjmp	.+18     	; 0x1d36 <LCD_SendCommand+0xac>
		}
		else if( LCD_Bit_Mode == MODE_8_BIT ){
    1d24:	80 91 4a 01 	lds	r24, 0x014A
    1d28:	81 30       	cpi	r24, 0x01	; 1
    1d2a:	29 f4       	brne	.+10     	; 0x1d36 <LCD_SendCommand+0xac>
			GPIO_WritePortValue(LCD_DataPort,Command);
    1d2c:	80 91 48 01 	lds	r24, 0x0148
    1d30:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d32:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_WritePortValue>
		}
		GPIO_WritePinValue(LCD_ControlPort,E,LOGIC_HIGH);
    1d36:	80 91 49 01 	lds	r24, 0x0149
    1d3a:	62 e0       	ldi	r22, 0x02	; 2
    1d3c:	41 e0       	ldi	r20, 0x01	; 1
    1d3e:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	a0 e8       	ldi	r26, 0x80	; 128
    1d48:	bf e3       	ldi	r27, 0x3F	; 63
    1d4a:	89 8f       	std	Y+25, r24	; 0x19
    1d4c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d4e:	ab 8f       	std	Y+27, r26	; 0x1b
    1d50:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d52:	69 8d       	ldd	r22, Y+25	; 0x19
    1d54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	4a e7       	ldi	r20, 0x7A	; 122
    1d60:	53 e4       	ldi	r21, 0x43	; 67
    1d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	8d 8b       	std	Y+21, r24	; 0x15
    1d6c:	9e 8b       	std	Y+22, r25	; 0x16
    1d6e:	af 8b       	std	Y+23, r26	; 0x17
    1d70:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d72:	6d 89       	ldd	r22, Y+21	; 0x15
    1d74:	7e 89       	ldd	r23, Y+22	; 0x16
    1d76:	8f 89       	ldd	r24, Y+23	; 0x17
    1d78:	98 8d       	ldd	r25, Y+24	; 0x18
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e8       	ldi	r20, 0x80	; 128
    1d80:	5f e3       	ldi	r21, 0x3F	; 63
    1d82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d86:	88 23       	and	r24, r24
    1d88:	2c f4       	brge	.+10     	; 0x1d94 <LCD_SendCommand+0x10a>
		__ticks = 1;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	9c 8b       	std	Y+20, r25	; 0x14
    1d90:	8b 8b       	std	Y+19, r24	; 0x13
    1d92:	3f c0       	rjmp	.+126    	; 0x1e12 <LCD_SendCommand+0x188>
	else if (__tmp > 65535)
    1d94:	6d 89       	ldd	r22, Y+21	; 0x15
    1d96:	7e 89       	ldd	r23, Y+22	; 0x16
    1d98:	8f 89       	ldd	r24, Y+23	; 0x17
    1d9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	3f ef       	ldi	r19, 0xFF	; 255
    1da0:	4f e7       	ldi	r20, 0x7F	; 127
    1da2:	57 e4       	ldi	r21, 0x47	; 71
    1da4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1da8:	18 16       	cp	r1, r24
    1daa:	4c f5       	brge	.+82     	; 0x1dfe <LCD_SendCommand+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dac:	69 8d       	ldd	r22, Y+25	; 0x19
    1dae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1db0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1db2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e2       	ldi	r20, 0x20	; 32
    1dba:	51 e4       	ldi	r21, 0x41	; 65
    1dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	bc 01       	movw	r22, r24
    1dc6:	cd 01       	movw	r24, r26
    1dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	9c 8b       	std	Y+20, r25	; 0x14
    1dd2:	8b 8b       	std	Y+19, r24	; 0x13
    1dd4:	0f c0       	rjmp	.+30     	; 0x1df4 <LCD_SendCommand+0x16a>
    1dd6:	89 e1       	ldi	r24, 0x19	; 25
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9a 8b       	std	Y+18, r25	; 0x12
    1ddc:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dde:	89 89       	ldd	r24, Y+17	; 0x11
    1de0:	9a 89       	ldd	r25, Y+18	; 0x12
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <LCD_SendCommand+0x158>
    1de6:	9a 8b       	std	Y+18, r25	; 0x12
    1de8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dea:	8b 89       	ldd	r24, Y+19	; 0x13
    1dec:	9c 89       	ldd	r25, Y+20	; 0x14
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	9c 8b       	std	Y+20, r25	; 0x14
    1df2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df4:	8b 89       	ldd	r24, Y+19	; 0x13
    1df6:	9c 89       	ldd	r25, Y+20	; 0x14
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	69 f7       	brne	.-38     	; 0x1dd6 <LCD_SendCommand+0x14c>
    1dfc:	14 c0       	rjmp	.+40     	; 0x1e26 <LCD_SendCommand+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfe:	6d 89       	ldd	r22, Y+21	; 0x15
    1e00:	7e 89       	ldd	r23, Y+22	; 0x16
    1e02:	8f 89       	ldd	r24, Y+23	; 0x17
    1e04:	98 8d       	ldd	r25, Y+24	; 0x18
    1e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	9c 8b       	std	Y+20, r25	; 0x14
    1e10:	8b 8b       	std	Y+19, r24	; 0x13
    1e12:	8b 89       	ldd	r24, Y+19	; 0x13
    1e14:	9c 89       	ldd	r25, Y+20	; 0x14
    1e16:	98 8b       	std	Y+16, r25	; 0x10
    1e18:	8f 87       	std	Y+15, r24	; 0x0f
    1e1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e1c:	98 89       	ldd	r25, Y+16	; 0x10
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <LCD_SendCommand+0x194>
    1e22:	98 8b       	std	Y+16, r25	; 0x10
    1e24:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		GPIO_WritePinValue(LCD_ControlPort,E,LOGIC_LOW);
    1e26:	80 91 49 01 	lds	r24, 0x0149
    1e2a:	62 e0       	ldi	r22, 0x02	; 2
    1e2c:	40 e0       	ldi	r20, 0x00	; 0
    1e2e:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	a0 e8       	ldi	r26, 0x80	; 128
    1e38:	bf e3       	ldi	r27, 0x3F	; 63
    1e3a:	8b 87       	std	Y+11, r24	; 0x0b
    1e3c:	9c 87       	std	Y+12, r25	; 0x0c
    1e3e:	ad 87       	std	Y+13, r26	; 0x0d
    1e40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	4a e7       	ldi	r20, 0x7A	; 122
    1e50:	53 e4       	ldi	r21, 0x43	; 67
    1e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	8f 83       	std	Y+7, r24	; 0x07
    1e5c:	98 87       	std	Y+8, r25	; 0x08
    1e5e:	a9 87       	std	Y+9, r26	; 0x09
    1e60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e62:	6f 81       	ldd	r22, Y+7	; 0x07
    1e64:	78 85       	ldd	r23, Y+8	; 0x08
    1e66:	89 85       	ldd	r24, Y+9	; 0x09
    1e68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	40 e8       	ldi	r20, 0x80	; 128
    1e70:	5f e3       	ldi	r21, 0x3F	; 63
    1e72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e76:	88 23       	and	r24, r24
    1e78:	2c f4       	brge	.+10     	; 0x1e84 <LCD_SendCommand+0x1fa>
		__ticks = 1;
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	9e 83       	std	Y+6, r25	; 0x06
    1e80:	8d 83       	std	Y+5, r24	; 0x05
    1e82:	3f c0       	rjmp	.+126    	; 0x1f02 <LCD_SendCommand+0x278>
	else if (__tmp > 65535)
    1e84:	6f 81       	ldd	r22, Y+7	; 0x07
    1e86:	78 85       	ldd	r23, Y+8	; 0x08
    1e88:	89 85       	ldd	r24, Y+9	; 0x09
    1e8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	3f ef       	ldi	r19, 0xFF	; 255
    1e90:	4f e7       	ldi	r20, 0x7F	; 127
    1e92:	57 e4       	ldi	r21, 0x47	; 71
    1e94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e98:	18 16       	cp	r1, r24
    1e9a:	4c f5       	brge	.+82     	; 0x1eee <LCD_SendCommand+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	40 e2       	ldi	r20, 0x20	; 32
    1eaa:	51 e4       	ldi	r21, 0x41	; 65
    1eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	bc 01       	movw	r22, r24
    1eb6:	cd 01       	movw	r24, r26
    1eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	9e 83       	std	Y+6, r25	; 0x06
    1ec2:	8d 83       	std	Y+5, r24	; 0x05
    1ec4:	0f c0       	rjmp	.+30     	; 0x1ee4 <LCD_SendCommand+0x25a>
    1ec6:	89 e1       	ldi	r24, 0x19	; 25
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	9c 83       	std	Y+4, r25	; 0x04
    1ecc:	8b 83       	std	Y+3, r24	; 0x03
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	f1 f7       	brne	.-4      	; 0x1ed2 <LCD_SendCommand+0x248>
    1ed6:	9c 83       	std	Y+4, r25	; 0x04
    1ed8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eda:	8d 81       	ldd	r24, Y+5	; 0x05
    1edc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	9e 83       	std	Y+6, r25	; 0x06
    1ee2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee8:	00 97       	sbiw	r24, 0x00	; 0
    1eea:	69 f7       	brne	.-38     	; 0x1ec6 <LCD_SendCommand+0x23c>
    1eec:	14 c0       	rjmp	.+40     	; 0x1f16 <LCD_SendCommand+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eee:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef0:	78 85       	ldd	r23, Y+8	; 0x08
    1ef2:	89 85       	ldd	r24, Y+9	; 0x09
    1ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	9e 83       	std	Y+6, r25	; 0x06
    1f00:	8d 83       	std	Y+5, r24	; 0x05
    1f02:	8d 81       	ldd	r24, Y+5	; 0x05
    1f04:	9e 81       	ldd	r25, Y+6	; 0x06
    1f06:	9a 83       	std	Y+2, r25	; 0x02
    1f08:	89 83       	std	Y+1, r24	; 0x01
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	f1 f7       	brne	.-4      	; 0x1f0e <LCD_SendCommand+0x284>
    1f12:	9a 83       	std	Y+2, r25	; 0x02
    1f14:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	}
	else{
		/* Nothing Happened */
	}
}
    1f16:	6d 96       	adiw	r28, 0x1d	; 29
    1f18:	0f b6       	in	r0, 0x3f	; 63
    1f1a:	f8 94       	cli
    1f1c:	de bf       	out	0x3e, r29	; 62
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	cd bf       	out	0x3d, r28	; 61
    1f22:	cf 91       	pop	r28
    1f24:	df 91       	pop	r29
    1f26:	08 95       	ret

00001f28 <LCD_SendData>:
 * Description: This function is used to Send Data to LCD .
 * Arguments:
	 * Data : Data Send .
 * Return Value: no return ( void ) .
 */
void LCD_SendData( uint8 Data ){
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
    1f30:	e9 97       	sbiw	r28, 0x39	; 57
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	cd bf       	out	0x3d, r28	; 61
    1f3c:	89 af       	std	Y+57, r24	; 0x39
	if( LCD_Bit_Mode == MODE_4_BIT || LCD_Bit_Mode == MODE_8_BIT ){
    1f3e:	80 91 4a 01 	lds	r24, 0x014A
    1f42:	88 23       	and	r24, r24
    1f44:	29 f0       	breq	.+10     	; 0x1f50 <LCD_SendData+0x28>
    1f46:	80 91 4a 01 	lds	r24, 0x014A
    1f4a:	81 30       	cpi	r24, 0x01	; 1
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <LCD_SendData+0x28>
    1f4e:	47 c2       	rjmp	.+1166   	; 0x23de <LCD_SendData+0x4b6>
		GPIO_WritePinValue(LCD_ControlPort,RS,DATA_CODE);
    1f50:	80 91 49 01 	lds	r24, 0x0149
    1f54:	60 e0       	ldi	r22, 0x00	; 0
    1f56:	41 e0       	ldi	r20, 0x01	; 1
    1f58:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
		GPIO_WritePinValue(LCD_ControlPort,RW,WRITE_DATA);
    1f5c:	80 91 49 01 	lds	r24, 0x0149
    1f60:	61 e0       	ldi	r22, 0x01	; 1
    1f62:	40 e0       	ldi	r20, 0x00	; 0
    1f64:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
		if( LCD_Bit_Mode == MODE_4_BIT ){
    1f68:	80 91 4a 01 	lds	r24, 0x014A
    1f6c:	88 23       	and	r24, r24
    1f6e:	09 f0       	breq	.+2      	; 0x1f72 <LCD_SendData+0x4a>
    1f70:	41 c1       	rjmp	.+642    	; 0x21f4 <LCD_SendData+0x2cc>
			GPIO_WritePinValue(LCD_DataPort,DB4,RED_BIT(Data,PIN4_ID));
    1f72:	90 91 48 01 	lds	r25, 0x0148
    1f76:	89 ad       	ldd	r24, Y+57	; 0x39
    1f78:	28 2f       	mov	r18, r24
    1f7a:	20 71       	andi	r18, 0x10	; 16
    1f7c:	89 2f       	mov	r24, r25
    1f7e:	64 e0       	ldi	r22, 0x04	; 4
    1f80:	42 2f       	mov	r20, r18
    1f82:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
			GPIO_WritePinValue(LCD_DataPort,DB5,RED_BIT(Data,PIN5_ID));
    1f86:	90 91 48 01 	lds	r25, 0x0148
    1f8a:	89 ad       	ldd	r24, Y+57	; 0x39
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	20 72       	andi	r18, 0x20	; 32
    1f90:	89 2f       	mov	r24, r25
    1f92:	65 e0       	ldi	r22, 0x05	; 5
    1f94:	42 2f       	mov	r20, r18
    1f96:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
			GPIO_WritePinValue(LCD_DataPort,DB6,RED_BIT(Data,PIN6_ID));
    1f9a:	90 91 48 01 	lds	r25, 0x0148
    1f9e:	89 ad       	ldd	r24, Y+57	; 0x39
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	20 74       	andi	r18, 0x40	; 64
    1fa4:	89 2f       	mov	r24, r25
    1fa6:	66 e0       	ldi	r22, 0x06	; 6
    1fa8:	42 2f       	mov	r20, r18
    1faa:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
			GPIO_WritePinValue(LCD_DataPort,DB7,RED_BIT(Data,PIN7_ID));
    1fae:	90 91 48 01 	lds	r25, 0x0148
    1fb2:	89 ad       	ldd	r24, Y+57	; 0x39
    1fb4:	28 2f       	mov	r18, r24
    1fb6:	20 78       	andi	r18, 0x80	; 128
    1fb8:	89 2f       	mov	r24, r25
    1fba:	67 e0       	ldi	r22, 0x07	; 7
    1fbc:	42 2f       	mov	r20, r18
    1fbe:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
			GPIO_WritePinValue(LCD_ControlPort,E,LOGIC_HIGH);
    1fc2:	80 91 49 01 	lds	r24, 0x0149
    1fc6:	62 e0       	ldi	r22, 0x02	; 2
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	a0 e8       	ldi	r26, 0x80	; 128
    1fd4:	bf e3       	ldi	r27, 0x3F	; 63
    1fd6:	8d ab       	std	Y+53, r24	; 0x35
    1fd8:	9e ab       	std	Y+54, r25	; 0x36
    1fda:	af ab       	std	Y+55, r26	; 0x37
    1fdc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fde:	6d a9       	ldd	r22, Y+53	; 0x35
    1fe0:	7e a9       	ldd	r23, Y+54	; 0x36
    1fe2:	8f a9       	ldd	r24, Y+55	; 0x37
    1fe4:	98 ad       	ldd	r25, Y+56	; 0x38
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	4a e7       	ldi	r20, 0x7A	; 122
    1fec:	53 e4       	ldi	r21, 0x43	; 67
    1fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	89 ab       	std	Y+49, r24	; 0x31
    1ff8:	9a ab       	std	Y+50, r25	; 0x32
    1ffa:	ab ab       	std	Y+51, r26	; 0x33
    1ffc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ffe:	69 a9       	ldd	r22, Y+49	; 0x31
    2000:	7a a9       	ldd	r23, Y+50	; 0x32
    2002:	8b a9       	ldd	r24, Y+51	; 0x33
    2004:	9c a9       	ldd	r25, Y+52	; 0x34
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e8       	ldi	r20, 0x80	; 128
    200c:	5f e3       	ldi	r21, 0x3F	; 63
    200e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2012:	88 23       	and	r24, r24
    2014:	2c f4       	brge	.+10     	; 0x2020 <LCD_SendData+0xf8>
		__ticks = 1;
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	98 ab       	std	Y+48, r25	; 0x30
    201c:	8f a7       	std	Y+47, r24	; 0x2f
    201e:	3f c0       	rjmp	.+126    	; 0x209e <LCD_SendData+0x176>
	else if (__tmp > 65535)
    2020:	69 a9       	ldd	r22, Y+49	; 0x31
    2022:	7a a9       	ldd	r23, Y+50	; 0x32
    2024:	8b a9       	ldd	r24, Y+51	; 0x33
    2026:	9c a9       	ldd	r25, Y+52	; 0x34
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	3f ef       	ldi	r19, 0xFF	; 255
    202c:	4f e7       	ldi	r20, 0x7F	; 127
    202e:	57 e4       	ldi	r21, 0x47	; 71
    2030:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2034:	18 16       	cp	r1, r24
    2036:	4c f5       	brge	.+82     	; 0x208a <LCD_SendData+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2038:	6d a9       	ldd	r22, Y+53	; 0x35
    203a:	7e a9       	ldd	r23, Y+54	; 0x36
    203c:	8f a9       	ldd	r24, Y+55	; 0x37
    203e:	98 ad       	ldd	r25, Y+56	; 0x38
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 e2       	ldi	r20, 0x20	; 32
    2046:	51 e4       	ldi	r21, 0x41	; 65
    2048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	bc 01       	movw	r22, r24
    2052:	cd 01       	movw	r24, r26
    2054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	98 ab       	std	Y+48, r25	; 0x30
    205e:	8f a7       	std	Y+47, r24	; 0x2f
    2060:	0f c0       	rjmp	.+30     	; 0x2080 <LCD_SendData+0x158>
    2062:	89 e1       	ldi	r24, 0x19	; 25
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	9e a7       	std	Y+46, r25	; 0x2e
    2068:	8d a7       	std	Y+45, r24	; 0x2d
    206a:	8d a5       	ldd	r24, Y+45	; 0x2d
    206c:	9e a5       	ldd	r25, Y+46	; 0x2e
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	f1 f7       	brne	.-4      	; 0x206e <LCD_SendData+0x146>
    2072:	9e a7       	std	Y+46, r25	; 0x2e
    2074:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2076:	8f a5       	ldd	r24, Y+47	; 0x2f
    2078:	98 a9       	ldd	r25, Y+48	; 0x30
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	98 ab       	std	Y+48, r25	; 0x30
    207e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2080:	8f a5       	ldd	r24, Y+47	; 0x2f
    2082:	98 a9       	ldd	r25, Y+48	; 0x30
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	69 f7       	brne	.-38     	; 0x2062 <LCD_SendData+0x13a>
    2088:	14 c0       	rjmp	.+40     	; 0x20b2 <LCD_SendData+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208a:	69 a9       	ldd	r22, Y+49	; 0x31
    208c:	7a a9       	ldd	r23, Y+50	; 0x32
    208e:	8b a9       	ldd	r24, Y+51	; 0x33
    2090:	9c a9       	ldd	r25, Y+52	; 0x34
    2092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	98 ab       	std	Y+48, r25	; 0x30
    209c:	8f a7       	std	Y+47, r24	; 0x2f
    209e:	8f a5       	ldd	r24, Y+47	; 0x2f
    20a0:	98 a9       	ldd	r25, Y+48	; 0x30
    20a2:	9c a7       	std	Y+44, r25	; 0x2c
    20a4:	8b a7       	std	Y+43, r24	; 0x2b
    20a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    20a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	f1 f7       	brne	.-4      	; 0x20aa <LCD_SendData+0x182>
    20ae:	9c a7       	std	Y+44, r25	; 0x2c
    20b0:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
			GPIO_WritePinValue(LCD_ControlPort,E,LOGIC_LOW);
    20b2:	80 91 49 01 	lds	r24, 0x0149
    20b6:	62 e0       	ldi	r22, 0x02	; 2
    20b8:	40 e0       	ldi	r20, 0x00	; 0
    20ba:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	a0 e8       	ldi	r26, 0x80	; 128
    20c4:	bf e3       	ldi	r27, 0x3F	; 63
    20c6:	8f a3       	std	Y+39, r24	; 0x27
    20c8:	98 a7       	std	Y+40, r25	; 0x28
    20ca:	a9 a7       	std	Y+41, r26	; 0x29
    20cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ce:	6f a1       	ldd	r22, Y+39	; 0x27
    20d0:	78 a5       	ldd	r23, Y+40	; 0x28
    20d2:	89 a5       	ldd	r24, Y+41	; 0x29
    20d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	4a e7       	ldi	r20, 0x7A	; 122
    20dc:	53 e4       	ldi	r21, 0x43	; 67
    20de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	8b a3       	std	Y+35, r24	; 0x23
    20e8:	9c a3       	std	Y+36, r25	; 0x24
    20ea:	ad a3       	std	Y+37, r26	; 0x25
    20ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20ee:	6b a1       	ldd	r22, Y+35	; 0x23
    20f0:	7c a1       	ldd	r23, Y+36	; 0x24
    20f2:	8d a1       	ldd	r24, Y+37	; 0x25
    20f4:	9e a1       	ldd	r25, Y+38	; 0x26
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e8       	ldi	r20, 0x80	; 128
    20fc:	5f e3       	ldi	r21, 0x3F	; 63
    20fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2102:	88 23       	and	r24, r24
    2104:	2c f4       	brge	.+10     	; 0x2110 <LCD_SendData+0x1e8>
		__ticks = 1;
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	9a a3       	std	Y+34, r25	; 0x22
    210c:	89 a3       	std	Y+33, r24	; 0x21
    210e:	3f c0       	rjmp	.+126    	; 0x218e <LCD_SendData+0x266>
	else if (__tmp > 65535)
    2110:	6b a1       	ldd	r22, Y+35	; 0x23
    2112:	7c a1       	ldd	r23, Y+36	; 0x24
    2114:	8d a1       	ldd	r24, Y+37	; 0x25
    2116:	9e a1       	ldd	r25, Y+38	; 0x26
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	3f ef       	ldi	r19, 0xFF	; 255
    211c:	4f e7       	ldi	r20, 0x7F	; 127
    211e:	57 e4       	ldi	r21, 0x47	; 71
    2120:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2124:	18 16       	cp	r1, r24
    2126:	4c f5       	brge	.+82     	; 0x217a <LCD_SendData+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2128:	6f a1       	ldd	r22, Y+39	; 0x27
    212a:	78 a5       	ldd	r23, Y+40	; 0x28
    212c:	89 a5       	ldd	r24, Y+41	; 0x29
    212e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e2       	ldi	r20, 0x20	; 32
    2136:	51 e4       	ldi	r21, 0x41	; 65
    2138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	bc 01       	movw	r22, r24
    2142:	cd 01       	movw	r24, r26
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9a a3       	std	Y+34, r25	; 0x22
    214e:	89 a3       	std	Y+33, r24	; 0x21
    2150:	0f c0       	rjmp	.+30     	; 0x2170 <LCD_SendData+0x248>
    2152:	89 e1       	ldi	r24, 0x19	; 25
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	98 a3       	std	Y+32, r25	; 0x20
    2158:	8f 8f       	std	Y+31, r24	; 0x1f
    215a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    215c:	98 a1       	ldd	r25, Y+32	; 0x20
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <LCD_SendData+0x236>
    2162:	98 a3       	std	Y+32, r25	; 0x20
    2164:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2166:	89 a1       	ldd	r24, Y+33	; 0x21
    2168:	9a a1       	ldd	r25, Y+34	; 0x22
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	9a a3       	std	Y+34, r25	; 0x22
    216e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2170:	89 a1       	ldd	r24, Y+33	; 0x21
    2172:	9a a1       	ldd	r25, Y+34	; 0x22
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	69 f7       	brne	.-38     	; 0x2152 <LCD_SendData+0x22a>
    2178:	14 c0       	rjmp	.+40     	; 0x21a2 <LCD_SendData+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217a:	6b a1       	ldd	r22, Y+35	; 0x23
    217c:	7c a1       	ldd	r23, Y+36	; 0x24
    217e:	8d a1       	ldd	r24, Y+37	; 0x25
    2180:	9e a1       	ldd	r25, Y+38	; 0x26
    2182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	9a a3       	std	Y+34, r25	; 0x22
    218c:	89 a3       	std	Y+33, r24	; 0x21
    218e:	89 a1       	ldd	r24, Y+33	; 0x21
    2190:	9a a1       	ldd	r25, Y+34	; 0x22
    2192:	9e 8f       	std	Y+30, r25	; 0x1e
    2194:	8d 8f       	std	Y+29, r24	; 0x1d
    2196:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2198:	9e 8d       	ldd	r25, Y+30	; 0x1e
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <LCD_SendData+0x272>
    219e:	9e 8f       	std	Y+30, r25	; 0x1e
    21a0:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);
			GPIO_WritePinValue(LCD_DataPort,DB4,RED_BIT(Data,PIN0_ID));
    21a2:	90 91 48 01 	lds	r25, 0x0148
    21a6:	89 ad       	ldd	r24, Y+57	; 0x39
    21a8:	28 2f       	mov	r18, r24
    21aa:	21 70       	andi	r18, 0x01	; 1
    21ac:	89 2f       	mov	r24, r25
    21ae:	64 e0       	ldi	r22, 0x04	; 4
    21b0:	42 2f       	mov	r20, r18
    21b2:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
			GPIO_WritePinValue(LCD_DataPort,DB5,RED_BIT(Data,PIN1_ID));
    21b6:	90 91 48 01 	lds	r25, 0x0148
    21ba:	89 ad       	ldd	r24, Y+57	; 0x39
    21bc:	28 2f       	mov	r18, r24
    21be:	22 70       	andi	r18, 0x02	; 2
    21c0:	89 2f       	mov	r24, r25
    21c2:	65 e0       	ldi	r22, 0x05	; 5
    21c4:	42 2f       	mov	r20, r18
    21c6:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
			GPIO_WritePinValue(LCD_DataPort,DB6,RED_BIT(Data,PIN2_ID));
    21ca:	90 91 48 01 	lds	r25, 0x0148
    21ce:	89 ad       	ldd	r24, Y+57	; 0x39
    21d0:	28 2f       	mov	r18, r24
    21d2:	24 70       	andi	r18, 0x04	; 4
    21d4:	89 2f       	mov	r24, r25
    21d6:	66 e0       	ldi	r22, 0x06	; 6
    21d8:	42 2f       	mov	r20, r18
    21da:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
			GPIO_WritePinValue(LCD_DataPort,DB7,RED_BIT(Data,PIN3_ID));
    21de:	90 91 48 01 	lds	r25, 0x0148
    21e2:	89 ad       	ldd	r24, Y+57	; 0x39
    21e4:	28 2f       	mov	r18, r24
    21e6:	28 70       	andi	r18, 0x08	; 8
    21e8:	89 2f       	mov	r24, r25
    21ea:	67 e0       	ldi	r22, 0x07	; 7
    21ec:	42 2f       	mov	r20, r18
    21ee:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
    21f2:	05 c0       	rjmp	.+10     	; 0x21fe <LCD_SendData+0x2d6>
		}
		else{
			GPIO_WritePortValue(LCD_DataPort,Data);
    21f4:	80 91 48 01 	lds	r24, 0x0148
    21f8:	69 ad       	ldd	r22, Y+57	; 0x39
    21fa:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_WritePortValue>
		}
		GPIO_WritePinValue(LCD_ControlPort,E,LOGIC_HIGH);
    21fe:	80 91 49 01 	lds	r24, 0x0149
    2202:	62 e0       	ldi	r22, 0x02	; 2
    2204:	41 e0       	ldi	r20, 0x01	; 1
    2206:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	a0 e8       	ldi	r26, 0x80	; 128
    2210:	bf e3       	ldi	r27, 0x3F	; 63
    2212:	89 8f       	std	Y+25, r24	; 0x19
    2214:	9a 8f       	std	Y+26, r25	; 0x1a
    2216:	ab 8f       	std	Y+27, r26	; 0x1b
    2218:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    221a:	69 8d       	ldd	r22, Y+25	; 0x19
    221c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    221e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2220:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	4a e7       	ldi	r20, 0x7A	; 122
    2228:	53 e4       	ldi	r21, 0x43	; 67
    222a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	8d 8b       	std	Y+21, r24	; 0x15
    2234:	9e 8b       	std	Y+22, r25	; 0x16
    2236:	af 8b       	std	Y+23, r26	; 0x17
    2238:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    223a:	6d 89       	ldd	r22, Y+21	; 0x15
    223c:	7e 89       	ldd	r23, Y+22	; 0x16
    223e:	8f 89       	ldd	r24, Y+23	; 0x17
    2240:	98 8d       	ldd	r25, Y+24	; 0x18
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e8       	ldi	r20, 0x80	; 128
    2248:	5f e3       	ldi	r21, 0x3F	; 63
    224a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    224e:	88 23       	and	r24, r24
    2250:	2c f4       	brge	.+10     	; 0x225c <LCD_SendData+0x334>
		__ticks = 1;
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	9c 8b       	std	Y+20, r25	; 0x14
    2258:	8b 8b       	std	Y+19, r24	; 0x13
    225a:	3f c0       	rjmp	.+126    	; 0x22da <LCD_SendData+0x3b2>
	else if (__tmp > 65535)
    225c:	6d 89       	ldd	r22, Y+21	; 0x15
    225e:	7e 89       	ldd	r23, Y+22	; 0x16
    2260:	8f 89       	ldd	r24, Y+23	; 0x17
    2262:	98 8d       	ldd	r25, Y+24	; 0x18
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	3f ef       	ldi	r19, 0xFF	; 255
    2268:	4f e7       	ldi	r20, 0x7F	; 127
    226a:	57 e4       	ldi	r21, 0x47	; 71
    226c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2270:	18 16       	cp	r1, r24
    2272:	4c f5       	brge	.+82     	; 0x22c6 <LCD_SendData+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2274:	69 8d       	ldd	r22, Y+25	; 0x19
    2276:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2278:	8b 8d       	ldd	r24, Y+27	; 0x1b
    227a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e2       	ldi	r20, 0x20	; 32
    2282:	51 e4       	ldi	r21, 0x41	; 65
    2284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	bc 01       	movw	r22, r24
    228e:	cd 01       	movw	r24, r26
    2290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	9c 8b       	std	Y+20, r25	; 0x14
    229a:	8b 8b       	std	Y+19, r24	; 0x13
    229c:	0f c0       	rjmp	.+30     	; 0x22bc <LCD_SendData+0x394>
    229e:	89 e1       	ldi	r24, 0x19	; 25
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9a 8b       	std	Y+18, r25	; 0x12
    22a4:	89 8b       	std	Y+17, r24	; 0x11
    22a6:	89 89       	ldd	r24, Y+17	; 0x11
    22a8:	9a 89       	ldd	r25, Y+18	; 0x12
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	f1 f7       	brne	.-4      	; 0x22aa <LCD_SendData+0x382>
    22ae:	9a 8b       	std	Y+18, r25	; 0x12
    22b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b2:	8b 89       	ldd	r24, Y+19	; 0x13
    22b4:	9c 89       	ldd	r25, Y+20	; 0x14
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	9c 8b       	std	Y+20, r25	; 0x14
    22ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22bc:	8b 89       	ldd	r24, Y+19	; 0x13
    22be:	9c 89       	ldd	r25, Y+20	; 0x14
    22c0:	00 97       	sbiw	r24, 0x00	; 0
    22c2:	69 f7       	brne	.-38     	; 0x229e <LCD_SendData+0x376>
    22c4:	14 c0       	rjmp	.+40     	; 0x22ee <LCD_SendData+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c6:	6d 89       	ldd	r22, Y+21	; 0x15
    22c8:	7e 89       	ldd	r23, Y+22	; 0x16
    22ca:	8f 89       	ldd	r24, Y+23	; 0x17
    22cc:	98 8d       	ldd	r25, Y+24	; 0x18
    22ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	9c 8b       	std	Y+20, r25	; 0x14
    22d8:	8b 8b       	std	Y+19, r24	; 0x13
    22da:	8b 89       	ldd	r24, Y+19	; 0x13
    22dc:	9c 89       	ldd	r25, Y+20	; 0x14
    22de:	98 8b       	std	Y+16, r25	; 0x10
    22e0:	8f 87       	std	Y+15, r24	; 0x0f
    22e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    22e4:	98 89       	ldd	r25, Y+16	; 0x10
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	f1 f7       	brne	.-4      	; 0x22e6 <LCD_SendData+0x3be>
    22ea:	98 8b       	std	Y+16, r25	; 0x10
    22ec:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		GPIO_WritePinValue(LCD_ControlPort,E,LOGIC_LOW);
    22ee:	80 91 49 01 	lds	r24, 0x0149
    22f2:	62 e0       	ldi	r22, 0x02	; 2
    22f4:	40 e0       	ldi	r20, 0x00	; 0
    22f6:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	a0 e8       	ldi	r26, 0x80	; 128
    2300:	bf e3       	ldi	r27, 0x3F	; 63
    2302:	8b 87       	std	Y+11, r24	; 0x0b
    2304:	9c 87       	std	Y+12, r25	; 0x0c
    2306:	ad 87       	std	Y+13, r26	; 0x0d
    2308:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230a:	6b 85       	ldd	r22, Y+11	; 0x0b
    230c:	7c 85       	ldd	r23, Y+12	; 0x0c
    230e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2310:	9e 85       	ldd	r25, Y+14	; 0x0e
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	4a e7       	ldi	r20, 0x7A	; 122
    2318:	53 e4       	ldi	r21, 0x43	; 67
    231a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	8f 83       	std	Y+7, r24	; 0x07
    2324:	98 87       	std	Y+8, r25	; 0x08
    2326:	a9 87       	std	Y+9, r26	; 0x09
    2328:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    232a:	6f 81       	ldd	r22, Y+7	; 0x07
    232c:	78 85       	ldd	r23, Y+8	; 0x08
    232e:	89 85       	ldd	r24, Y+9	; 0x09
    2330:	9a 85       	ldd	r25, Y+10	; 0x0a
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e8       	ldi	r20, 0x80	; 128
    2338:	5f e3       	ldi	r21, 0x3F	; 63
    233a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    233e:	88 23       	and	r24, r24
    2340:	2c f4       	brge	.+10     	; 0x234c <LCD_SendData+0x424>
		__ticks = 1;
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	9e 83       	std	Y+6, r25	; 0x06
    2348:	8d 83       	std	Y+5, r24	; 0x05
    234a:	3f c0       	rjmp	.+126    	; 0x23ca <LCD_SendData+0x4a2>
	else if (__tmp > 65535)
    234c:	6f 81       	ldd	r22, Y+7	; 0x07
    234e:	78 85       	ldd	r23, Y+8	; 0x08
    2350:	89 85       	ldd	r24, Y+9	; 0x09
    2352:	9a 85       	ldd	r25, Y+10	; 0x0a
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	3f ef       	ldi	r19, 0xFF	; 255
    2358:	4f e7       	ldi	r20, 0x7F	; 127
    235a:	57 e4       	ldi	r21, 0x47	; 71
    235c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2360:	18 16       	cp	r1, r24
    2362:	4c f5       	brge	.+82     	; 0x23b6 <LCD_SendData+0x48e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2364:	6b 85       	ldd	r22, Y+11	; 0x0b
    2366:	7c 85       	ldd	r23, Y+12	; 0x0c
    2368:	8d 85       	ldd	r24, Y+13	; 0x0d
    236a:	9e 85       	ldd	r25, Y+14	; 0x0e
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	40 e2       	ldi	r20, 0x20	; 32
    2372:	51 e4       	ldi	r21, 0x41	; 65
    2374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	bc 01       	movw	r22, r24
    237e:	cd 01       	movw	r24, r26
    2380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	9e 83       	std	Y+6, r25	; 0x06
    238a:	8d 83       	std	Y+5, r24	; 0x05
    238c:	0f c0       	rjmp	.+30     	; 0x23ac <LCD_SendData+0x484>
    238e:	89 e1       	ldi	r24, 0x19	; 25
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	9c 83       	std	Y+4, r25	; 0x04
    2394:	8b 83       	std	Y+3, r24	; 0x03
    2396:	8b 81       	ldd	r24, Y+3	; 0x03
    2398:	9c 81       	ldd	r25, Y+4	; 0x04
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <LCD_SendData+0x472>
    239e:	9c 83       	std	Y+4, r25	; 0x04
    23a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a2:	8d 81       	ldd	r24, Y+5	; 0x05
    23a4:	9e 81       	ldd	r25, Y+6	; 0x06
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	9e 83       	std	Y+6, r25	; 0x06
    23aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ac:	8d 81       	ldd	r24, Y+5	; 0x05
    23ae:	9e 81       	ldd	r25, Y+6	; 0x06
    23b0:	00 97       	sbiw	r24, 0x00	; 0
    23b2:	69 f7       	brne	.-38     	; 0x238e <LCD_SendData+0x466>
    23b4:	14 c0       	rjmp	.+40     	; 0x23de <LCD_SendData+0x4b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b6:	6f 81       	ldd	r22, Y+7	; 0x07
    23b8:	78 85       	ldd	r23, Y+8	; 0x08
    23ba:	89 85       	ldd	r24, Y+9	; 0x09
    23bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	9e 83       	std	Y+6, r25	; 0x06
    23c8:	8d 83       	std	Y+5, r24	; 0x05
    23ca:	8d 81       	ldd	r24, Y+5	; 0x05
    23cc:	9e 81       	ldd	r25, Y+6	; 0x06
    23ce:	9a 83       	std	Y+2, r25	; 0x02
    23d0:	89 83       	std	Y+1, r24	; 0x01
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
    23d4:	9a 81       	ldd	r25, Y+2	; 0x02
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	f1 f7       	brne	.-4      	; 0x23d6 <LCD_SendData+0x4ae>
    23da:	9a 83       	std	Y+2, r25	; 0x02
    23dc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	}
	else{
		/* Nothing Happened */
	}
}
    23de:	e9 96       	adiw	r28, 0x39	; 57
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	de bf       	out	0x3e, r29	; 62
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	cd bf       	out	0x3d, r28	; 61
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	08 95       	ret

000023f0 <LCD_LcdInit>:
	 * Data_Port : Data Port in MCU .
	 * Control_Port : Control Port in MCU .
	 * Bit_Mode : Mode of Connection .
 * Return Value: no return ( void ) .
 */
void LCD_LcdInit( uint8 Data_Port , uint8 Control_Port , uint8 Bit_Mode ){
    23f0:	0f 93       	push	r16
    23f2:	1f 93       	push	r17
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	c3 57       	subi	r28, 0x73	; 115
    23fe:	d0 40       	sbci	r29, 0x00	; 0
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	cd bf       	out	0x3d, r28	; 61
    240a:	fe 01       	movw	r30, r28
    240c:	ef 58       	subi	r30, 0x8F	; 143
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	80 83       	st	Z, r24
    2412:	fe 01       	movw	r30, r28
    2414:	ee 58       	subi	r30, 0x8E	; 142
    2416:	ff 4f       	sbci	r31, 0xFF	; 255
    2418:	60 83       	st	Z, r22
    241a:	fe 01       	movw	r30, r28
    241c:	ed 58       	subi	r30, 0x8D	; 141
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	40 83       	st	Z, r20
		LCD_DataPort = Data_Port ;
    2422:	fe 01       	movw	r30, r28
    2424:	ef 58       	subi	r30, 0x8F	; 143
    2426:	ff 4f       	sbci	r31, 0xFF	; 255
    2428:	80 81       	ld	r24, Z
    242a:	80 93 48 01 	sts	0x0148, r24
		LCD_ControlPort = Control_Port ;
    242e:	fe 01       	movw	r30, r28
    2430:	ee 58       	subi	r30, 0x8E	; 142
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	80 81       	ld	r24, Z
    2436:	80 93 49 01 	sts	0x0149, r24
		LCD_Bit_Mode = Bit_Mode ;
    243a:	fe 01       	movw	r30, r28
    243c:	ed 58       	subi	r30, 0x8D	; 141
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	80 81       	ld	r24, Z
    2442:	80 93 4a 01 	sts	0x014A, r24
	if( LCD_Bit_Mode == MODE_4_BIT || LCD_Bit_Mode == MODE_8_BIT ){
    2446:	80 91 4a 01 	lds	r24, 0x014A
    244a:	88 23       	and	r24, r24
    244c:	29 f0       	breq	.+10     	; 0x2458 <LCD_LcdInit+0x68>
    244e:	80 91 4a 01 	lds	r24, 0x014A
    2452:	81 30       	cpi	r24, 0x01	; 1
    2454:	09 f0       	breq	.+2      	; 0x2458 <LCD_LcdInit+0x68>
    2456:	aa c4       	rjmp	.+2388   	; 0x2dac <LCD_LcdInit+0x9bc>
		GPIO_SetPinDirction(LCD_ControlPort,RS,PIN_OUTPUT);
    2458:	80 91 49 01 	lds	r24, 0x0149
    245c:	60 e0       	ldi	r22, 0x00	; 0
    245e:	41 e0       	ldi	r20, 0x01	; 1
    2460:	0e 94 d5 07 	call	0xfaa	; 0xfaa <GPIO_SetPinDirction>
		GPIO_SetPinDirction(LCD_ControlPort,RW,PIN_OUTPUT);
    2464:	80 91 49 01 	lds	r24, 0x0149
    2468:	61 e0       	ldi	r22, 0x01	; 1
    246a:	41 e0       	ldi	r20, 0x01	; 1
    246c:	0e 94 d5 07 	call	0xfaa	; 0xfaa <GPIO_SetPinDirction>
		GPIO_SetPinDirction(LCD_ControlPort,E,PIN_OUTPUT);
    2470:	80 91 49 01 	lds	r24, 0x0149
    2474:	62 e0       	ldi	r22, 0x02	; 2
    2476:	41 e0       	ldi	r20, 0x01	; 1
    2478:	0e 94 d5 07 	call	0xfaa	; 0xfaa <GPIO_SetPinDirction>
		GPIO_SetPortDirction(LCD_DataPort,PORT_OUTPUT);
    247c:	80 91 48 01 	lds	r24, 0x0148
    2480:	6f ef       	ldi	r22, 0xFF	; 255
    2482:	0e 94 aa 0a 	call	0x1554	; 0x1554 <GPIO_SetPortDirction>
		if( LCD_Bit_Mode == MODE_4_BIT ){
    2486:	80 91 4a 01 	lds	r24, 0x014A
    248a:	88 23       	and	r24, r24
    248c:	09 f0       	breq	.+2      	; 0x2490 <LCD_LcdInit+0xa0>
    248e:	ba c2       	rjmp	.+1396   	; 0x2a04 <LCD_LcdInit+0x614>
    2490:	fe 01       	movw	r30, r28
    2492:	e3 59       	subi	r30, 0x93	; 147
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	a8 e4       	ldi	r26, 0x48	; 72
    249c:	b2 e4       	ldi	r27, 0x42	; 66
    249e:	80 83       	st	Z, r24
    24a0:	91 83       	std	Z+1, r25	; 0x01
    24a2:	a2 83       	std	Z+2, r26	; 0x02
    24a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a6:	8e 01       	movw	r16, r28
    24a8:	07 59       	subi	r16, 0x97	; 151
    24aa:	1f 4f       	sbci	r17, 0xFF	; 255
    24ac:	fe 01       	movw	r30, r28
    24ae:	e3 59       	subi	r30, 0x93	; 147
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	60 81       	ld	r22, Z
    24b4:	71 81       	ldd	r23, Z+1	; 0x01
    24b6:	82 81       	ldd	r24, Z+2	; 0x02
    24b8:	93 81       	ldd	r25, Z+3	; 0x03
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	4a e7       	ldi	r20, 0x7A	; 122
    24c0:	53 e4       	ldi	r21, 0x43	; 67
    24c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	f8 01       	movw	r30, r16
    24cc:	80 83       	st	Z, r24
    24ce:	91 83       	std	Z+1, r25	; 0x01
    24d0:	a2 83       	std	Z+2, r26	; 0x02
    24d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24d4:	fe 01       	movw	r30, r28
    24d6:	e7 59       	subi	r30, 0x97	; 151
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	60 81       	ld	r22, Z
    24dc:	71 81       	ldd	r23, Z+1	; 0x01
    24de:	82 81       	ldd	r24, Z+2	; 0x02
    24e0:	93 81       	ldd	r25, Z+3	; 0x03
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e8       	ldi	r20, 0x80	; 128
    24e8:	5f e3       	ldi	r21, 0x3F	; 63
    24ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ee:	88 23       	and	r24, r24
    24f0:	44 f4       	brge	.+16     	; 0x2502 <LCD_LcdInit+0x112>
		__ticks = 1;
    24f2:	fe 01       	movw	r30, r28
    24f4:	e9 59       	subi	r30, 0x99	; 153
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	80 83       	st	Z, r24
    2500:	64 c0       	rjmp	.+200    	; 0x25ca <LCD_LcdInit+0x1da>
	else if (__tmp > 65535)
    2502:	fe 01       	movw	r30, r28
    2504:	e7 59       	subi	r30, 0x97	; 151
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	60 81       	ld	r22, Z
    250a:	71 81       	ldd	r23, Z+1	; 0x01
    250c:	82 81       	ldd	r24, Z+2	; 0x02
    250e:	93 81       	ldd	r25, Z+3	; 0x03
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	3f ef       	ldi	r19, 0xFF	; 255
    2514:	4f e7       	ldi	r20, 0x7F	; 127
    2516:	57 e4       	ldi	r21, 0x47	; 71
    2518:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    251c:	18 16       	cp	r1, r24
    251e:	0c f0       	brlt	.+2      	; 0x2522 <LCD_LcdInit+0x132>
    2520:	43 c0       	rjmp	.+134    	; 0x25a8 <LCD_LcdInit+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2522:	fe 01       	movw	r30, r28
    2524:	e3 59       	subi	r30, 0x93	; 147
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	60 81       	ld	r22, Z
    252a:	71 81       	ldd	r23, Z+1	; 0x01
    252c:	82 81       	ldd	r24, Z+2	; 0x02
    252e:	93 81       	ldd	r25, Z+3	; 0x03
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e2       	ldi	r20, 0x20	; 32
    2536:	51 e4       	ldi	r21, 0x41	; 65
    2538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	8e 01       	movw	r16, r28
    2542:	09 59       	subi	r16, 0x99	; 153
    2544:	1f 4f       	sbci	r17, 0xFF	; 255
    2546:	bc 01       	movw	r22, r24
    2548:	cd 01       	movw	r24, r26
    254a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	f8 01       	movw	r30, r16
    2554:	91 83       	std	Z+1, r25	; 0x01
    2556:	80 83       	st	Z, r24
    2558:	1f c0       	rjmp	.+62     	; 0x2598 <LCD_LcdInit+0x1a8>
    255a:	fe 01       	movw	r30, r28
    255c:	eb 59       	subi	r30, 0x9B	; 155
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	89 e1       	ldi	r24, 0x19	; 25
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	91 83       	std	Z+1, r25	; 0x01
    2566:	80 83       	st	Z, r24
    2568:	fe 01       	movw	r30, r28
    256a:	eb 59       	subi	r30, 0x9B	; 155
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	80 81       	ld	r24, Z
    2570:	91 81       	ldd	r25, Z+1	; 0x01
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	f1 f7       	brne	.-4      	; 0x2572 <LCD_LcdInit+0x182>
    2576:	fe 01       	movw	r30, r28
    2578:	eb 59       	subi	r30, 0x9B	; 155
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	91 83       	std	Z+1, r25	; 0x01
    257e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2580:	de 01       	movw	r26, r28
    2582:	a9 59       	subi	r26, 0x99	; 153
    2584:	bf 4f       	sbci	r27, 0xFF	; 255
    2586:	fe 01       	movw	r30, r28
    2588:	e9 59       	subi	r30, 0x99	; 153
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	80 81       	ld	r24, Z
    258e:	91 81       	ldd	r25, Z+1	; 0x01
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	11 96       	adiw	r26, 0x01	; 1
    2594:	9c 93       	st	X, r25
    2596:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2598:	fe 01       	movw	r30, r28
    259a:	e9 59       	subi	r30, 0x99	; 153
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	80 81       	ld	r24, Z
    25a0:	91 81       	ldd	r25, Z+1	; 0x01
    25a2:	00 97       	sbiw	r24, 0x00	; 0
    25a4:	d1 f6       	brne	.-76     	; 0x255a <LCD_LcdInit+0x16a>
    25a6:	27 c0       	rjmp	.+78     	; 0x25f6 <LCD_LcdInit+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a8:	8e 01       	movw	r16, r28
    25aa:	09 59       	subi	r16, 0x99	; 153
    25ac:	1f 4f       	sbci	r17, 0xFF	; 255
    25ae:	fe 01       	movw	r30, r28
    25b0:	e7 59       	subi	r30, 0x97	; 151
    25b2:	ff 4f       	sbci	r31, 0xFF	; 255
    25b4:	60 81       	ld	r22, Z
    25b6:	71 81       	ldd	r23, Z+1	; 0x01
    25b8:	82 81       	ldd	r24, Z+2	; 0x02
    25ba:	93 81       	ldd	r25, Z+3	; 0x03
    25bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	f8 01       	movw	r30, r16
    25c6:	91 83       	std	Z+1, r25	; 0x01
    25c8:	80 83       	st	Z, r24
    25ca:	de 01       	movw	r26, r28
    25cc:	ad 59       	subi	r26, 0x9D	; 157
    25ce:	bf 4f       	sbci	r27, 0xFF	; 255
    25d0:	fe 01       	movw	r30, r28
    25d2:	e9 59       	subi	r30, 0x99	; 153
    25d4:	ff 4f       	sbci	r31, 0xFF	; 255
    25d6:	80 81       	ld	r24, Z
    25d8:	91 81       	ldd	r25, Z+1	; 0x01
    25da:	8d 93       	st	X+, r24
    25dc:	9c 93       	st	X, r25
    25de:	fe 01       	movw	r30, r28
    25e0:	ed 59       	subi	r30, 0x9D	; 157
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	80 81       	ld	r24, Z
    25e6:	91 81       	ldd	r25, Z+1	; 0x01
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	f1 f7       	brne	.-4      	; 0x25e8 <LCD_LcdInit+0x1f8>
    25ec:	fe 01       	movw	r30, r28
    25ee:	ed 59       	subi	r30, 0x9D	; 157
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	91 83       	std	Z+1, r25	; 0x01
    25f4:	80 83       	st	Z, r24
			_delay_ms(50);
			/* Function Set */
			LCD_SendCommand(MODE_4_BIT_FUNCTION_SET_PART_1);
    25f6:	80 e2       	ldi	r24, 0x20	; 32
    25f8:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_SendCommand>
			LCD_SendCommand(MODE_4_BIT_FUNCTION_SET_PART_1);
    25fc:	80 e2       	ldi	r24, 0x20	; 32
    25fe:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_SendCommand>
			LCD_SendCommand(MODE_4_BIT_FUNCTION_SET_PART_2);
    2602:	80 e8       	ldi	r24, 0x80	; 128
    2604:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_SendCommand>
    2608:	fe 01       	movw	r30, r28
    260a:	e1 5a       	subi	r30, 0xA1	; 161
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	a8 e4       	ldi	r26, 0x48	; 72
    2614:	b2 e4       	ldi	r27, 0x42	; 66
    2616:	80 83       	st	Z, r24
    2618:	91 83       	std	Z+1, r25	; 0x01
    261a:	a2 83       	std	Z+2, r26	; 0x02
    261c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261e:	8e 01       	movw	r16, r28
    2620:	05 5a       	subi	r16, 0xA5	; 165
    2622:	1f 4f       	sbci	r17, 0xFF	; 255
    2624:	fe 01       	movw	r30, r28
    2626:	e1 5a       	subi	r30, 0xA1	; 161
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	60 81       	ld	r22, Z
    262c:	71 81       	ldd	r23, Z+1	; 0x01
    262e:	82 81       	ldd	r24, Z+2	; 0x02
    2630:	93 81       	ldd	r25, Z+3	; 0x03
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	4a e7       	ldi	r20, 0x7A	; 122
    2638:	53 e4       	ldi	r21, 0x43	; 67
    263a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	f8 01       	movw	r30, r16
    2644:	80 83       	st	Z, r24
    2646:	91 83       	std	Z+1, r25	; 0x01
    2648:	a2 83       	std	Z+2, r26	; 0x02
    264a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    264c:	fe 01       	movw	r30, r28
    264e:	e5 5a       	subi	r30, 0xA5	; 165
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	60 81       	ld	r22, Z
    2654:	71 81       	ldd	r23, Z+1	; 0x01
    2656:	82 81       	ldd	r24, Z+2	; 0x02
    2658:	93 81       	ldd	r25, Z+3	; 0x03
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	40 e8       	ldi	r20, 0x80	; 128
    2660:	5f e3       	ldi	r21, 0x3F	; 63
    2662:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2666:	88 23       	and	r24, r24
    2668:	44 f4       	brge	.+16     	; 0x267a <LCD_LcdInit+0x28a>
		__ticks = 1;
    266a:	fe 01       	movw	r30, r28
    266c:	e7 5a       	subi	r30, 0xA7	; 167
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	91 83       	std	Z+1, r25	; 0x01
    2676:	80 83       	st	Z, r24
    2678:	64 c0       	rjmp	.+200    	; 0x2742 <LCD_LcdInit+0x352>
	else if (__tmp > 65535)
    267a:	fe 01       	movw	r30, r28
    267c:	e5 5a       	subi	r30, 0xA5	; 165
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	60 81       	ld	r22, Z
    2682:	71 81       	ldd	r23, Z+1	; 0x01
    2684:	82 81       	ldd	r24, Z+2	; 0x02
    2686:	93 81       	ldd	r25, Z+3	; 0x03
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	3f ef       	ldi	r19, 0xFF	; 255
    268c:	4f e7       	ldi	r20, 0x7F	; 127
    268e:	57 e4       	ldi	r21, 0x47	; 71
    2690:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2694:	18 16       	cp	r1, r24
    2696:	0c f0       	brlt	.+2      	; 0x269a <LCD_LcdInit+0x2aa>
    2698:	43 c0       	rjmp	.+134    	; 0x2720 <LCD_LcdInit+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    269a:	fe 01       	movw	r30, r28
    269c:	e1 5a       	subi	r30, 0xA1	; 161
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	60 81       	ld	r22, Z
    26a2:	71 81       	ldd	r23, Z+1	; 0x01
    26a4:	82 81       	ldd	r24, Z+2	; 0x02
    26a6:	93 81       	ldd	r25, Z+3	; 0x03
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	40 e2       	ldi	r20, 0x20	; 32
    26ae:	51 e4       	ldi	r21, 0x41	; 65
    26b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	8e 01       	movw	r16, r28
    26ba:	07 5a       	subi	r16, 0xA7	; 167
    26bc:	1f 4f       	sbci	r17, 0xFF	; 255
    26be:	bc 01       	movw	r22, r24
    26c0:	cd 01       	movw	r24, r26
    26c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	f8 01       	movw	r30, r16
    26cc:	91 83       	std	Z+1, r25	; 0x01
    26ce:	80 83       	st	Z, r24
    26d0:	1f c0       	rjmp	.+62     	; 0x2710 <LCD_LcdInit+0x320>
    26d2:	fe 01       	movw	r30, r28
    26d4:	e9 5a       	subi	r30, 0xA9	; 169
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	89 e1       	ldi	r24, 0x19	; 25
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	91 83       	std	Z+1, r25	; 0x01
    26de:	80 83       	st	Z, r24
    26e0:	fe 01       	movw	r30, r28
    26e2:	e9 5a       	subi	r30, 0xA9	; 169
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	80 81       	ld	r24, Z
    26e8:	91 81       	ldd	r25, Z+1	; 0x01
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	f1 f7       	brne	.-4      	; 0x26ea <LCD_LcdInit+0x2fa>
    26ee:	fe 01       	movw	r30, r28
    26f0:	e9 5a       	subi	r30, 0xA9	; 169
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	91 83       	std	Z+1, r25	; 0x01
    26f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f8:	de 01       	movw	r26, r28
    26fa:	a7 5a       	subi	r26, 0xA7	; 167
    26fc:	bf 4f       	sbci	r27, 0xFF	; 255
    26fe:	fe 01       	movw	r30, r28
    2700:	e7 5a       	subi	r30, 0xA7	; 167
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 81       	ld	r24, Z
    2706:	91 81       	ldd	r25, Z+1	; 0x01
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	11 96       	adiw	r26, 0x01	; 1
    270c:	9c 93       	st	X, r25
    270e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2710:	fe 01       	movw	r30, r28
    2712:	e7 5a       	subi	r30, 0xA7	; 167
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	80 81       	ld	r24, Z
    2718:	91 81       	ldd	r25, Z+1	; 0x01
    271a:	00 97       	sbiw	r24, 0x00	; 0
    271c:	d1 f6       	brne	.-76     	; 0x26d2 <LCD_LcdInit+0x2e2>
    271e:	27 c0       	rjmp	.+78     	; 0x276e <LCD_LcdInit+0x37e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2720:	8e 01       	movw	r16, r28
    2722:	07 5a       	subi	r16, 0xA7	; 167
    2724:	1f 4f       	sbci	r17, 0xFF	; 255
    2726:	fe 01       	movw	r30, r28
    2728:	e5 5a       	subi	r30, 0xA5	; 165
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	60 81       	ld	r22, Z
    272e:	71 81       	ldd	r23, Z+1	; 0x01
    2730:	82 81       	ldd	r24, Z+2	; 0x02
    2732:	93 81       	ldd	r25, Z+3	; 0x03
    2734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	f8 01       	movw	r30, r16
    273e:	91 83       	std	Z+1, r25	; 0x01
    2740:	80 83       	st	Z, r24
    2742:	de 01       	movw	r26, r28
    2744:	ab 5a       	subi	r26, 0xAB	; 171
    2746:	bf 4f       	sbci	r27, 0xFF	; 255
    2748:	fe 01       	movw	r30, r28
    274a:	e7 5a       	subi	r30, 0xA7	; 167
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	80 81       	ld	r24, Z
    2750:	91 81       	ldd	r25, Z+1	; 0x01
    2752:	8d 93       	st	X+, r24
    2754:	9c 93       	st	X, r25
    2756:	fe 01       	movw	r30, r28
    2758:	eb 5a       	subi	r30, 0xAB	; 171
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	80 81       	ld	r24, Z
    275e:	91 81       	ldd	r25, Z+1	; 0x01
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	f1 f7       	brne	.-4      	; 0x2760 <LCD_LcdInit+0x370>
    2764:	fe 01       	movw	r30, r28
    2766:	eb 5a       	subi	r30, 0xAB	; 171
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	91 83       	std	Z+1, r25	; 0x01
    276c:	80 83       	st	Z, r24
			_delay_ms(50);
			/* Display ON/OFF */
			LCD_SendCommand(MODE_4_BIT_DISPLAY_PART_1);
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_SendCommand>
			LCD_SendCommand(MODE_4_BIT_DISPLAY_PART_2);
    2774:	80 ef       	ldi	r24, 0xF0	; 240
    2776:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_SendCommand>
    277a:	fe 01       	movw	r30, r28
    277c:	ef 5a       	subi	r30, 0xAF	; 175
    277e:	ff 4f       	sbci	r31, 0xFF	; 255
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	a8 e4       	ldi	r26, 0x48	; 72
    2786:	b2 e4       	ldi	r27, 0x42	; 66
    2788:	80 83       	st	Z, r24
    278a:	91 83       	std	Z+1, r25	; 0x01
    278c:	a2 83       	std	Z+2, r26	; 0x02
    278e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2790:	8e 01       	movw	r16, r28
    2792:	03 5b       	subi	r16, 0xB3	; 179
    2794:	1f 4f       	sbci	r17, 0xFF	; 255
    2796:	fe 01       	movw	r30, r28
    2798:	ef 5a       	subi	r30, 0xAF	; 175
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	60 81       	ld	r22, Z
    279e:	71 81       	ldd	r23, Z+1	; 0x01
    27a0:	82 81       	ldd	r24, Z+2	; 0x02
    27a2:	93 81       	ldd	r25, Z+3	; 0x03
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	4a e7       	ldi	r20, 0x7A	; 122
    27aa:	53 e4       	ldi	r21, 0x43	; 67
    27ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	f8 01       	movw	r30, r16
    27b6:	80 83       	st	Z, r24
    27b8:	91 83       	std	Z+1, r25	; 0x01
    27ba:	a2 83       	std	Z+2, r26	; 0x02
    27bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27be:	fe 01       	movw	r30, r28
    27c0:	e3 5b       	subi	r30, 0xB3	; 179
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	60 81       	ld	r22, Z
    27c6:	71 81       	ldd	r23, Z+1	; 0x01
    27c8:	82 81       	ldd	r24, Z+2	; 0x02
    27ca:	93 81       	ldd	r25, Z+3	; 0x03
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	40 e8       	ldi	r20, 0x80	; 128
    27d2:	5f e3       	ldi	r21, 0x3F	; 63
    27d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27d8:	88 23       	and	r24, r24
    27da:	44 f4       	brge	.+16     	; 0x27ec <LCD_LcdInit+0x3fc>
		__ticks = 1;
    27dc:	fe 01       	movw	r30, r28
    27de:	e5 5b       	subi	r30, 0xB5	; 181
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	91 83       	std	Z+1, r25	; 0x01
    27e8:	80 83       	st	Z, r24
    27ea:	64 c0       	rjmp	.+200    	; 0x28b4 <LCD_LcdInit+0x4c4>
	else if (__tmp > 65535)
    27ec:	fe 01       	movw	r30, r28
    27ee:	e3 5b       	subi	r30, 0xB3	; 179
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	60 81       	ld	r22, Z
    27f4:	71 81       	ldd	r23, Z+1	; 0x01
    27f6:	82 81       	ldd	r24, Z+2	; 0x02
    27f8:	93 81       	ldd	r25, Z+3	; 0x03
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	3f ef       	ldi	r19, 0xFF	; 255
    27fe:	4f e7       	ldi	r20, 0x7F	; 127
    2800:	57 e4       	ldi	r21, 0x47	; 71
    2802:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2806:	18 16       	cp	r1, r24
    2808:	0c f0       	brlt	.+2      	; 0x280c <LCD_LcdInit+0x41c>
    280a:	43 c0       	rjmp	.+134    	; 0x2892 <LCD_LcdInit+0x4a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    280c:	fe 01       	movw	r30, r28
    280e:	ef 5a       	subi	r30, 0xAF	; 175
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	60 81       	ld	r22, Z
    2814:	71 81       	ldd	r23, Z+1	; 0x01
    2816:	82 81       	ldd	r24, Z+2	; 0x02
    2818:	93 81       	ldd	r25, Z+3	; 0x03
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e2       	ldi	r20, 0x20	; 32
    2820:	51 e4       	ldi	r21, 0x41	; 65
    2822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	8e 01       	movw	r16, r28
    282c:	05 5b       	subi	r16, 0xB5	; 181
    282e:	1f 4f       	sbci	r17, 0xFF	; 255
    2830:	bc 01       	movw	r22, r24
    2832:	cd 01       	movw	r24, r26
    2834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	f8 01       	movw	r30, r16
    283e:	91 83       	std	Z+1, r25	; 0x01
    2840:	80 83       	st	Z, r24
    2842:	1f c0       	rjmp	.+62     	; 0x2882 <LCD_LcdInit+0x492>
    2844:	fe 01       	movw	r30, r28
    2846:	e7 5b       	subi	r30, 0xB7	; 183
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	89 e1       	ldi	r24, 0x19	; 25
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	91 83       	std	Z+1, r25	; 0x01
    2850:	80 83       	st	Z, r24
    2852:	fe 01       	movw	r30, r28
    2854:	e7 5b       	subi	r30, 0xB7	; 183
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	80 81       	ld	r24, Z
    285a:	91 81       	ldd	r25, Z+1	; 0x01
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	f1 f7       	brne	.-4      	; 0x285c <LCD_LcdInit+0x46c>
    2860:	fe 01       	movw	r30, r28
    2862:	e7 5b       	subi	r30, 0xB7	; 183
    2864:	ff 4f       	sbci	r31, 0xFF	; 255
    2866:	91 83       	std	Z+1, r25	; 0x01
    2868:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286a:	de 01       	movw	r26, r28
    286c:	a5 5b       	subi	r26, 0xB5	; 181
    286e:	bf 4f       	sbci	r27, 0xFF	; 255
    2870:	fe 01       	movw	r30, r28
    2872:	e5 5b       	subi	r30, 0xB5	; 181
    2874:	ff 4f       	sbci	r31, 0xFF	; 255
    2876:	80 81       	ld	r24, Z
    2878:	91 81       	ldd	r25, Z+1	; 0x01
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	11 96       	adiw	r26, 0x01	; 1
    287e:	9c 93       	st	X, r25
    2880:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2882:	fe 01       	movw	r30, r28
    2884:	e5 5b       	subi	r30, 0xB5	; 181
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	80 81       	ld	r24, Z
    288a:	91 81       	ldd	r25, Z+1	; 0x01
    288c:	00 97       	sbiw	r24, 0x00	; 0
    288e:	d1 f6       	brne	.-76     	; 0x2844 <LCD_LcdInit+0x454>
    2890:	27 c0       	rjmp	.+78     	; 0x28e0 <LCD_LcdInit+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2892:	8e 01       	movw	r16, r28
    2894:	05 5b       	subi	r16, 0xB5	; 181
    2896:	1f 4f       	sbci	r17, 0xFF	; 255
    2898:	fe 01       	movw	r30, r28
    289a:	e3 5b       	subi	r30, 0xB3	; 179
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	60 81       	ld	r22, Z
    28a0:	71 81       	ldd	r23, Z+1	; 0x01
    28a2:	82 81       	ldd	r24, Z+2	; 0x02
    28a4:	93 81       	ldd	r25, Z+3	; 0x03
    28a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	f8 01       	movw	r30, r16
    28b0:	91 83       	std	Z+1, r25	; 0x01
    28b2:	80 83       	st	Z, r24
    28b4:	de 01       	movw	r26, r28
    28b6:	a9 5b       	subi	r26, 0xB9	; 185
    28b8:	bf 4f       	sbci	r27, 0xFF	; 255
    28ba:	fe 01       	movw	r30, r28
    28bc:	e5 5b       	subi	r30, 0xB5	; 181
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	80 81       	ld	r24, Z
    28c2:	91 81       	ldd	r25, Z+1	; 0x01
    28c4:	8d 93       	st	X+, r24
    28c6:	9c 93       	st	X, r25
    28c8:	fe 01       	movw	r30, r28
    28ca:	e9 5b       	subi	r30, 0xB9	; 185
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	80 81       	ld	r24, Z
    28d0:	91 81       	ldd	r25, Z+1	; 0x01
    28d2:	01 97       	sbiw	r24, 0x01	; 1
    28d4:	f1 f7       	brne	.-4      	; 0x28d2 <LCD_LcdInit+0x4e2>
    28d6:	fe 01       	movw	r30, r28
    28d8:	e9 5b       	subi	r30, 0xB9	; 185
    28da:	ff 4f       	sbci	r31, 0xFF	; 255
    28dc:	91 83       	std	Z+1, r25	; 0x01
    28de:	80 83       	st	Z, r24
			_delay_ms(50);
			/* Display Clear */
			LCD_SendCommand(MODE_4_BIT_CLEAR_PART_1);
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_SendCommand>
			LCD_SendCommand(MODE_4_BIT_CLEAR_PART_2);
    28e6:	80 e1       	ldi	r24, 0x10	; 16
    28e8:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_SendCommand>
    28ec:	fe 01       	movw	r30, r28
    28ee:	ed 5b       	subi	r30, 0xBD	; 189
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	a0 e0       	ldi	r26, 0x00	; 0
    28f8:	b0 e4       	ldi	r27, 0x40	; 64
    28fa:	80 83       	st	Z, r24
    28fc:	91 83       	std	Z+1, r25	; 0x01
    28fe:	a2 83       	std	Z+2, r26	; 0x02
    2900:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2902:	8e 01       	movw	r16, r28
    2904:	01 5c       	subi	r16, 0xC1	; 193
    2906:	1f 4f       	sbci	r17, 0xFF	; 255
    2908:	fe 01       	movw	r30, r28
    290a:	ed 5b       	subi	r30, 0xBD	; 189
    290c:	ff 4f       	sbci	r31, 0xFF	; 255
    290e:	60 81       	ld	r22, Z
    2910:	71 81       	ldd	r23, Z+1	; 0x01
    2912:	82 81       	ldd	r24, Z+2	; 0x02
    2914:	93 81       	ldd	r25, Z+3	; 0x03
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	4a e7       	ldi	r20, 0x7A	; 122
    291c:	53 e4       	ldi	r21, 0x43	; 67
    291e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	f8 01       	movw	r30, r16
    2928:	80 83       	st	Z, r24
    292a:	91 83       	std	Z+1, r25	; 0x01
    292c:	a2 83       	std	Z+2, r26	; 0x02
    292e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2930:	fe 01       	movw	r30, r28
    2932:	ff 96       	adiw	r30, 0x3f	; 63
    2934:	60 81       	ld	r22, Z
    2936:	71 81       	ldd	r23, Z+1	; 0x01
    2938:	82 81       	ldd	r24, Z+2	; 0x02
    293a:	93 81       	ldd	r25, Z+3	; 0x03
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	40 e8       	ldi	r20, 0x80	; 128
    2942:	5f e3       	ldi	r21, 0x3F	; 63
    2944:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2948:	88 23       	and	r24, r24
    294a:	2c f4       	brge	.+10     	; 0x2956 <LCD_LcdInit+0x566>
		__ticks = 1;
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	9e af       	std	Y+62, r25	; 0x3e
    2952:	8d af       	std	Y+61, r24	; 0x3d
    2954:	46 c0       	rjmp	.+140    	; 0x29e2 <LCD_LcdInit+0x5f2>
	else if (__tmp > 65535)
    2956:	fe 01       	movw	r30, r28
    2958:	ff 96       	adiw	r30, 0x3f	; 63
    295a:	60 81       	ld	r22, Z
    295c:	71 81       	ldd	r23, Z+1	; 0x01
    295e:	82 81       	ldd	r24, Z+2	; 0x02
    2960:	93 81       	ldd	r25, Z+3	; 0x03
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	3f ef       	ldi	r19, 0xFF	; 255
    2966:	4f e7       	ldi	r20, 0x7F	; 127
    2968:	57 e4       	ldi	r21, 0x47	; 71
    296a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    296e:	18 16       	cp	r1, r24
    2970:	64 f5       	brge	.+88     	; 0x29ca <LCD_LcdInit+0x5da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2972:	fe 01       	movw	r30, r28
    2974:	ed 5b       	subi	r30, 0xBD	; 189
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	60 81       	ld	r22, Z
    297a:	71 81       	ldd	r23, Z+1	; 0x01
    297c:	82 81       	ldd	r24, Z+2	; 0x02
    297e:	93 81       	ldd	r25, Z+3	; 0x03
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 e2       	ldi	r20, 0x20	; 32
    2986:	51 e4       	ldi	r21, 0x41	; 65
    2988:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	bc 01       	movw	r22, r24
    2992:	cd 01       	movw	r24, r26
    2994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	9e af       	std	Y+62, r25	; 0x3e
    299e:	8d af       	std	Y+61, r24	; 0x3d
    29a0:	0f c0       	rjmp	.+30     	; 0x29c0 <LCD_LcdInit+0x5d0>
    29a2:	89 e1       	ldi	r24, 0x19	; 25
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	9c af       	std	Y+60, r25	; 0x3c
    29a8:	8b af       	std	Y+59, r24	; 0x3b
    29aa:	8b ad       	ldd	r24, Y+59	; 0x3b
    29ac:	9c ad       	ldd	r25, Y+60	; 0x3c
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	f1 f7       	brne	.-4      	; 0x29ae <LCD_LcdInit+0x5be>
    29b2:	9c af       	std	Y+60, r25	; 0x3c
    29b4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    29b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	9e af       	std	Y+62, r25	; 0x3e
    29be:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    29c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    29c4:	00 97       	sbiw	r24, 0x00	; 0
    29c6:	69 f7       	brne	.-38     	; 0x29a2 <LCD_LcdInit+0x5b2>
    29c8:	16 c0       	rjmp	.+44     	; 0x29f6 <LCD_LcdInit+0x606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ca:	fe 01       	movw	r30, r28
    29cc:	ff 96       	adiw	r30, 0x3f	; 63
    29ce:	60 81       	ld	r22, Z
    29d0:	71 81       	ldd	r23, Z+1	; 0x01
    29d2:	82 81       	ldd	r24, Z+2	; 0x02
    29d4:	93 81       	ldd	r25, Z+3	; 0x03
    29d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	9e af       	std	Y+62, r25	; 0x3e
    29e0:	8d af       	std	Y+61, r24	; 0x3d
    29e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    29e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    29e6:	9a af       	std	Y+58, r25	; 0x3a
    29e8:	89 af       	std	Y+57, r24	; 0x39
    29ea:	89 ad       	ldd	r24, Y+57	; 0x39
    29ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	f1 f7       	brne	.-4      	; 0x29ee <LCD_LcdInit+0x5fe>
    29f2:	9a af       	std	Y+58, r25	; 0x3a
    29f4:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(2);
			/* Entry Mode Set */
			LCD_SendCommand(MODE_4_BIT_ENTRY_MODE_PART_1);
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_SendCommand>
			LCD_SendCommand(MODE_4_BIT_ENTRY_MODE_PART_2);
    29fc:	80 e6       	ldi	r24, 0x60	; 96
    29fe:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_SendCommand>
    2a02:	d4 c1       	rjmp	.+936    	; 0x2dac <LCD_LcdInit+0x9bc>
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	a8 e4       	ldi	r26, 0x48	; 72
    2a0a:	b2 e4       	ldi	r27, 0x42	; 66
    2a0c:	8d ab       	std	Y+53, r24	; 0x35
    2a0e:	9e ab       	std	Y+54, r25	; 0x36
    2a10:	af ab       	std	Y+55, r26	; 0x37
    2a12:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a14:	6d a9       	ldd	r22, Y+53	; 0x35
    2a16:	7e a9       	ldd	r23, Y+54	; 0x36
    2a18:	8f a9       	ldd	r24, Y+55	; 0x37
    2a1a:	98 ad       	ldd	r25, Y+56	; 0x38
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	4a e7       	ldi	r20, 0x7A	; 122
    2a22:	53 e4       	ldi	r21, 0x43	; 67
    2a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	89 ab       	std	Y+49, r24	; 0x31
    2a2e:	9a ab       	std	Y+50, r25	; 0x32
    2a30:	ab ab       	std	Y+51, r26	; 0x33
    2a32:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a34:	69 a9       	ldd	r22, Y+49	; 0x31
    2a36:	7a a9       	ldd	r23, Y+50	; 0x32
    2a38:	8b a9       	ldd	r24, Y+51	; 0x33
    2a3a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	40 e8       	ldi	r20, 0x80	; 128
    2a42:	5f e3       	ldi	r21, 0x3F	; 63
    2a44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a48:	88 23       	and	r24, r24
    2a4a:	2c f4       	brge	.+10     	; 0x2a56 <LCD_LcdInit+0x666>
		__ticks = 1;
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	98 ab       	std	Y+48, r25	; 0x30
    2a52:	8f a7       	std	Y+47, r24	; 0x2f
    2a54:	3f c0       	rjmp	.+126    	; 0x2ad4 <LCD_LcdInit+0x6e4>
	else if (__tmp > 65535)
    2a56:	69 a9       	ldd	r22, Y+49	; 0x31
    2a58:	7a a9       	ldd	r23, Y+50	; 0x32
    2a5a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a5c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	3f ef       	ldi	r19, 0xFF	; 255
    2a62:	4f e7       	ldi	r20, 0x7F	; 127
    2a64:	57 e4       	ldi	r21, 0x47	; 71
    2a66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a6a:	18 16       	cp	r1, r24
    2a6c:	4c f5       	brge	.+82     	; 0x2ac0 <LCD_LcdInit+0x6d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a6e:	6d a9       	ldd	r22, Y+53	; 0x35
    2a70:	7e a9       	ldd	r23, Y+54	; 0x36
    2a72:	8f a9       	ldd	r24, Y+55	; 0x37
    2a74:	98 ad       	ldd	r25, Y+56	; 0x38
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 e2       	ldi	r20, 0x20	; 32
    2a7c:	51 e4       	ldi	r21, 0x41	; 65
    2a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	bc 01       	movw	r22, r24
    2a88:	cd 01       	movw	r24, r26
    2a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	98 ab       	std	Y+48, r25	; 0x30
    2a94:	8f a7       	std	Y+47, r24	; 0x2f
    2a96:	0f c0       	rjmp	.+30     	; 0x2ab6 <LCD_LcdInit+0x6c6>
    2a98:	89 e1       	ldi	r24, 0x19	; 25
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	9e a7       	std	Y+46, r25	; 0x2e
    2a9e:	8d a7       	std	Y+45, r24	; 0x2d
    2aa0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2aa2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	f1 f7       	brne	.-4      	; 0x2aa4 <LCD_LcdInit+0x6b4>
    2aa8:	9e a7       	std	Y+46, r25	; 0x2e
    2aaa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aac:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aae:	98 a9       	ldd	r25, Y+48	; 0x30
    2ab0:	01 97       	sbiw	r24, 0x01	; 1
    2ab2:	98 ab       	std	Y+48, r25	; 0x30
    2ab4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ab8:	98 a9       	ldd	r25, Y+48	; 0x30
    2aba:	00 97       	sbiw	r24, 0x00	; 0
    2abc:	69 f7       	brne	.-38     	; 0x2a98 <LCD_LcdInit+0x6a8>
    2abe:	14 c0       	rjmp	.+40     	; 0x2ae8 <LCD_LcdInit+0x6f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ac2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ac4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ac6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	98 ab       	std	Y+48, r25	; 0x30
    2ad2:	8f a7       	std	Y+47, r24	; 0x2f
    2ad4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ad6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ad8:	9c a7       	std	Y+44, r25	; 0x2c
    2ada:	8b a7       	std	Y+43, r24	; 0x2b
    2adc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ade:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ae0:	01 97       	sbiw	r24, 0x01	; 1
    2ae2:	f1 f7       	brne	.-4      	; 0x2ae0 <LCD_LcdInit+0x6f0>
    2ae4:	9c a7       	std	Y+44, r25	; 0x2c
    2ae6:	8b a7       	std	Y+43, r24	; 0x2b
		}
		else{
			_delay_ms(50);
			/* Function Set */
			LCD_SendCommand(MODE_8_BIT_FUNCTION_SET);
    2ae8:	88 e3       	ldi	r24, 0x38	; 56
    2aea:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_SendCommand>
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	a8 e4       	ldi	r26, 0x48	; 72
    2af4:	b2 e4       	ldi	r27, 0x42	; 66
    2af6:	8f a3       	std	Y+39, r24	; 0x27
    2af8:	98 a7       	std	Y+40, r25	; 0x28
    2afa:	a9 a7       	std	Y+41, r26	; 0x29
    2afc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2afe:	6f a1       	ldd	r22, Y+39	; 0x27
    2b00:	78 a5       	ldd	r23, Y+40	; 0x28
    2b02:	89 a5       	ldd	r24, Y+41	; 0x29
    2b04:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	4a e7       	ldi	r20, 0x7A	; 122
    2b0c:	53 e4       	ldi	r21, 0x43	; 67
    2b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	8b a3       	std	Y+35, r24	; 0x23
    2b18:	9c a3       	std	Y+36, r25	; 0x24
    2b1a:	ad a3       	std	Y+37, r26	; 0x25
    2b1c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b1e:	6b a1       	ldd	r22, Y+35	; 0x23
    2b20:	7c a1       	ldd	r23, Y+36	; 0x24
    2b22:	8d a1       	ldd	r24, Y+37	; 0x25
    2b24:	9e a1       	ldd	r25, Y+38	; 0x26
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	40 e8       	ldi	r20, 0x80	; 128
    2b2c:	5f e3       	ldi	r21, 0x3F	; 63
    2b2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b32:	88 23       	and	r24, r24
    2b34:	2c f4       	brge	.+10     	; 0x2b40 <LCD_LcdInit+0x750>
		__ticks = 1;
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	9a a3       	std	Y+34, r25	; 0x22
    2b3c:	89 a3       	std	Y+33, r24	; 0x21
    2b3e:	3f c0       	rjmp	.+126    	; 0x2bbe <LCD_LcdInit+0x7ce>
	else if (__tmp > 65535)
    2b40:	6b a1       	ldd	r22, Y+35	; 0x23
    2b42:	7c a1       	ldd	r23, Y+36	; 0x24
    2b44:	8d a1       	ldd	r24, Y+37	; 0x25
    2b46:	9e a1       	ldd	r25, Y+38	; 0x26
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	3f ef       	ldi	r19, 0xFF	; 255
    2b4c:	4f e7       	ldi	r20, 0x7F	; 127
    2b4e:	57 e4       	ldi	r21, 0x47	; 71
    2b50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b54:	18 16       	cp	r1, r24
    2b56:	4c f5       	brge	.+82     	; 0x2baa <LCD_LcdInit+0x7ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b58:	6f a1       	ldd	r22, Y+39	; 0x27
    2b5a:	78 a5       	ldd	r23, Y+40	; 0x28
    2b5c:	89 a5       	ldd	r24, Y+41	; 0x29
    2b5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	40 e2       	ldi	r20, 0x20	; 32
    2b66:	51 e4       	ldi	r21, 0x41	; 65
    2b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	bc 01       	movw	r22, r24
    2b72:	cd 01       	movw	r24, r26
    2b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	9a a3       	std	Y+34, r25	; 0x22
    2b7e:	89 a3       	std	Y+33, r24	; 0x21
    2b80:	0f c0       	rjmp	.+30     	; 0x2ba0 <LCD_LcdInit+0x7b0>
    2b82:	89 e1       	ldi	r24, 0x19	; 25
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	98 a3       	std	Y+32, r25	; 0x20
    2b88:	8f 8f       	std	Y+31, r24	; 0x1f
    2b8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b8c:	98 a1       	ldd	r25, Y+32	; 0x20
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	f1 f7       	brne	.-4      	; 0x2b8e <LCD_LcdInit+0x79e>
    2b92:	98 a3       	std	Y+32, r25	; 0x20
    2b94:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b96:	89 a1       	ldd	r24, Y+33	; 0x21
    2b98:	9a a1       	ldd	r25, Y+34	; 0x22
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	9a a3       	std	Y+34, r25	; 0x22
    2b9e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ba2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ba4:	00 97       	sbiw	r24, 0x00	; 0
    2ba6:	69 f7       	brne	.-38     	; 0x2b82 <LCD_LcdInit+0x792>
    2ba8:	14 c0       	rjmp	.+40     	; 0x2bd2 <LCD_LcdInit+0x7e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2baa:	6b a1       	ldd	r22, Y+35	; 0x23
    2bac:	7c a1       	ldd	r23, Y+36	; 0x24
    2bae:	8d a1       	ldd	r24, Y+37	; 0x25
    2bb0:	9e a1       	ldd	r25, Y+38	; 0x26
    2bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	9a a3       	std	Y+34, r25	; 0x22
    2bbc:	89 a3       	std	Y+33, r24	; 0x21
    2bbe:	89 a1       	ldd	r24, Y+33	; 0x21
    2bc0:	9a a1       	ldd	r25, Y+34	; 0x22
    2bc2:	9e 8f       	std	Y+30, r25	; 0x1e
    2bc4:	8d 8f       	std	Y+29, r24	; 0x1d
    2bc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bc8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bca:	01 97       	sbiw	r24, 0x01	; 1
    2bcc:	f1 f7       	brne	.-4      	; 0x2bca <LCD_LcdInit+0x7da>
    2bce:	9e 8f       	std	Y+30, r25	; 0x1e
    2bd0:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(50);
			/* Display ON/OFF */
			LCD_SendCommand(MODE_8_BIT_DISPLAY);
    2bd2:	8f e0       	ldi	r24, 0x0F	; 15
    2bd4:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_SendCommand>
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	a8 e4       	ldi	r26, 0x48	; 72
    2bde:	b2 e4       	ldi	r27, 0x42	; 66
    2be0:	89 8f       	std	Y+25, r24	; 0x19
    2be2:	9a 8f       	std	Y+26, r25	; 0x1a
    2be4:	ab 8f       	std	Y+27, r26	; 0x1b
    2be6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be8:	69 8d       	ldd	r22, Y+25	; 0x19
    2bea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	4a e7       	ldi	r20, 0x7A	; 122
    2bf6:	53 e4       	ldi	r21, 0x43	; 67
    2bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	8d 8b       	std	Y+21, r24	; 0x15
    2c02:	9e 8b       	std	Y+22, r25	; 0x16
    2c04:	af 8b       	std	Y+23, r26	; 0x17
    2c06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c08:	6d 89       	ldd	r22, Y+21	; 0x15
    2c0a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	40 e8       	ldi	r20, 0x80	; 128
    2c16:	5f e3       	ldi	r21, 0x3F	; 63
    2c18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c1c:	88 23       	and	r24, r24
    2c1e:	2c f4       	brge	.+10     	; 0x2c2a <LCD_LcdInit+0x83a>
		__ticks = 1;
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	9c 8b       	std	Y+20, r25	; 0x14
    2c26:	8b 8b       	std	Y+19, r24	; 0x13
    2c28:	3f c0       	rjmp	.+126    	; 0x2ca8 <LCD_LcdInit+0x8b8>
	else if (__tmp > 65535)
    2c2a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c2c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c30:	98 8d       	ldd	r25, Y+24	; 0x18
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	3f ef       	ldi	r19, 0xFF	; 255
    2c36:	4f e7       	ldi	r20, 0x7F	; 127
    2c38:	57 e4       	ldi	r21, 0x47	; 71
    2c3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c3e:	18 16       	cp	r1, r24
    2c40:	4c f5       	brge	.+82     	; 0x2c94 <LCD_LcdInit+0x8a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c42:	69 8d       	ldd	r22, Y+25	; 0x19
    2c44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	40 e2       	ldi	r20, 0x20	; 32
    2c50:	51 e4       	ldi	r21, 0x41	; 65
    2c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	bc 01       	movw	r22, r24
    2c5c:	cd 01       	movw	r24, r26
    2c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	9c 8b       	std	Y+20, r25	; 0x14
    2c68:	8b 8b       	std	Y+19, r24	; 0x13
    2c6a:	0f c0       	rjmp	.+30     	; 0x2c8a <LCD_LcdInit+0x89a>
    2c6c:	89 e1       	ldi	r24, 0x19	; 25
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	9a 8b       	std	Y+18, r25	; 0x12
    2c72:	89 8b       	std	Y+17, r24	; 0x11
    2c74:	89 89       	ldd	r24, Y+17	; 0x11
    2c76:	9a 89       	ldd	r25, Y+18	; 0x12
    2c78:	01 97       	sbiw	r24, 0x01	; 1
    2c7a:	f1 f7       	brne	.-4      	; 0x2c78 <LCD_LcdInit+0x888>
    2c7c:	9a 8b       	std	Y+18, r25	; 0x12
    2c7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c80:	8b 89       	ldd	r24, Y+19	; 0x13
    2c82:	9c 89       	ldd	r25, Y+20	; 0x14
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	9c 8b       	std	Y+20, r25	; 0x14
    2c88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c8a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c8c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c8e:	00 97       	sbiw	r24, 0x00	; 0
    2c90:	69 f7       	brne	.-38     	; 0x2c6c <LCD_LcdInit+0x87c>
    2c92:	14 c0       	rjmp	.+40     	; 0x2cbc <LCD_LcdInit+0x8cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c94:	6d 89       	ldd	r22, Y+21	; 0x15
    2c96:	7e 89       	ldd	r23, Y+22	; 0x16
    2c98:	8f 89       	ldd	r24, Y+23	; 0x17
    2c9a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	9c 8b       	std	Y+20, r25	; 0x14
    2ca6:	8b 8b       	std	Y+19, r24	; 0x13
    2ca8:	8b 89       	ldd	r24, Y+19	; 0x13
    2caa:	9c 89       	ldd	r25, Y+20	; 0x14
    2cac:	98 8b       	std	Y+16, r25	; 0x10
    2cae:	8f 87       	std	Y+15, r24	; 0x0f
    2cb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cb2:	98 89       	ldd	r25, Y+16	; 0x10
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	f1 f7       	brne	.-4      	; 0x2cb4 <LCD_LcdInit+0x8c4>
    2cb8:	98 8b       	std	Y+16, r25	; 0x10
    2cba:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(50);
			/* Display Clear */
			LCD_SendCommand(MODE_8_BIT_CLEAR);
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_SendCommand>
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	a0 e0       	ldi	r26, 0x00	; 0
    2cc8:	b0 e4       	ldi	r27, 0x40	; 64
    2cca:	8b 87       	std	Y+11, r24	; 0x0b
    2ccc:	9c 87       	std	Y+12, r25	; 0x0c
    2cce:	ad 87       	std	Y+13, r26	; 0x0d
    2cd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	4a e7       	ldi	r20, 0x7A	; 122
    2ce0:	53 e4       	ldi	r21, 0x43	; 67
    2ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	8f 83       	std	Y+7, r24	; 0x07
    2cec:	98 87       	std	Y+8, r25	; 0x08
    2cee:	a9 87       	std	Y+9, r26	; 0x09
    2cf0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cf2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf4:	78 85       	ldd	r23, Y+8	; 0x08
    2cf6:	89 85       	ldd	r24, Y+9	; 0x09
    2cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	40 e8       	ldi	r20, 0x80	; 128
    2d00:	5f e3       	ldi	r21, 0x3F	; 63
    2d02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d06:	88 23       	and	r24, r24
    2d08:	2c f4       	brge	.+10     	; 0x2d14 <LCD_LcdInit+0x924>
		__ticks = 1;
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	9e 83       	std	Y+6, r25	; 0x06
    2d10:	8d 83       	std	Y+5, r24	; 0x05
    2d12:	3f c0       	rjmp	.+126    	; 0x2d92 <LCD_LcdInit+0x9a2>
	else if (__tmp > 65535)
    2d14:	6f 81       	ldd	r22, Y+7	; 0x07
    2d16:	78 85       	ldd	r23, Y+8	; 0x08
    2d18:	89 85       	ldd	r24, Y+9	; 0x09
    2d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	3f ef       	ldi	r19, 0xFF	; 255
    2d20:	4f e7       	ldi	r20, 0x7F	; 127
    2d22:	57 e4       	ldi	r21, 0x47	; 71
    2d24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d28:	18 16       	cp	r1, r24
    2d2a:	4c f5       	brge	.+82     	; 0x2d7e <LCD_LcdInit+0x98e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	40 e2       	ldi	r20, 0x20	; 32
    2d3a:	51 e4       	ldi	r21, 0x41	; 65
    2d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	bc 01       	movw	r22, r24
    2d46:	cd 01       	movw	r24, r26
    2d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	9e 83       	std	Y+6, r25	; 0x06
    2d52:	8d 83       	std	Y+5, r24	; 0x05
    2d54:	0f c0       	rjmp	.+30     	; 0x2d74 <LCD_LcdInit+0x984>
    2d56:	89 e1       	ldi	r24, 0x19	; 25
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	9c 83       	std	Y+4, r25	; 0x04
    2d5c:	8b 83       	std	Y+3, r24	; 0x03
    2d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d60:	9c 81       	ldd	r25, Y+4	; 0x04
    2d62:	01 97       	sbiw	r24, 0x01	; 1
    2d64:	f1 f7       	brne	.-4      	; 0x2d62 <LCD_LcdInit+0x972>
    2d66:	9c 83       	std	Y+4, r25	; 0x04
    2d68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	9e 83       	std	Y+6, r25	; 0x06
    2d72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d74:	8d 81       	ldd	r24, Y+5	; 0x05
    2d76:	9e 81       	ldd	r25, Y+6	; 0x06
    2d78:	00 97       	sbiw	r24, 0x00	; 0
    2d7a:	69 f7       	brne	.-38     	; 0x2d56 <LCD_LcdInit+0x966>
    2d7c:	14 c0       	rjmp	.+40     	; 0x2da6 <LCD_LcdInit+0x9b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d80:	78 85       	ldd	r23, Y+8	; 0x08
    2d82:	89 85       	ldd	r24, Y+9	; 0x09
    2d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	9e 83       	std	Y+6, r25	; 0x06
    2d90:	8d 83       	std	Y+5, r24	; 0x05
    2d92:	8d 81       	ldd	r24, Y+5	; 0x05
    2d94:	9e 81       	ldd	r25, Y+6	; 0x06
    2d96:	9a 83       	std	Y+2, r25	; 0x02
    2d98:	89 83       	std	Y+1, r24	; 0x01
    2d9a:	89 81       	ldd	r24, Y+1	; 0x01
    2d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d9e:	01 97       	sbiw	r24, 0x01	; 1
    2da0:	f1 f7       	brne	.-4      	; 0x2d9e <LCD_LcdInit+0x9ae>
    2da2:	9a 83       	std	Y+2, r25	; 0x02
    2da4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2);
			/* Entry Mode Set */
			LCD_SendCommand(MODE_8_BIT_ENTRY_MODE);
    2da6:	86 e0       	ldi	r24, 0x06	; 6
    2da8:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_SendCommand>
		}
	}
	else{
		/* Nothing Happened */
	}
}
    2dac:	cd 58       	subi	r28, 0x8D	; 141
    2dae:	df 4f       	sbci	r29, 0xFF	; 255
    2db0:	0f b6       	in	r0, 0x3f	; 63
    2db2:	f8 94       	cli
    2db4:	de bf       	out	0x3e, r29	; 62
    2db6:	0f be       	out	0x3f, r0	; 63
    2db8:	cd bf       	out	0x3d, r28	; 61
    2dba:	cf 91       	pop	r28
    2dbc:	df 91       	pop	r29
    2dbe:	1f 91       	pop	r17
    2dc0:	0f 91       	pop	r16
    2dc2:	08 95       	ret

00002dc4 <LCD_DisplayString>:
 * Description: This function is used to Display String on LCD .
 * Arguments:
	 * *Str : Pointer to Array of Characters ( String ) .
 * Return Value: no return ( void ) .
 */
void LCD_DisplayString( sint8 *Str ){
    2dc4:	df 93       	push	r29
    2dc6:	cf 93       	push	r28
    2dc8:	00 d0       	rcall	.+0      	; 0x2dca <LCD_DisplayString+0x6>
    2dca:	0f 92       	push	r0
    2dcc:	cd b7       	in	r28, 0x3d	; 61
    2dce:	de b7       	in	r29, 0x3e	; 62
    2dd0:	9b 83       	std	Y+3, r25	; 0x03
    2dd2:	8a 83       	std	Y+2, r24	; 0x02
	sint8 CharcterIndex ;
	for ( CharcterIndex = 0 ; Str[CharcterIndex] != NULL_CHAR ; ++CharcterIndex ){
    2dd4:	19 82       	std	Y+1, r1	; 0x01
    2dd6:	10 c0       	rjmp	.+32     	; 0x2df8 <LCD_DisplayString+0x34>
		LCD_SendData(Str[CharcterIndex]);
    2dd8:	89 81       	ldd	r24, Y+1	; 0x01
    2dda:	28 2f       	mov	r18, r24
    2ddc:	33 27       	eor	r19, r19
    2dde:	27 fd       	sbrc	r18, 7
    2de0:	30 95       	com	r19
    2de2:	8a 81       	ldd	r24, Y+2	; 0x02
    2de4:	9b 81       	ldd	r25, Y+3	; 0x03
    2de6:	fc 01       	movw	r30, r24
    2de8:	e2 0f       	add	r30, r18
    2dea:	f3 1f       	adc	r31, r19
    2dec:	80 81       	ld	r24, Z
    2dee:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_SendData>
	 * *Str : Pointer to Array of Characters ( String ) .
 * Return Value: no return ( void ) .
 */
void LCD_DisplayString( sint8 *Str ){
	sint8 CharcterIndex ;
	for ( CharcterIndex = 0 ; Str[CharcterIndex] != NULL_CHAR ; ++CharcterIndex ){
    2df2:	89 81       	ldd	r24, Y+1	; 0x01
    2df4:	8f 5f       	subi	r24, 0xFF	; 255
    2df6:	89 83       	std	Y+1, r24	; 0x01
    2df8:	89 81       	ldd	r24, Y+1	; 0x01
    2dfa:	28 2f       	mov	r18, r24
    2dfc:	33 27       	eor	r19, r19
    2dfe:	27 fd       	sbrc	r18, 7
    2e00:	30 95       	com	r19
    2e02:	8a 81       	ldd	r24, Y+2	; 0x02
    2e04:	9b 81       	ldd	r25, Y+3	; 0x03
    2e06:	fc 01       	movw	r30, r24
    2e08:	e2 0f       	add	r30, r18
    2e0a:	f3 1f       	adc	r31, r19
    2e0c:	80 81       	ld	r24, Z
    2e0e:	88 23       	and	r24, r24
    2e10:	19 f7       	brne	.-58     	; 0x2dd8 <LCD_DisplayString+0x14>
		LCD_SendData(Str[CharcterIndex]);
	}
}
    2e12:	0f 90       	pop	r0
    2e14:	0f 90       	pop	r0
    2e16:	0f 90       	pop	r0
    2e18:	cf 91       	pop	r28
    2e1a:	df 91       	pop	r29
    2e1c:	08 95       	ret

00002e1e <LCD_DisplayNumber>:
 * Description: This function is used to Display Number on LCD .
 * Arguments:
	 * Number : Number Send .
 * Return Value: no return ( void ) .
 */
void LCD_DisplayNumber( sint32 Number ){
    2e1e:	df 93       	push	r29
    2e20:	cf 93       	push	r28
    2e22:	00 d0       	rcall	.+0      	; 0x2e24 <LCD_DisplayNumber+0x6>
    2e24:	00 d0       	rcall	.+0      	; 0x2e26 <LCD_DisplayNumber+0x8>
    2e26:	cd b7       	in	r28, 0x3d	; 61
    2e28:	de b7       	in	r29, 0x3e	; 62
    2e2a:	69 83       	std	Y+1, r22	; 0x01
    2e2c:	7a 83       	std	Y+2, r23	; 0x02
    2e2e:	8b 83       	std	Y+3, r24	; 0x03
    2e30:	9c 83       	std	Y+4, r25	; 0x04

	if( Number < 0 ){
    2e32:	89 81       	ldd	r24, Y+1	; 0x01
    2e34:	9a 81       	ldd	r25, Y+2	; 0x02
    2e36:	ab 81       	ldd	r26, Y+3	; 0x03
    2e38:	bc 81       	ldd	r27, Y+4	; 0x04
    2e3a:	bb 23       	and	r27, r27
    2e3c:	94 f4       	brge	.+36     	; 0x2e62 <LCD_DisplayNumber+0x44>
		LCD_SendData('-');
    2e3e:	8d e2       	ldi	r24, 0x2D	; 45
    2e40:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_SendData>
		Number *= -1 ;
    2e44:	89 81       	ldd	r24, Y+1	; 0x01
    2e46:	9a 81       	ldd	r25, Y+2	; 0x02
    2e48:	ab 81       	ldd	r26, Y+3	; 0x03
    2e4a:	bc 81       	ldd	r27, Y+4	; 0x04
    2e4c:	b0 95       	com	r27
    2e4e:	a0 95       	com	r26
    2e50:	90 95       	com	r25
    2e52:	81 95       	neg	r24
    2e54:	9f 4f       	sbci	r25, 0xFF	; 255
    2e56:	af 4f       	sbci	r26, 0xFF	; 255
    2e58:	bf 4f       	sbci	r27, 0xFF	; 255
    2e5a:	89 83       	std	Y+1, r24	; 0x01
    2e5c:	9a 83       	std	Y+2, r25	; 0x02
    2e5e:	ab 83       	std	Y+3, r26	; 0x03
    2e60:	bc 83       	std	Y+4, r27	; 0x04
	}
	if( Number != 0 ){
    2e62:	89 81       	ldd	r24, Y+1	; 0x01
    2e64:	9a 81       	ldd	r25, Y+2	; 0x02
    2e66:	ab 81       	ldd	r26, Y+3	; 0x03
    2e68:	bc 81       	ldd	r27, Y+4	; 0x04
    2e6a:	00 97       	sbiw	r24, 0x00	; 0
    2e6c:	a1 05       	cpc	r26, r1
    2e6e:	b1 05       	cpc	r27, r1
    2e70:	19 f1       	breq	.+70     	; 0x2eb8 <LCD_DisplayNumber+0x9a>
		LCD_DisplayNumber(Number/10);
    2e72:	89 81       	ldd	r24, Y+1	; 0x01
    2e74:	9a 81       	ldd	r25, Y+2	; 0x02
    2e76:	ab 81       	ldd	r26, Y+3	; 0x03
    2e78:	bc 81       	ldd	r27, Y+4	; 0x04
    2e7a:	2a e0       	ldi	r18, 0x0A	; 10
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	40 e0       	ldi	r20, 0x00	; 0
    2e80:	50 e0       	ldi	r21, 0x00	; 0
    2e82:	bc 01       	movw	r22, r24
    2e84:	cd 01       	movw	r24, r26
    2e86:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <__divmodsi4>
    2e8a:	da 01       	movw	r26, r20
    2e8c:	c9 01       	movw	r24, r18
    2e8e:	bc 01       	movw	r22, r24
    2e90:	cd 01       	movw	r24, r26
    2e92:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_DisplayNumber>
		LCD_SendData('0'+(Number%10));
    2e96:	89 81       	ldd	r24, Y+1	; 0x01
    2e98:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9a:	ab 81       	ldd	r26, Y+3	; 0x03
    2e9c:	bc 81       	ldd	r27, Y+4	; 0x04
    2e9e:	2a e0       	ldi	r18, 0x0A	; 10
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e0       	ldi	r20, 0x00	; 0
    2ea4:	50 e0       	ldi	r21, 0x00	; 0
    2ea6:	bc 01       	movw	r22, r24
    2ea8:	cd 01       	movw	r24, r26
    2eaa:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <__divmodsi4>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	80 5d       	subi	r24, 0xD0	; 208
    2eb4:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_SendData>
	}
}
    2eb8:	0f 90       	pop	r0
    2eba:	0f 90       	pop	r0
    2ebc:	0f 90       	pop	r0
    2ebe:	0f 90       	pop	r0
    2ec0:	cf 91       	pop	r28
    2ec2:	df 91       	pop	r29
    2ec4:	08 95       	ret

00002ec6 <LCD_MoveCursor>:
 * Arguments:
	 * RowIndex : Index of Row .
	 * ColIndex : Index of Column .
 * Return Value: no return ( void ) .
 */
void LCD_MoveCursor( uint8 RowIndex , uint8 ColIndex ){
    2ec6:	df 93       	push	r29
    2ec8:	cf 93       	push	r28
    2eca:	00 d0       	rcall	.+0      	; 0x2ecc <LCD_MoveCursor+0x6>
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62
    2ed0:	89 83       	std	Y+1, r24	; 0x01
    2ed2:	6a 83       	std	Y+2, r22	; 0x02
	if( (RowIndex == LCD_ROW_1 || RowIndex == LCD_ROW_2 ) && ( ColIndex >= 0 && ColIndex <= 15 ) ){
    2ed4:	89 81       	ldd	r24, Y+1	; 0x01
    2ed6:	81 30       	cpi	r24, 0x01	; 1
    2ed8:	19 f0       	breq	.+6      	; 0x2ee0 <LCD_MoveCursor+0x1a>
    2eda:	89 81       	ldd	r24, Y+1	; 0x01
    2edc:	82 30       	cpi	r24, 0x02	; 2
    2ede:	79 f4       	brne	.+30     	; 0x2efe <LCD_MoveCursor+0x38>
    2ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee2:	80 31       	cpi	r24, 0x10	; 16
    2ee4:	60 f4       	brcc	.+24     	; 0x2efe <LCD_MoveCursor+0x38>
		if( RowIndex == LCD_ROW_1 ){
    2ee6:	89 81       	ldd	r24, Y+1	; 0x01
    2ee8:	81 30       	cpi	r24, 0x01	; 1
    2eea:	29 f4       	brne	.+10     	; 0x2ef6 <LCD_MoveCursor+0x30>
			LCD_SendCommand( LCD_FIRST_ROW + ColIndex );
    2eec:	8a 81       	ldd	r24, Y+2	; 0x02
    2eee:	80 58       	subi	r24, 0x80	; 128
    2ef0:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_SendCommand>
    2ef4:	04 c0       	rjmp	.+8      	; 0x2efe <LCD_MoveCursor+0x38>
		}
		else{
			LCD_SendCommand( LCD_SECOND_ROW + ColIndex );
    2ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef8:	80 54       	subi	r24, 0x40	; 64
    2efa:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_SendCommand>
		}
	}
	else{
		/* Nothing Happened */
	}
}
    2efe:	0f 90       	pop	r0
    2f00:	0f 90       	pop	r0
    2f02:	cf 91       	pop	r28
    2f04:	df 91       	pop	r29
    2f06:	08 95       	ret

00002f08 <LCD_ClearLCD>:
 * Description: This function is used to Clear LCD .
 * Arguments:
	 * No Arguments .
 * Return Value: no return ( void ) .
 */
void LCD_ClearLCD( void ){
    2f08:	df 93       	push	r29
    2f0a:	cf 93       	push	r28
    2f0c:	cd b7       	in	r28, 0x3d	; 61
    2f0e:	de b7       	in	r29, 0x3e	; 62
	if( LCD_Bit_Mode == MODE_4_BIT || LCD_Bit_Mode == MODE_8_BIT ){
    2f10:	80 91 4a 01 	lds	r24, 0x014A
    2f14:	88 23       	and	r24, r24
    2f16:	21 f0       	breq	.+8      	; 0x2f20 <LCD_ClearLCD+0x18>
    2f18:	80 91 4a 01 	lds	r24, 0x014A
    2f1c:	81 30       	cpi	r24, 0x01	; 1
    2f1e:	71 f4       	brne	.+28     	; 0x2f3c <LCD_ClearLCD+0x34>
		if( LCD_Bit_Mode == MODE_4_BIT ){
    2f20:	80 91 4a 01 	lds	r24, 0x014A
    2f24:	88 23       	and	r24, r24
    2f26:	39 f4       	brne	.+14     	; 0x2f36 <LCD_ClearLCD+0x2e>
			LCD_SendCommand(MODE_4_BIT_CLEAR_PART_1);
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    2f2a:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_SendCommand>
			LCD_SendCommand(MODE_4_BIT_CLEAR_PART_2);
    2f2e:	80 e1       	ldi	r24, 0x10	; 16
    2f30:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_SendCommand>
    2f34:	03 c0       	rjmp	.+6      	; 0x2f3c <LCD_ClearLCD+0x34>
		}
		else{
			LCD_SendCommand(MODE_8_BIT_CLEAR);
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_SendCommand>
		}
	}
	else{
		/* Nothing Happened */
	}
}
    2f3c:	cf 91       	pop	r28
    2f3e:	df 91       	pop	r29
    2f40:	08 95       	ret

00002f42 <LCD_SaveCustomChar>:
 * Arguments:
	 * Index : Index of Storing in CGRAM .
	 * CustomChar[] : Array of 8 Elements , Each element is 5 digit binary ( 5*8 dots ) .
 * Return Value: no return ( void ) .
 */
void LCD_SaveCustomChar( uint8 Index , uint8 CustomChar[] ){
    2f42:	df 93       	push	r29
    2f44:	cf 93       	push	r28
    2f46:	00 d0       	rcall	.+0      	; 0x2f48 <LCD_SaveCustomChar+0x6>
    2f48:	00 d0       	rcall	.+0      	; 0x2f4a <LCD_SaveCustomChar+0x8>
    2f4a:	cd b7       	in	r28, 0x3d	; 61
    2f4c:	de b7       	in	r29, 0x3e	; 62
    2f4e:	8a 83       	std	Y+2, r24	; 0x02
    2f50:	7c 83       	std	Y+4, r23	; 0x04
    2f52:	6b 83       	std	Y+3, r22	; 0x03
	if( Index < 8 ){
    2f54:	8a 81       	ldd	r24, Y+2	; 0x02
    2f56:	88 30       	cpi	r24, 0x08	; 8
    2f58:	10 f5       	brcc	.+68     	; 0x2f9e <LCD_SaveCustomChar+0x5c>
		uint8 counter ;
		LCD_SendCommand( SET_CGRAM_ADDRESS + Index * 8 );
    2f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5c:	88 2f       	mov	r24, r24
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	08 96       	adiw	r24, 0x08	; 8
    2f62:	88 0f       	add	r24, r24
    2f64:	99 1f       	adc	r25, r25
    2f66:	88 0f       	add	r24, r24
    2f68:	99 1f       	adc	r25, r25
    2f6a:	88 0f       	add	r24, r24
    2f6c:	99 1f       	adc	r25, r25
    2f6e:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_SendCommand>
		for( counter = 0 ; counter < 8 ; ++counter ){
    2f72:	19 82       	std	Y+1, r1	; 0x01
    2f74:	0e c0       	rjmp	.+28     	; 0x2f92 <LCD_SaveCustomChar+0x50>
			LCD_SendData(CustomChar[counter]);
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
    2f78:	28 2f       	mov	r18, r24
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f80:	fc 01       	movw	r30, r24
    2f82:	e2 0f       	add	r30, r18
    2f84:	f3 1f       	adc	r31, r19
    2f86:	80 81       	ld	r24, Z
    2f88:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_SendData>
 */
void LCD_SaveCustomChar( uint8 Index , uint8 CustomChar[] ){
	if( Index < 8 ){
		uint8 counter ;
		LCD_SendCommand( SET_CGRAM_ADDRESS + Index * 8 );
		for( counter = 0 ; counter < 8 ; ++counter ){
    2f8c:	89 81       	ldd	r24, Y+1	; 0x01
    2f8e:	8f 5f       	subi	r24, 0xFF	; 255
    2f90:	89 83       	std	Y+1, r24	; 0x01
    2f92:	89 81       	ldd	r24, Y+1	; 0x01
    2f94:	88 30       	cpi	r24, 0x08	; 8
    2f96:	78 f3       	brcs	.-34     	; 0x2f76 <LCD_SaveCustomChar+0x34>
			LCD_SendData(CustomChar[counter]);
		}
		LCD_SendCommand(SET_DDRAM_ADDRESS);
    2f98:	80 e8       	ldi	r24, 0x80	; 128
    2f9a:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_SendCommand>
	}
	else{
		/* Nothing Happened */
	}
}
    2f9e:	0f 90       	pop	r0
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	cf 91       	pop	r28
    2fa8:	df 91       	pop	r29
    2faa:	08 95       	ret

00002fac <LCD_DisplayCustomChar>:
 * Description: This function is used to Display Custom Character on LCD .
 * Arguments:
	 * Index : Index of Storing in CGRAM .
 * Return Value: no return ( void ) .
 */
void LCD_DisplayCustomChar( uint8 Index ){
    2fac:	df 93       	push	r29
    2fae:	cf 93       	push	r28
    2fb0:	0f 92       	push	r0
    2fb2:	cd b7       	in	r28, 0x3d	; 61
    2fb4:	de b7       	in	r29, 0x3e	; 62
    2fb6:	89 83       	std	Y+1, r24	; 0x01
	if( Index < 8 ){
    2fb8:	89 81       	ldd	r24, Y+1	; 0x01
    2fba:	88 30       	cpi	r24, 0x08	; 8
    2fbc:	18 f4       	brcc	.+6      	; 0x2fc4 <LCD_DisplayCustomChar+0x18>
		LCD_SendData(Index);
    2fbe:	89 81       	ldd	r24, Y+1	; 0x01
    2fc0:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_SendData>
	}
	else{
		/* Nothing Happened */
	}
}
    2fc4:	0f 90       	pop	r0
    2fc6:	cf 91       	pop	r28
    2fc8:	df 91       	pop	r29
    2fca:	08 95       	ret

00002fcc <KEYPAD_KeypadInit>:
 * Arguments:
	 * Port_Id: port .
	 * PortMode: Mode of Connection of the port .
 * Return Value: no return ( void ) .
 */
void KEYPAD_KeypadInit( uint8 Port_id , uint8 PortMode ){
    2fcc:	df 93       	push	r29
    2fce:	cf 93       	push	r28
    2fd0:	00 d0       	rcall	.+0      	; 0x2fd2 <KEYPAD_KeypadInit+0x6>
    2fd2:	cd b7       	in	r28, 0x3d	; 61
    2fd4:	de b7       	in	r29, 0x3e	; 62
    2fd6:	89 83       	std	Y+1, r24	; 0x01
    2fd8:	6a 83       	std	Y+2, r22	; 0x02
	/* Check For Mode */
	if( PortMode == HALF_INPUT_OUTPUT || PortMode == HALF_OUTPUT_INPUT ){
    2fda:	8a 81       	ldd	r24, Y+2	; 0x02
    2fdc:	80 3f       	cpi	r24, 0xF0	; 240
    2fde:	19 f0       	breq	.+6      	; 0x2fe6 <KEYPAD_KeypadInit+0x1a>
    2fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe2:	8f 30       	cpi	r24, 0x0F	; 15
    2fe4:	59 f4       	brne	.+22     	; 0x2ffc <KEYPAD_KeypadInit+0x30>
		KeyPadConnectionMode = PortMode ;
    2fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe8:	80 93 4b 01 	sts	0x014B, r24
		GPIO_SetPortDirction(Port_id,PortMode);
    2fec:	89 81       	ldd	r24, Y+1	; 0x01
    2fee:	6a 81       	ldd	r22, Y+2	; 0x02
    2ff0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <GPIO_SetPortDirction>
		/* Enable Internal Pull Up */
		GPIO_WritePortValue(Port_id,0xff);
    2ff4:	89 81       	ldd	r24, Y+1	; 0x01
    2ff6:	6f ef       	ldi	r22, 0xFF	; 255
    2ff8:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <GPIO_WritePortValue>
	}
	else{
		/* Nothing Happened */
	}
}
    2ffc:	0f 90       	pop	r0
    2ffe:	0f 90       	pop	r0
    3000:	cf 91       	pop	r28
    3002:	df 91       	pop	r29
    3004:	08 95       	ret

00003006 <KEYPAD_GetPressedKeyValue>:
 * Arguments:
	 * Port_Id: port .
	 * PortMode: Mode of Connection of the port .
 * Return Value: return pressed key value .
 */
uint8 KEYPAD_GetPressedKeyValue( uint8 Port_id ) {
    3006:	df 93       	push	r29
    3008:	cf 93       	push	r28
    300a:	cd b7       	in	r28, 0x3d	; 61
    300c:	de b7       	in	r29, 0x3e	; 62
    300e:	a4 97       	sbiw	r28, 0x24	; 36
    3010:	0f b6       	in	r0, 0x3f	; 63
    3012:	f8 94       	cli
    3014:	de bf       	out	0x3e, r29	; 62
    3016:	0f be       	out	0x3f, r0	; 63
    3018:	cd bf       	out	0x3d, r28	; 61
    301a:	8c a3       	std	Y+36, r24	; 0x24
	uint8 PortMode = KeyPadConnectionMode;
    301c:	80 91 4b 01 	lds	r24, 0x014B
    3020:	8b a3       	std	Y+35, r24	; 0x23
    uint8 KeyVal = 0xff, flag = 0;
    3022:	8f ef       	ldi	r24, 0xFF	; 255
    3024:	8a a3       	std	Y+34, r24	; 0x22
    3026:	19 a2       	std	Y+33, r1	; 0x21

    // Check if PortMode is HALF_INPUT_OUTPUT or HALF_OUTPUT_INPUT
    if(PortMode == HALF_INPUT_OUTPUT || PortMode == HALF_OUTPUT_INPUT){
    3028:	8b a1       	ldd	r24, Y+35	; 0x23
    302a:	80 3f       	cpi	r24, 0xF0	; 240
    302c:	21 f0       	breq	.+8      	; 0x3036 <KEYPAD_GetPressedKeyValue+0x30>
    302e:	8b a1       	ldd	r24, Y+35	; 0x23
    3030:	8f 30       	cpi	r24, 0x0F	; 15
    3032:	09 f0       	breq	.+2      	; 0x3036 <KEYPAD_GetPressedKeyValue+0x30>
    3034:	8c c1       	rjmp	.+792    	; 0x334e <KEYPAD_GetPressedKeyValue+0x348>
    	// HALF_INPUT_OUTPUT Mode
        if( PortMode == HALF_INPUT_OUTPUT ){
    3036:	8b a1       	ldd	r24, Y+35	; 0x23
    3038:	80 3f       	cpi	r24, 0xF0	; 240
    303a:	09 f0       	breq	.+2      	; 0x303e <KEYPAD_GetPressedKeyValue+0x38>
    303c:	c3 c0       	rjmp	.+390    	; 0x31c4 <KEYPAD_GetPressedKeyValue+0x1be>
        	uint8 Col = 0, Row = 0;
    303e:	18 a2       	std	Y+32, r1	; 0x20
    3040:	1f 8e       	std	Y+31, r1	; 0x1f
            // Loop through the columns
            for( Col = 0 ; Col < KEYPAD_COLS ; ++Col ){
    3042:	18 a2       	std	Y+32, r1	; 0x20
    3044:	ba c0       	rjmp	.+372    	; 0x31ba <KEYPAD_GetPressedKeyValue+0x1b4>
                // Set the current column to low
                GPIO_WritePinValue(Port_id, Col + KEYPAD_COLS, LOGIC_LOW);
    3046:	88 a1       	ldd	r24, Y+32	; 0x20
    3048:	98 2f       	mov	r25, r24
    304a:	9c 5f       	subi	r25, 0xFC	; 252
    304c:	8c a1       	ldd	r24, Y+36	; 0x24
    304e:	69 2f       	mov	r22, r25
    3050:	40 e0       	ldi	r20, 0x00	; 0
    3052:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
                // Loop through the rows
                for( Row = 0 ; Row < KEYPAD_ROWS ; ++Row ){
    3056:	1f 8e       	std	Y+31, r1	; 0x1f
    3058:	9d c0       	rjmp	.+314    	; 0x3194 <KEYPAD_GetPressedKeyValue+0x18e>
                    if(GPIO_ReadPinValue(Port_id, Row) == KEY_BUTTON_PRESSED){
    305a:	8c a1       	ldd	r24, Y+36	; 0x24
    305c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    305e:	0e 94 9b 09 	call	0x1336	; 0x1336 <GPIO_ReadPinValue>
    3062:	88 23       	and	r24, r24
    3064:	09 f0       	breq	.+2      	; 0x3068 <KEYPAD_GetPressedKeyValue+0x62>
    3066:	93 c0       	rjmp	.+294    	; 0x318e <KEYPAD_GetPressedKeyValue+0x188>
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	a0 ea       	ldi	r26, 0xA0	; 160
    306e:	b1 e4       	ldi	r27, 0x41	; 65
    3070:	89 8f       	std	Y+25, r24	; 0x19
    3072:	9a 8f       	std	Y+26, r25	; 0x1a
    3074:	ab 8f       	std	Y+27, r26	; 0x1b
    3076:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3078:	69 8d       	ldd	r22, Y+25	; 0x19
    307a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    307c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    307e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	4a e7       	ldi	r20, 0x7A	; 122
    3086:	53 e4       	ldi	r21, 0x43	; 67
    3088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	8d 8b       	std	Y+21, r24	; 0x15
    3092:	9e 8b       	std	Y+22, r25	; 0x16
    3094:	af 8b       	std	Y+23, r26	; 0x17
    3096:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3098:	6d 89       	ldd	r22, Y+21	; 0x15
    309a:	7e 89       	ldd	r23, Y+22	; 0x16
    309c:	8f 89       	ldd	r24, Y+23	; 0x17
    309e:	98 8d       	ldd	r25, Y+24	; 0x18
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	40 e8       	ldi	r20, 0x80	; 128
    30a6:	5f e3       	ldi	r21, 0x3F	; 63
    30a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30ac:	88 23       	and	r24, r24
    30ae:	2c f4       	brge	.+10     	; 0x30ba <KEYPAD_GetPressedKeyValue+0xb4>
		__ticks = 1;
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	9c 8b       	std	Y+20, r25	; 0x14
    30b6:	8b 8b       	std	Y+19, r24	; 0x13
    30b8:	3f c0       	rjmp	.+126    	; 0x3138 <KEYPAD_GetPressedKeyValue+0x132>
	else if (__tmp > 65535)
    30ba:	6d 89       	ldd	r22, Y+21	; 0x15
    30bc:	7e 89       	ldd	r23, Y+22	; 0x16
    30be:	8f 89       	ldd	r24, Y+23	; 0x17
    30c0:	98 8d       	ldd	r25, Y+24	; 0x18
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	3f ef       	ldi	r19, 0xFF	; 255
    30c6:	4f e7       	ldi	r20, 0x7F	; 127
    30c8:	57 e4       	ldi	r21, 0x47	; 71
    30ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30ce:	18 16       	cp	r1, r24
    30d0:	4c f5       	brge	.+82     	; 0x3124 <KEYPAD_GetPressedKeyValue+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30d2:	69 8d       	ldd	r22, Y+25	; 0x19
    30d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	40 e2       	ldi	r20, 0x20	; 32
    30e0:	51 e4       	ldi	r21, 0x41	; 65
    30e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	bc 01       	movw	r22, r24
    30ec:	cd 01       	movw	r24, r26
    30ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	9c 8b       	std	Y+20, r25	; 0x14
    30f8:	8b 8b       	std	Y+19, r24	; 0x13
    30fa:	0f c0       	rjmp	.+30     	; 0x311a <KEYPAD_GetPressedKeyValue+0x114>
    30fc:	89 e1       	ldi	r24, 0x19	; 25
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	9a 8b       	std	Y+18, r25	; 0x12
    3102:	89 8b       	std	Y+17, r24	; 0x11
    3104:	89 89       	ldd	r24, Y+17	; 0x11
    3106:	9a 89       	ldd	r25, Y+18	; 0x12
    3108:	01 97       	sbiw	r24, 0x01	; 1
    310a:	f1 f7       	brne	.-4      	; 0x3108 <KEYPAD_GetPressedKeyValue+0x102>
    310c:	9a 8b       	std	Y+18, r25	; 0x12
    310e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3110:	8b 89       	ldd	r24, Y+19	; 0x13
    3112:	9c 89       	ldd	r25, Y+20	; 0x14
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	9c 8b       	std	Y+20, r25	; 0x14
    3118:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    311a:	8b 89       	ldd	r24, Y+19	; 0x13
    311c:	9c 89       	ldd	r25, Y+20	; 0x14
    311e:	00 97       	sbiw	r24, 0x00	; 0
    3120:	69 f7       	brne	.-38     	; 0x30fc <KEYPAD_GetPressedKeyValue+0xf6>
    3122:	14 c0       	rjmp	.+40     	; 0x314c <KEYPAD_GetPressedKeyValue+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3124:	6d 89       	ldd	r22, Y+21	; 0x15
    3126:	7e 89       	ldd	r23, Y+22	; 0x16
    3128:	8f 89       	ldd	r24, Y+23	; 0x17
    312a:	98 8d       	ldd	r25, Y+24	; 0x18
    312c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3130:	dc 01       	movw	r26, r24
    3132:	cb 01       	movw	r24, r22
    3134:	9c 8b       	std	Y+20, r25	; 0x14
    3136:	8b 8b       	std	Y+19, r24	; 0x13
    3138:	8b 89       	ldd	r24, Y+19	; 0x13
    313a:	9c 89       	ldd	r25, Y+20	; 0x14
    313c:	98 8b       	std	Y+16, r25	; 0x10
    313e:	8f 87       	std	Y+15, r24	; 0x0f
    3140:	8f 85       	ldd	r24, Y+15	; 0x0f
    3142:	98 89       	ldd	r25, Y+16	; 0x10
    3144:	01 97       	sbiw	r24, 0x01	; 1
    3146:	f1 f7       	brne	.-4      	; 0x3144 <KEYPAD_GetPressedKeyValue+0x13e>
    3148:	98 8b       	std	Y+16, r25	; 0x10
    314a:	8f 87       	std	Y+15, r24	; 0x0f
                        _delay_ms(DEBOUNCING_TIME);
                        // Check if the button is still pressed after debounce
                        if( GPIO_ReadPinValue(Port_id, Row) == KEY_BUTTON_PRESSED ){
    314c:	8c a1       	ldd	r24, Y+36	; 0x24
    314e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3150:	0e 94 9b 09 	call	0x1336	; 0x1336 <GPIO_ReadPinValue>
    3154:	88 23       	and	r24, r24
    3156:	d9 f4       	brne	.+54     	; 0x318e <KEYPAD_GetPressedKeyValue+0x188>
                            KeyVal = KEYPAD_MAP[Row][Col];
    3158:	8f 8d       	ldd	r24, Y+31	; 0x1f
    315a:	48 2f       	mov	r20, r24
    315c:	50 e0       	ldi	r21, 0x00	; 0
    315e:	88 a1       	ldd	r24, Y+32	; 0x20
    3160:	28 2f       	mov	r18, r24
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	ca 01       	movw	r24, r20
    3166:	88 0f       	add	r24, r24
    3168:	99 1f       	adc	r25, r25
    316a:	88 0f       	add	r24, r24
    316c:	99 1f       	adc	r25, r25
    316e:	82 0f       	add	r24, r18
    3170:	93 1f       	adc	r25, r19
    3172:	fc 01       	movw	r30, r24
    3174:	ef 5c       	subi	r30, 0xCF	; 207
    3176:	fe 4f       	sbci	r31, 0xFE	; 254
    3178:	80 81       	ld	r24, Z
    317a:	8a a3       	std	Y+34, r24	; 0x22
                            // Wait until the button is released
                            while( GPIO_ReadPinValue(Port_id, Row) == KEY_BUTTON_PRESSED );
    317c:	8c a1       	ldd	r24, Y+36	; 0x24
    317e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3180:	0e 94 9b 09 	call	0x1336	; 0x1336 <GPIO_ReadPinValue>
    3184:	88 23       	and	r24, r24
    3186:	d1 f3       	breq	.-12     	; 0x317c <KEYPAD_GetPressedKeyValue+0x176>
                            flag = 1;
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	89 a3       	std	Y+33, r24	; 0x21
    318c:	07 c0       	rjmp	.+14     	; 0x319c <KEYPAD_GetPressedKeyValue+0x196>
            // Loop through the columns
            for( Col = 0 ; Col < KEYPAD_COLS ; ++Col ){
                // Set the current column to low
                GPIO_WritePinValue(Port_id, Col + KEYPAD_COLS, LOGIC_LOW);
                // Loop through the rows
                for( Row = 0 ; Row < KEYPAD_ROWS ; ++Row ){
    318e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3190:	8f 5f       	subi	r24, 0xFF	; 255
    3192:	8f 8f       	std	Y+31, r24	; 0x1f
    3194:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3196:	84 30       	cpi	r24, 0x04	; 4
    3198:	08 f4       	brcc	.+2      	; 0x319c <KEYPAD_GetPressedKeyValue+0x196>
    319a:	5f cf       	rjmp	.-322    	; 0x305a <KEYPAD_GetPressedKeyValue+0x54>
                            break;
                        }
                    }
                }
                // Set the current column back to high
                GPIO_WritePinValue(Port_id, Col + KEYPAD_COLS, LOGIC_HIGH);
    319c:	88 a1       	ldd	r24, Y+32	; 0x20
    319e:	98 2f       	mov	r25, r24
    31a0:	9c 5f       	subi	r25, 0xFC	; 252
    31a2:	8c a1       	ldd	r24, Y+36	; 0x24
    31a4:	69 2f       	mov	r22, r25
    31a6:	41 e0       	ldi	r20, 0x01	; 1
    31a8:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
                if( flag == LOGIC_HIGH ) {
    31ac:	89 a1       	ldd	r24, Y+33	; 0x21
    31ae:	81 30       	cpi	r24, 0x01	; 1
    31b0:	09 f4       	brne	.+2      	; 0x31b4 <KEYPAD_GetPressedKeyValue+0x1ae>
    31b2:	cf c0       	rjmp	.+414    	; 0x3352 <KEYPAD_GetPressedKeyValue+0x34c>
    if(PortMode == HALF_INPUT_OUTPUT || PortMode == HALF_OUTPUT_INPUT){
    	// HALF_INPUT_OUTPUT Mode
        if( PortMode == HALF_INPUT_OUTPUT ){
        	uint8 Col = 0, Row = 0;
            // Loop through the columns
            for( Col = 0 ; Col < KEYPAD_COLS ; ++Col ){
    31b4:	88 a1       	ldd	r24, Y+32	; 0x20
    31b6:	8f 5f       	subi	r24, 0xFF	; 255
    31b8:	88 a3       	std	Y+32, r24	; 0x20
    31ba:	88 a1       	ldd	r24, Y+32	; 0x20
    31bc:	84 30       	cpi	r24, 0x04	; 4
    31be:	08 f4       	brcc	.+2      	; 0x31c2 <KEYPAD_GetPressedKeyValue+0x1bc>
    31c0:	42 cf       	rjmp	.-380    	; 0x3046 <KEYPAD_GetPressedKeyValue+0x40>
    31c2:	c7 c0       	rjmp	.+398    	; 0x3352 <KEYPAD_GetPressedKeyValue+0x34c>
                }
            }
        }
        // HALF_OUTPUT_INPUT Mode
        else{
            uint8 Row = 0, Col = 0;
    31c4:	1e 8e       	std	Y+30, r1	; 0x1e
    31c6:	1d 8e       	std	Y+29, r1	; 0x1d
            // Loop through the rows
            for( Row = 0 ; Row < KEYPAD_ROWS ; ++Row ){
    31c8:	1e 8e       	std	Y+30, r1	; 0x1e
    31ca:	bc c0       	rjmp	.+376    	; 0x3344 <KEYPAD_GetPressedKeyValue+0x33e>
                // Set the current row to low
                GPIO_WritePinValue( Port_id , Row , LOGIC_LOW );
    31cc:	8c a1       	ldd	r24, Y+36	; 0x24
    31ce:	6e 8d       	ldd	r22, Y+30	; 0x1e
    31d0:	40 e0       	ldi	r20, 0x00	; 0
    31d2:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
                // Loop through the columns
                for( Col = 0 ; Col < KEYPAD_COLS ; ++Col ){
    31d6:	1d 8e       	std	Y+29, r1	; 0x1d
    31d8:	a6 c0       	rjmp	.+332    	; 0x3326 <KEYPAD_GetPressedKeyValue+0x320>
                    if( GPIO_ReadPinValue(Port_id, Col + KEYPAD_COLS) == KEY_BUTTON_PRESSED){
    31da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31dc:	98 2f       	mov	r25, r24
    31de:	9c 5f       	subi	r25, 0xFC	; 252
    31e0:	8c a1       	ldd	r24, Y+36	; 0x24
    31e2:	69 2f       	mov	r22, r25
    31e4:	0e 94 9b 09 	call	0x1336	; 0x1336 <GPIO_ReadPinValue>
    31e8:	88 23       	and	r24, r24
    31ea:	09 f0       	breq	.+2      	; 0x31ee <KEYPAD_GetPressedKeyValue+0x1e8>
    31ec:	99 c0       	rjmp	.+306    	; 0x3320 <KEYPAD_GetPressedKeyValue+0x31a>
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	a0 ea       	ldi	r26, 0xA0	; 160
    31f4:	b1 e4       	ldi	r27, 0x41	; 65
    31f6:	8b 87       	std	Y+11, r24	; 0x0b
    31f8:	9c 87       	std	Y+12, r25	; 0x0c
    31fa:	ad 87       	std	Y+13, r26	; 0x0d
    31fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3200:	7c 85       	ldd	r23, Y+12	; 0x0c
    3202:	8d 85       	ldd	r24, Y+13	; 0x0d
    3204:	9e 85       	ldd	r25, Y+14	; 0x0e
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	4a e7       	ldi	r20, 0x7A	; 122
    320c:	53 e4       	ldi	r21, 0x43	; 67
    320e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3212:	dc 01       	movw	r26, r24
    3214:	cb 01       	movw	r24, r22
    3216:	8f 83       	std	Y+7, r24	; 0x07
    3218:	98 87       	std	Y+8, r25	; 0x08
    321a:	a9 87       	std	Y+9, r26	; 0x09
    321c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    321e:	6f 81       	ldd	r22, Y+7	; 0x07
    3220:	78 85       	ldd	r23, Y+8	; 0x08
    3222:	89 85       	ldd	r24, Y+9	; 0x09
    3224:	9a 85       	ldd	r25, Y+10	; 0x0a
    3226:	20 e0       	ldi	r18, 0x00	; 0
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	40 e8       	ldi	r20, 0x80	; 128
    322c:	5f e3       	ldi	r21, 0x3F	; 63
    322e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3232:	88 23       	and	r24, r24
    3234:	2c f4       	brge	.+10     	; 0x3240 <KEYPAD_GetPressedKeyValue+0x23a>
		__ticks = 1;
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	9e 83       	std	Y+6, r25	; 0x06
    323c:	8d 83       	std	Y+5, r24	; 0x05
    323e:	3f c0       	rjmp	.+126    	; 0x32be <KEYPAD_GetPressedKeyValue+0x2b8>
	else if (__tmp > 65535)
    3240:	6f 81       	ldd	r22, Y+7	; 0x07
    3242:	78 85       	ldd	r23, Y+8	; 0x08
    3244:	89 85       	ldd	r24, Y+9	; 0x09
    3246:	9a 85       	ldd	r25, Y+10	; 0x0a
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	3f ef       	ldi	r19, 0xFF	; 255
    324c:	4f e7       	ldi	r20, 0x7F	; 127
    324e:	57 e4       	ldi	r21, 0x47	; 71
    3250:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3254:	18 16       	cp	r1, r24
    3256:	4c f5       	brge	.+82     	; 0x32aa <KEYPAD_GetPressedKeyValue+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3258:	6b 85       	ldd	r22, Y+11	; 0x0b
    325a:	7c 85       	ldd	r23, Y+12	; 0x0c
    325c:	8d 85       	ldd	r24, Y+13	; 0x0d
    325e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	40 e2       	ldi	r20, 0x20	; 32
    3266:	51 e4       	ldi	r21, 0x41	; 65
    3268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	bc 01       	movw	r22, r24
    3272:	cd 01       	movw	r24, r26
    3274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3278:	dc 01       	movw	r26, r24
    327a:	cb 01       	movw	r24, r22
    327c:	9e 83       	std	Y+6, r25	; 0x06
    327e:	8d 83       	std	Y+5, r24	; 0x05
    3280:	0f c0       	rjmp	.+30     	; 0x32a0 <KEYPAD_GetPressedKeyValue+0x29a>
    3282:	89 e1       	ldi	r24, 0x19	; 25
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	9c 83       	std	Y+4, r25	; 0x04
    3288:	8b 83       	std	Y+3, r24	; 0x03
    328a:	8b 81       	ldd	r24, Y+3	; 0x03
    328c:	9c 81       	ldd	r25, Y+4	; 0x04
    328e:	01 97       	sbiw	r24, 0x01	; 1
    3290:	f1 f7       	brne	.-4      	; 0x328e <KEYPAD_GetPressedKeyValue+0x288>
    3292:	9c 83       	std	Y+4, r25	; 0x04
    3294:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3296:	8d 81       	ldd	r24, Y+5	; 0x05
    3298:	9e 81       	ldd	r25, Y+6	; 0x06
    329a:	01 97       	sbiw	r24, 0x01	; 1
    329c:	9e 83       	std	Y+6, r25	; 0x06
    329e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a0:	8d 81       	ldd	r24, Y+5	; 0x05
    32a2:	9e 81       	ldd	r25, Y+6	; 0x06
    32a4:	00 97       	sbiw	r24, 0x00	; 0
    32a6:	69 f7       	brne	.-38     	; 0x3282 <KEYPAD_GetPressedKeyValue+0x27c>
    32a8:	14 c0       	rjmp	.+40     	; 0x32d2 <KEYPAD_GetPressedKeyValue+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32aa:	6f 81       	ldd	r22, Y+7	; 0x07
    32ac:	78 85       	ldd	r23, Y+8	; 0x08
    32ae:	89 85       	ldd	r24, Y+9	; 0x09
    32b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b6:	dc 01       	movw	r26, r24
    32b8:	cb 01       	movw	r24, r22
    32ba:	9e 83       	std	Y+6, r25	; 0x06
    32bc:	8d 83       	std	Y+5, r24	; 0x05
    32be:	8d 81       	ldd	r24, Y+5	; 0x05
    32c0:	9e 81       	ldd	r25, Y+6	; 0x06
    32c2:	9a 83       	std	Y+2, r25	; 0x02
    32c4:	89 83       	std	Y+1, r24	; 0x01
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ca:	01 97       	sbiw	r24, 0x01	; 1
    32cc:	f1 f7       	brne	.-4      	; 0x32ca <KEYPAD_GetPressedKeyValue+0x2c4>
    32ce:	9a 83       	std	Y+2, r25	; 0x02
    32d0:	89 83       	std	Y+1, r24	; 0x01
                        _delay_ms(20);
                        // Check if the button is still pressed after debounce
                        if( GPIO_ReadPinValue(Port_id, Col + KEYPAD_COLS) == KEY_BUTTON_PRESSED ){
    32d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32d4:	98 2f       	mov	r25, r24
    32d6:	9c 5f       	subi	r25, 0xFC	; 252
    32d8:	8c a1       	ldd	r24, Y+36	; 0x24
    32da:	69 2f       	mov	r22, r25
    32dc:	0e 94 9b 09 	call	0x1336	; 0x1336 <GPIO_ReadPinValue>
    32e0:	88 23       	and	r24, r24
    32e2:	f1 f4       	brne	.+60     	; 0x3320 <KEYPAD_GetPressedKeyValue+0x31a>
                            KeyVal = KEYPAD_MAP[Row][Col];
    32e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32e6:	48 2f       	mov	r20, r24
    32e8:	50 e0       	ldi	r21, 0x00	; 0
    32ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32ec:	28 2f       	mov	r18, r24
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	ca 01       	movw	r24, r20
    32f2:	88 0f       	add	r24, r24
    32f4:	99 1f       	adc	r25, r25
    32f6:	88 0f       	add	r24, r24
    32f8:	99 1f       	adc	r25, r25
    32fa:	82 0f       	add	r24, r18
    32fc:	93 1f       	adc	r25, r19
    32fe:	fc 01       	movw	r30, r24
    3300:	ef 5c       	subi	r30, 0xCF	; 207
    3302:	fe 4f       	sbci	r31, 0xFE	; 254
    3304:	80 81       	ld	r24, Z
    3306:	8a a3       	std	Y+34, r24	; 0x22
                            // Wait until the button is released
                            while( GPIO_ReadPinValue(Port_id, Col + KEYPAD_COLS) == KEY_BUTTON_PRESSED );
    3308:	8d 8d       	ldd	r24, Y+29	; 0x1d
    330a:	98 2f       	mov	r25, r24
    330c:	9c 5f       	subi	r25, 0xFC	; 252
    330e:	8c a1       	ldd	r24, Y+36	; 0x24
    3310:	69 2f       	mov	r22, r25
    3312:	0e 94 9b 09 	call	0x1336	; 0x1336 <GPIO_ReadPinValue>
    3316:	88 23       	and	r24, r24
    3318:	b9 f3       	breq	.-18     	; 0x3308 <KEYPAD_GetPressedKeyValue+0x302>
                            flag = 1;
    331a:	81 e0       	ldi	r24, 0x01	; 1
    331c:	89 a3       	std	Y+33, r24	; 0x21
    331e:	07 c0       	rjmp	.+14     	; 0x332e <KEYPAD_GetPressedKeyValue+0x328>
            // Loop through the rows
            for( Row = 0 ; Row < KEYPAD_ROWS ; ++Row ){
                // Set the current row to low
                GPIO_WritePinValue( Port_id , Row , LOGIC_LOW );
                // Loop through the columns
                for( Col = 0 ; Col < KEYPAD_COLS ; ++Col ){
    3320:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3322:	8f 5f       	subi	r24, 0xFF	; 255
    3324:	8d 8f       	std	Y+29, r24	; 0x1d
    3326:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3328:	84 30       	cpi	r24, 0x04	; 4
    332a:	08 f4       	brcc	.+2      	; 0x332e <KEYPAD_GetPressedKeyValue+0x328>
    332c:	56 cf       	rjmp	.-340    	; 0x31da <KEYPAD_GetPressedKeyValue+0x1d4>
                            break;
                        }
                    }
                }
                // Set the current row back to high
                GPIO_WritePinValue(Port_id, Row, LOGIC_HIGH);
    332e:	8c a1       	ldd	r24, Y+36	; 0x24
    3330:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3332:	41 e0       	ldi	r20, 0x01	; 1
    3334:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
                if (flag == LOGIC_HIGH) {
    3338:	89 a1       	ldd	r24, Y+33	; 0x21
    333a:	81 30       	cpi	r24, 0x01	; 1
    333c:	51 f0       	breq	.+20     	; 0x3352 <KEYPAD_GetPressedKeyValue+0x34c>
        }
        // HALF_OUTPUT_INPUT Mode
        else{
            uint8 Row = 0, Col = 0;
            // Loop through the rows
            for( Row = 0 ; Row < KEYPAD_ROWS ; ++Row ){
    333e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3340:	8f 5f       	subi	r24, 0xFF	; 255
    3342:	8e 8f       	std	Y+30, r24	; 0x1e
    3344:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3346:	84 30       	cpi	r24, 0x04	; 4
    3348:	08 f4       	brcc	.+2      	; 0x334c <KEYPAD_GetPressedKeyValue+0x346>
    334a:	40 cf       	rjmp	.-384    	; 0x31cc <KEYPAD_GetPressedKeyValue+0x1c6>
    334c:	02 c0       	rjmp	.+4      	; 0x3352 <KEYPAD_GetPressedKeyValue+0x34c>
        }
    }
    else{
        // PortMode is neither HALF_INPUT_OUTPUT nor HALF_OUTPUT_INPUT
        // Nothing happened, return 0xff
        KeyVal = 0xff;
    334e:	8f ef       	ldi	r24, 0xFF	; 255
    3350:	8a a3       	std	Y+34, r24	; 0x22
    }
    return KeyVal;
    3352:	8a a1       	ldd	r24, Y+34	; 0x22
}
    3354:	a4 96       	adiw	r28, 0x24	; 36
    3356:	0f b6       	in	r0, 0x3f	; 63
    3358:	f8 94       	cli
    335a:	de bf       	out	0x3e, r29	; 62
    335c:	0f be       	out	0x3f, r0	; 63
    335e:	cd bf       	out	0x3d, r28	; 61
    3360:	cf 91       	pop	r28
    3362:	df 91       	pop	r29
    3364:	08 95       	ret

00003366 <CalculatorL2_Run>:
	 * Keypad_Port_id : Keypad Port .
	 * LCD_Mode_id : LCD Connection Mode .
	 * Keypad_Mode_id : Keypad Connection Mode .
 * Return Value: no return ( void ) .
 */
void CalculatorL2_Run(uint8 LCD_DataPort_id, uint8 LCD_ControlPort_id, uint8 Keypad_Port_id, uint8 LCD_Mode_id, uint8 Keypad_Mode_id) {
    3366:	ef 92       	push	r14
    3368:	ff 92       	push	r15
    336a:	0f 93       	push	r16
    336c:	1f 93       	push	r17
    336e:	df 93       	push	r29
    3370:	cf 93       	push	r28
    3372:	cd b7       	in	r28, 0x3d	; 61
    3374:	de b7       	in	r29, 0x3e	; 62
    3376:	c7 56       	subi	r28, 0x67	; 103
    3378:	d0 40       	sbci	r29, 0x00	; 0
    337a:	0f b6       	in	r0, 0x3f	; 63
    337c:	f8 94       	cli
    337e:	de bf       	out	0x3e, r29	; 62
    3380:	0f be       	out	0x3f, r0	; 63
    3382:	cd bf       	out	0x3d, r28	; 61
    3384:	fe 01       	movw	r30, r28
    3386:	ed 59       	subi	r30, 0x9D	; 157
    3388:	ff 4f       	sbci	r31, 0xFF	; 255
    338a:	80 83       	st	Z, r24
    338c:	fe 01       	movw	r30, r28
    338e:	ec 59       	subi	r30, 0x9C	; 156
    3390:	ff 4f       	sbci	r31, 0xFF	; 255
    3392:	60 83       	st	Z, r22
    3394:	fe 01       	movw	r30, r28
    3396:	eb 59       	subi	r30, 0x9B	; 155
    3398:	ff 4f       	sbci	r31, 0xFF	; 255
    339a:	40 83       	st	Z, r20
    339c:	fe 01       	movw	r30, r28
    339e:	ea 59       	subi	r30, 0x9A	; 154
    33a0:	ff 4f       	sbci	r31, 0xFF	; 255
    33a2:	20 83       	st	Z, r18
    33a4:	fe 01       	movw	r30, r28
    33a6:	e9 59       	subi	r30, 0x99	; 153
    33a8:	ff 4f       	sbci	r31, 0xFF	; 255
    33aa:	00 83       	st	Z, r16

    // Initialize global variables with provided values.
    LCD_DataPort = LCD_DataPort_id;
    33ac:	fe 01       	movw	r30, r28
    33ae:	ed 59       	subi	r30, 0x9D	; 157
    33b0:	ff 4f       	sbci	r31, 0xFF	; 255
    33b2:	80 81       	ld	r24, Z
    33b4:	80 93 4c 01 	sts	0x014C, r24
    LCD_ControlPort = LCD_ControlPort_id;
    33b8:	fe 01       	movw	r30, r28
    33ba:	ec 59       	subi	r30, 0x9C	; 156
    33bc:	ff 4f       	sbci	r31, 0xFF	; 255
    33be:	80 81       	ld	r24, Z
    33c0:	80 93 4d 01 	sts	0x014D, r24
    Keypad_Port = Keypad_Port_id;
    33c4:	fe 01       	movw	r30, r28
    33c6:	eb 59       	subi	r30, 0x9B	; 155
    33c8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ca:	80 81       	ld	r24, Z
    33cc:	80 93 4e 01 	sts	0x014E, r24
    LCD_Mode = LCD_Mode_id;
    33d0:	fe 01       	movw	r30, r28
    33d2:	ea 59       	subi	r30, 0x9A	; 154
    33d4:	ff 4f       	sbci	r31, 0xFF	; 255
    33d6:	80 81       	ld	r24, Z
    33d8:	80 93 4f 01 	sts	0x014F, r24
    Keypad_Mode = Keypad_Mode_id;
    33dc:	fe 01       	movw	r30, r28
    33de:	e9 59       	subi	r30, 0x99	; 153
    33e0:	ff 4f       	sbci	r31, 0xFF	; 255
    33e2:	80 81       	ld	r24, Z
    33e4:	80 93 50 01 	sts	0x0150, r24

    // Initialize the LCD display and keypad.
    LCD_LcdInit(LCD_DataPort, LCD_ControlPort, MODE_8_BIT);
    33e8:	80 91 4c 01 	lds	r24, 0x014C
    33ec:	90 91 4d 01 	lds	r25, 0x014D
    33f0:	69 2f       	mov	r22, r25
    33f2:	41 e0       	ldi	r20, 0x01	; 1
    33f4:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_LcdInit>
    KEYPAD_KeypadInit(Keypad_Port, HALF_INPUT_OUTPUT);
    33f8:	80 91 4e 01 	lds	r24, 0x014E
    33fc:	60 ef       	ldi	r22, 0xF0	; 240
    33fe:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <KEYPAD_KeypadInit>

    // Display an introductory message and wait for a key press to start.
    CalculatorL2_StartStatement();
    3402:	0e 94 48 1c 	call	0x3890	; 0x3890 <CalculatorL2_StartStatement>

    // Main operation loop.
	uint8 disClick = 0 ;
    3406:	1e 8a       	std	Y+22, r1	; 0x16
	sint32 runningResult = 0 ;
    3408:	1a 8a       	std	Y+18, r1	; 0x12
    340a:	1b 8a       	std	Y+19, r1	; 0x13
    340c:	1c 8a       	std	Y+20, r1	; 0x14
    340e:	1d 8a       	std	Y+21, r1	; 0x15
	char OperationStatement[16], index = 0;
    3410:	19 8a       	std	Y+17, r1	; 0x11
	uint8 KeyValue = 0xff ;
    3412:	8f ef       	ldi	r24, 0xFF	; 255
    3414:	88 8b       	std	Y+16, r24	; 0x10
	uint8 resultStr[10];
	uint8 opAgain;
	sint32 result;
	uint8 zeroDivflag = 0 ;
    3416:	1a 86       	std	Y+10, r1	; 0x0a
	uint8 errExp = 0 ;
    3418:	19 86       	std	Y+9, r1	; 0x09
    Operation :
	resultStr[0] = '0';
    341a:	80 e3       	ldi	r24, 0x30	; 48
    341c:	8f a3       	std	Y+39, r24	; 0x27
	resultStr[1] = '\0';
    341e:	18 a6       	std	Y+40, r1	; 0x28
	opAgain = '+' ;
    3420:	8b e2       	ldi	r24, 0x2B	; 43
    3422:	8f 87       	std	Y+15, r24	; 0x0f
	disClick = 0 ;
    3424:	1e 8a       	std	Y+22, r1	; 0x16
	zeroDivflag = 0 ;
    3426:	1a 86       	std	Y+10, r1	; 0x0a
	errExp = 0 ;
    3428:	19 86       	std	Y+9, r1	; 0x09
    while (1) {
        while (1) {
            KeyValue = KEYPAD_GetPressedKeyValue(Keypad_Port);
    342a:	80 91 4e 01 	lds	r24, 0x014E
    342e:	0e 94 03 18 	call	0x3006	; 0x3006 <KEYPAD_GetPressedKeyValue>
    3432:	88 8b       	std	Y+16, r24	; 0x10
            if (KeyValue == 0xff) {
    3434:	88 89       	ldd	r24, Y+16	; 0x10
    3436:	8f 3f       	cpi	r24, 0xFF	; 255
    3438:	c1 f3       	breq	.-16     	; 0x342a <CalculatorL2_Run+0xc4>
                continue;
            } else if (KeyValue == 'c') {
    343a:	88 89       	ldd	r24, Y+16	; 0x10
    343c:	83 36       	cpi	r24, 0x63	; 99
    343e:	31 f4       	brne	.+12     	; 0x344c <CalculatorL2_Run+0xe6>
                // Clear the LCD and start over if 'c' is pressed.
                LCD_ClearLCD();
    3440:	0e 94 84 17 	call	0x2f08	; 0x2f08 <LCD_ClearLCD>
                disClick = 0 ;
    3444:	1e 8a       	std	Y+22, r1	; 0x16
                index = 0 ;
    3446:	19 8a       	std	Y+17, r1	; 0x11
                OperationStatement[0] = '\0' ;
    3448:	1f 8a       	std	Y+23, r1	; 0x17
    344a:	e7 cf       	rjmp	.-50     	; 0x341a <CalculatorL2_Run+0xb4>
                goto Operation ;
            } else if ( KeyValue == '=' && disClick == 0 ) {
    344c:	88 89       	ldd	r24, Y+16	; 0x10
    344e:	8d 33       	cpi	r24, 0x3D	; 61
    3450:	09 f0       	breq	.+2      	; 0x3454 <CalculatorL2_Run+0xee>
    3452:	96 c1       	rjmp	.+812    	; 0x3780 <CalculatorL2_Run+0x41a>
    3454:	8e 89       	ldd	r24, Y+22	; 0x16
    3456:	88 23       	and	r24, r24
    3458:	09 f0       	breq	.+2      	; 0x345c <CalculatorL2_Run+0xf6>
    345a:	92 c1       	rjmp	.+804    	; 0x3780 <CalculatorL2_Run+0x41a>
            	OperationStatement[index] = '\0';
    345c:	89 89       	ldd	r24, Y+17	; 0x11
    345e:	28 2f       	mov	r18, r24
    3460:	30 e0       	ldi	r19, 0x00	; 0
    3462:	ce 01       	movw	r24, r28
    3464:	47 96       	adiw	r24, 0x17	; 23
    3466:	fc 01       	movw	r30, r24
    3468:	e2 0f       	add	r30, r18
    346a:	f3 1f       	adc	r31, r19
    346c:	10 82       	st	Z, r1
            	uint8 newExp[40];
            	for( int i = 0 ; i < strlen(resultStr) ; ++i ){
    346e:	18 86       	std	Y+8, r1	; 0x08
    3470:	1f 82       	std	Y+7, r1	; 0x07
    3472:	15 c0       	rjmp	.+42     	; 0x349e <CalculatorL2_Run+0x138>
            		newExp[i] = resultStr[i];
    3474:	4f 81       	ldd	r20, Y+7	; 0x07
    3476:	58 85       	ldd	r21, Y+8	; 0x08
    3478:	2f 81       	ldd	r18, Y+7	; 0x07
    347a:	38 85       	ldd	r19, Y+8	; 0x08
    347c:	ce 01       	movw	r24, r28
    347e:	87 96       	adiw	r24, 0x27	; 39
    3480:	fc 01       	movw	r30, r24
    3482:	e2 0f       	add	r30, r18
    3484:	f3 1f       	adc	r31, r19
    3486:	20 81       	ld	r18, Z
    3488:	ce 01       	movw	r24, r28
    348a:	cb 96       	adiw	r24, 0x3b	; 59
    348c:	fc 01       	movw	r30, r24
    348e:	e4 0f       	add	r30, r20
    3490:	f5 1f       	adc	r31, r21
    3492:	20 83       	st	Z, r18
                OperationStatement[0] = '\0' ;
                goto Operation ;
            } else if ( KeyValue == '=' && disClick == 0 ) {
            	OperationStatement[index] = '\0';
            	uint8 newExp[40];
            	for( int i = 0 ; i < strlen(resultStr) ; ++i ){
    3494:	8f 81       	ldd	r24, Y+7	; 0x07
    3496:	98 85       	ldd	r25, Y+8	; 0x08
    3498:	01 96       	adiw	r24, 0x01	; 1
    349a:	98 87       	std	Y+8, r25	; 0x08
    349c:	8f 83       	std	Y+7, r24	; 0x07
    349e:	0f 81       	ldd	r16, Y+7	; 0x07
    34a0:	18 85       	ldd	r17, Y+8	; 0x08
    34a2:	ce 01       	movw	r24, r28
    34a4:	87 96       	adiw	r24, 0x27	; 39
    34a6:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <strlen>
    34aa:	08 17       	cp	r16, r24
    34ac:	19 07       	cpc	r17, r25
    34ae:	10 f3       	brcs	.-60     	; 0x3474 <CalculatorL2_Run+0x10e>
            		newExp[i] = resultStr[i];
            	}
            	newExp[strlen(resultStr)] = opAgain ;
    34b0:	ce 01       	movw	r24, r28
    34b2:	87 96       	adiw	r24, 0x27	; 39
    34b4:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <strlen>
    34b8:	9c 01       	movw	r18, r24
    34ba:	ce 01       	movw	r24, r28
    34bc:	cb 96       	adiw	r24, 0x3b	; 59
    34be:	fc 01       	movw	r30, r24
    34c0:	e2 0f       	add	r30, r18
    34c2:	f3 1f       	adc	r31, r19
    34c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    34c6:	80 83       	st	Z, r24
            	for( int i = strlen(resultStr)+1 ; i < (strlen(OperationStatement)+strlen(resultStr)+1) ; ++i ){
    34c8:	ce 01       	movw	r24, r28
    34ca:	87 96       	adiw	r24, 0x27	; 39
    34cc:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <strlen>
    34d0:	01 96       	adiw	r24, 0x01	; 1
    34d2:	9e 83       	std	Y+6, r25	; 0x06
    34d4:	8d 83       	std	Y+5, r24	; 0x05
    34d6:	20 c0       	rjmp	.+64     	; 0x3518 <CalculatorL2_Run+0x1b2>
            		newExp[i] = OperationStatement[i-strlen(resultStr)-1];
    34d8:	ed 80       	ldd	r14, Y+5	; 0x05
    34da:	fe 80       	ldd	r15, Y+6	; 0x06
    34dc:	0d 81       	ldd	r16, Y+5	; 0x05
    34de:	1e 81       	ldd	r17, Y+6	; 0x06
    34e0:	ce 01       	movw	r24, r28
    34e2:	87 96       	adiw	r24, 0x27	; 39
    34e4:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <strlen>
    34e8:	98 01       	movw	r18, r16
    34ea:	28 1b       	sub	r18, r24
    34ec:	39 0b       	sbc	r19, r25
    34ee:	c9 01       	movw	r24, r18
    34f0:	9c 01       	movw	r18, r24
    34f2:	21 50       	subi	r18, 0x01	; 1
    34f4:	30 40       	sbci	r19, 0x00	; 0
    34f6:	ce 01       	movw	r24, r28
    34f8:	47 96       	adiw	r24, 0x17	; 23
    34fa:	fc 01       	movw	r30, r24
    34fc:	e2 0f       	add	r30, r18
    34fe:	f3 1f       	adc	r31, r19
    3500:	20 81       	ld	r18, Z
    3502:	ce 01       	movw	r24, r28
    3504:	cb 96       	adiw	r24, 0x3b	; 59
    3506:	fc 01       	movw	r30, r24
    3508:	ee 0d       	add	r30, r14
    350a:	ff 1d       	adc	r31, r15
    350c:	20 83       	st	Z, r18
            	uint8 newExp[40];
            	for( int i = 0 ; i < strlen(resultStr) ; ++i ){
            		newExp[i] = resultStr[i];
            	}
            	newExp[strlen(resultStr)] = opAgain ;
            	for( int i = strlen(resultStr)+1 ; i < (strlen(OperationStatement)+strlen(resultStr)+1) ; ++i ){
    350e:	8d 81       	ldd	r24, Y+5	; 0x05
    3510:	9e 81       	ldd	r25, Y+6	; 0x06
    3512:	01 96       	adiw	r24, 0x01	; 1
    3514:	9e 83       	std	Y+6, r25	; 0x06
    3516:	8d 83       	std	Y+5, r24	; 0x05
    3518:	ed 80       	ldd	r14, Y+5	; 0x05
    351a:	fe 80       	ldd	r15, Y+6	; 0x06
    351c:	ce 01       	movw	r24, r28
    351e:	47 96       	adiw	r24, 0x17	; 23
    3520:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <strlen>
    3524:	8c 01       	movw	r16, r24
    3526:	ce 01       	movw	r24, r28
    3528:	87 96       	adiw	r24, 0x27	; 39
    352a:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <strlen>
    352e:	80 0f       	add	r24, r16
    3530:	91 1f       	adc	r25, r17
    3532:	01 96       	adiw	r24, 0x01	; 1
    3534:	e8 16       	cp	r14, r24
    3536:	f9 06       	cpc	r15, r25
    3538:	78 f2       	brcs	.-98     	; 0x34d8 <CalculatorL2_Run+0x172>
            		newExp[i] = OperationStatement[i-strlen(resultStr)-1];
            	}
            	newExp[(strlen(OperationStatement)+strlen(resultStr)+1)] = '\0' ;
    353a:	ce 01       	movw	r24, r28
    353c:	47 96       	adiw	r24, 0x17	; 23
    353e:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <strlen>
    3542:	8c 01       	movw	r16, r24
    3544:	ce 01       	movw	r24, r28
    3546:	87 96       	adiw	r24, 0x27	; 39
    3548:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <strlen>
    354c:	80 0f       	add	r24, r16
    354e:	91 1f       	adc	r25, r17
    3550:	9c 01       	movw	r18, r24
    3552:	2f 5f       	subi	r18, 0xFF	; 255
    3554:	3f 4f       	sbci	r19, 0xFF	; 255
    3556:	ce 01       	movw	r24, r28
    3558:	cb 96       	adiw	r24, 0x3b	; 59
    355a:	fc 01       	movw	r30, r24
    355c:	e2 0f       	add	r30, r18
    355e:	f3 1f       	adc	r31, r19
    3560:	10 82       	st	Z, r1

            	for( int i = 0 ; newExp[i] != '\0' ; ++i ){
    3562:	1c 82       	std	Y+4, r1	; 0x04
    3564:	1b 82       	std	Y+3, r1	; 0x03
    3566:	29 c0       	rjmp	.+82     	; 0x35ba <CalculatorL2_Run+0x254>
            		if( newExp[i] == '0' ){
    3568:	2b 81       	ldd	r18, Y+3	; 0x03
    356a:	3c 81       	ldd	r19, Y+4	; 0x04
    356c:	ce 01       	movw	r24, r28
    356e:	cb 96       	adiw	r24, 0x3b	; 59
    3570:	fc 01       	movw	r30, r24
    3572:	e2 0f       	add	r30, r18
    3574:	f3 1f       	adc	r31, r19
    3576:	80 81       	ld	r24, Z
    3578:	80 33       	cpi	r24, 0x30	; 48
    357a:	d1 f4       	brne	.+52     	; 0x35b0 <CalculatorL2_Run+0x24a>
            			if( newExp[i-1] == '/' ){
    357c:	8b 81       	ldd	r24, Y+3	; 0x03
    357e:	9c 81       	ldd	r25, Y+4	; 0x04
    3580:	9c 01       	movw	r18, r24
    3582:	21 50       	subi	r18, 0x01	; 1
    3584:	30 40       	sbci	r19, 0x00	; 0
    3586:	ce 01       	movw	r24, r28
    3588:	cb 96       	adiw	r24, 0x3b	; 59
    358a:	fc 01       	movw	r30, r24
    358c:	e2 0f       	add	r30, r18
    358e:	f3 1f       	adc	r31, r19
    3590:	80 81       	ld	r24, Z
    3592:	8f 32       	cpi	r24, 0x2F	; 47
    3594:	69 f4       	brne	.+26     	; 0x35b0 <CalculatorL2_Run+0x24a>
            				LCD_MoveCursor(2,0);
    3596:	82 e0       	ldi	r24, 0x02	; 2
    3598:	60 e0       	ldi	r22, 0x00	; 0
    359a:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_MoveCursor>
            				LCD_DisplayString("Error,Div By 0 !");
    359e:	80 e6       	ldi	r24, 0x60	; 96
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_DisplayString>
            				disClick = 1 ;
    35a6:	81 e0       	ldi	r24, 0x01	; 1
    35a8:	8e 8b       	std	Y+22, r24	; 0x16
            				zeroDivflag = 1 ;
    35aa:	81 e0       	ldi	r24, 0x01	; 1
    35ac:	8a 87       	std	Y+10, r24	; 0x0a
    35ae:	0f c0       	rjmp	.+30     	; 0x35ce <CalculatorL2_Run+0x268>
            	for( int i = strlen(resultStr)+1 ; i < (strlen(OperationStatement)+strlen(resultStr)+1) ; ++i ){
            		newExp[i] = OperationStatement[i-strlen(resultStr)-1];
            	}
            	newExp[(strlen(OperationStatement)+strlen(resultStr)+1)] = '\0' ;

            	for( int i = 0 ; newExp[i] != '\0' ; ++i ){
    35b0:	8b 81       	ldd	r24, Y+3	; 0x03
    35b2:	9c 81       	ldd	r25, Y+4	; 0x04
    35b4:	01 96       	adiw	r24, 0x01	; 1
    35b6:	9c 83       	std	Y+4, r25	; 0x04
    35b8:	8b 83       	std	Y+3, r24	; 0x03
    35ba:	2b 81       	ldd	r18, Y+3	; 0x03
    35bc:	3c 81       	ldd	r19, Y+4	; 0x04
    35be:	ce 01       	movw	r24, r28
    35c0:	cb 96       	adiw	r24, 0x3b	; 59
    35c2:	fc 01       	movw	r30, r24
    35c4:	e2 0f       	add	r30, r18
    35c6:	f3 1f       	adc	r31, r19
    35c8:	80 81       	ld	r24, Z
    35ca:	88 23       	and	r24, r24
    35cc:	69 f6       	brne	.-102    	; 0x3568 <CalculatorL2_Run+0x202>
            				zeroDivflag = 1 ;
            				break;
            			}
            		}
            	}
            	if( zeroDivflag == 1 ){
    35ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    35d0:	81 30       	cpi	r24, 0x01	; 1
    35d2:	09 f4       	brne	.+2      	; 0x35d6 <CalculatorL2_Run+0x270>
    35d4:	2a cf       	rjmp	.-428    	; 0x342a <CalculatorL2_Run+0xc4>
            		break;
            	}
            	if( (newExp[0] == '+' || newExp[0] == '*' || newExp[0] == '/') ||
    35d6:	8b ad       	ldd	r24, Y+59	; 0x3b
    35d8:	8b 32       	cpi	r24, 0x2B	; 43
    35da:	09 f4       	brne	.+2      	; 0x35de <CalculatorL2_Run+0x278>
    35dc:	58 c0       	rjmp	.+176    	; 0x368e <CalculatorL2_Run+0x328>
    35de:	8b ad       	ldd	r24, Y+59	; 0x3b
    35e0:	8a 32       	cpi	r24, 0x2A	; 42
    35e2:	09 f4       	brne	.+2      	; 0x35e6 <CalculatorL2_Run+0x280>
    35e4:	54 c0       	rjmp	.+168    	; 0x368e <CalculatorL2_Run+0x328>
    35e6:	8b ad       	ldd	r24, Y+59	; 0x3b
    35e8:	8f 32       	cpi	r24, 0x2F	; 47
    35ea:	09 f4       	brne	.+2      	; 0x35ee <CalculatorL2_Run+0x288>
    35ec:	50 c0       	rjmp	.+160    	; 0x368e <CalculatorL2_Run+0x328>
    35ee:	ce 01       	movw	r24, r28
    35f0:	47 96       	adiw	r24, 0x17	; 23
    35f2:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <strlen>
    35f6:	8c 01       	movw	r16, r24
    35f8:	ce 01       	movw	r24, r28
    35fa:	87 96       	adiw	r24, 0x27	; 39
    35fc:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <strlen>
    3600:	98 01       	movw	r18, r16
    3602:	28 0f       	add	r18, r24
    3604:	39 1f       	adc	r19, r25
    3606:	ce 01       	movw	r24, r28
    3608:	cb 96       	adiw	r24, 0x3b	; 59
    360a:	fc 01       	movw	r30, r24
    360c:	e2 0f       	add	r30, r18
    360e:	f3 1f       	adc	r31, r19
    3610:	80 81       	ld	r24, Z
    3612:	8b 32       	cpi	r24, 0x2B	; 43
    3614:	e1 f1       	breq	.+120    	; 0x368e <CalculatorL2_Run+0x328>
    3616:	ce 01       	movw	r24, r28
    3618:	47 96       	adiw	r24, 0x17	; 23
    361a:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <strlen>
    361e:	8c 01       	movw	r16, r24
    3620:	ce 01       	movw	r24, r28
    3622:	87 96       	adiw	r24, 0x27	; 39
    3624:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <strlen>
    3628:	98 01       	movw	r18, r16
    362a:	28 0f       	add	r18, r24
    362c:	39 1f       	adc	r19, r25
    362e:	ce 01       	movw	r24, r28
    3630:	cb 96       	adiw	r24, 0x3b	; 59
    3632:	fc 01       	movw	r30, r24
    3634:	e2 0f       	add	r30, r18
    3636:	f3 1f       	adc	r31, r19
    3638:	80 81       	ld	r24, Z
    363a:	8a 32       	cpi	r24, 0x2A	; 42
    363c:	41 f1       	breq	.+80     	; 0x368e <CalculatorL2_Run+0x328>
    363e:	ce 01       	movw	r24, r28
    3640:	47 96       	adiw	r24, 0x17	; 23
    3642:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <strlen>
    3646:	8c 01       	movw	r16, r24
    3648:	ce 01       	movw	r24, r28
    364a:	87 96       	adiw	r24, 0x27	; 39
    364c:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <strlen>
    3650:	98 01       	movw	r18, r16
    3652:	28 0f       	add	r18, r24
    3654:	39 1f       	adc	r19, r25
    3656:	ce 01       	movw	r24, r28
    3658:	cb 96       	adiw	r24, 0x3b	; 59
    365a:	fc 01       	movw	r30, r24
    365c:	e2 0f       	add	r30, r18
    365e:	f3 1f       	adc	r31, r19
    3660:	80 81       	ld	r24, Z
    3662:	8f 32       	cpi	r24, 0x2F	; 47
    3664:	a1 f0       	breq	.+40     	; 0x368e <CalculatorL2_Run+0x328>
    3666:	ce 01       	movw	r24, r28
    3668:	47 96       	adiw	r24, 0x17	; 23
    366a:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <strlen>
    366e:	8c 01       	movw	r16, r24
    3670:	ce 01       	movw	r24, r28
    3672:	87 96       	adiw	r24, 0x27	; 39
    3674:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <strlen>
    3678:	98 01       	movw	r18, r16
    367a:	28 0f       	add	r18, r24
    367c:	39 1f       	adc	r19, r25
    367e:	ce 01       	movw	r24, r28
    3680:	cb 96       	adiw	r24, 0x3b	; 59
    3682:	fc 01       	movw	r30, r24
    3684:	e2 0f       	add	r30, r18
    3686:	f3 1f       	adc	r31, r19
    3688:	80 81       	ld	r24, Z
    368a:	8d 32       	cpi	r24, 0x2D	; 45
    368c:	79 f4       	brne	.+30     	; 0x36ac <CalculatorL2_Run+0x346>
            			(newExp[(strlen(OperationStatement)+strlen(resultStr))] == '+' ||
						newExp[(strlen(OperationStatement)+strlen(resultStr))] == '*' ||
						newExp[(strlen(OperationStatement)+strlen(resultStr))] == '/' ||
						newExp[(strlen(OperationStatement)+strlen(resultStr))] == '-')){
            		LCD_ClearLCD();
    368e:	0e 94 84 17 	call	0x2f08	; 0x2f08 <LCD_ClearLCD>
            		LCD_MoveCursor(2,0);
    3692:	82 e0       	ldi	r24, 0x02	; 2
    3694:	60 e0       	ldi	r22, 0x00	; 0
    3696:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_MoveCursor>
            		LCD_DisplayString("Error Expression");
    369a:	81 e7       	ldi	r24, 0x71	; 113
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_DisplayString>
            		disClick = 1 ;
    36a2:	81 e0       	ldi	r24, 0x01	; 1
    36a4:	8e 8b       	std	Y+22, r24	; 0x16
            		errExp = 1 ;
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	89 87       	std	Y+9, r24	; 0x09
    36aa:	bf ce       	rjmp	.-642    	; 0x342a <CalculatorL2_Run+0xc4>
            		break;
            	}

                result = evaluateExpression(newExp);
    36ac:	ce 01       	movw	r24, r28
    36ae:	cb 96       	adiw	r24, 0x3b	; 59
    36b0:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <evaluateExpression>
    36b4:	aa 27       	eor	r26, r26
    36b6:	97 fd       	sbrc	r25, 7
    36b8:	a0 95       	com	r26
    36ba:	ba 2f       	mov	r27, r26
    36bc:	8b 87       	std	Y+11, r24	; 0x0b
    36be:	9c 87       	std	Y+12, r25	; 0x0c
    36c0:	ad 87       	std	Y+13, r26	; 0x0d
    36c2:	be 87       	std	Y+14, r27	; 0x0e
                LCD_MoveCursor(2, 0);
    36c4:	82 e0       	ldi	r24, 0x02	; 2
    36c6:	60 e0       	ldi	r22, 0x00	; 0
    36c8:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_MoveCursor>
            	LCD_DisplayString("Ans = ");
    36cc:	82 e8       	ldi	r24, 0x82	; 130
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_DisplayString>
            	if( result == 0 ){
    36d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    36d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    36d8:	ad 85       	ldd	r26, Y+13	; 0x0d
    36da:	be 85       	ldd	r27, Y+14	; 0x0e
    36dc:	00 97       	sbiw	r24, 0x00	; 0
    36de:	a1 05       	cpc	r26, r1
    36e0:	b1 05       	cpc	r27, r1
    36e2:	21 f4       	brne	.+8      	; 0x36ec <CalculatorL2_Run+0x386>
            		LCD_SendData('0');
    36e4:	80 e3       	ldi	r24, 0x30	; 48
    36e6:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_SendData>
    36ea:	08 c0       	rjmp	.+16     	; 0x36fc <CalculatorL2_Run+0x396>
            	} else {
            		LCD_DisplayNumber(result);
    36ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    36ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    36f0:	ad 85       	ldd	r26, Y+13	; 0x0d
    36f2:	be 85       	ldd	r27, Y+14	; 0x0e
    36f4:	bc 01       	movw	r22, r24
    36f6:	cd 01       	movw	r24, r26
    36f8:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_DisplayNumber>
            	}
            	char temp[10];
            	sprintf(temp,"%d",result);
    36fc:	8d b7       	in	r24, 0x3d	; 61
    36fe:	9e b7       	in	r25, 0x3e	; 62
    3700:	08 97       	sbiw	r24, 0x08	; 8
    3702:	0f b6       	in	r0, 0x3f	; 63
    3704:	f8 94       	cli
    3706:	9e bf       	out	0x3e, r25	; 62
    3708:	0f be       	out	0x3f, r0	; 63
    370a:	8d bf       	out	0x3d, r24	; 61
    370c:	ed b7       	in	r30, 0x3d	; 61
    370e:	fe b7       	in	r31, 0x3e	; 62
    3710:	31 96       	adiw	r30, 0x01	; 1
    3712:	ce 01       	movw	r24, r28
    3714:	c1 96       	adiw	r24, 0x31	; 49
    3716:	91 83       	std	Z+1, r25	; 0x01
    3718:	80 83       	st	Z, r24
    371a:	89 e8       	ldi	r24, 0x89	; 137
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	93 83       	std	Z+3, r25	; 0x03
    3720:	82 83       	std	Z+2, r24	; 0x02
    3722:	8b 85       	ldd	r24, Y+11	; 0x0b
    3724:	9c 85       	ldd	r25, Y+12	; 0x0c
    3726:	ad 85       	ldd	r26, Y+13	; 0x0d
    3728:	be 85       	ldd	r27, Y+14	; 0x0e
    372a:	84 83       	std	Z+4, r24	; 0x04
    372c:	95 83       	std	Z+5, r25	; 0x05
    372e:	a6 83       	std	Z+6, r26	; 0x06
    3730:	b7 83       	std	Z+7, r27	; 0x07
    3732:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <sprintf>
    3736:	2d b7       	in	r18, 0x3d	; 61
    3738:	3e b7       	in	r19, 0x3e	; 62
    373a:	28 5f       	subi	r18, 0xF8	; 248
    373c:	3f 4f       	sbci	r19, 0xFF	; 255
    373e:	0f b6       	in	r0, 0x3f	; 63
    3740:	f8 94       	cli
    3742:	3e bf       	out	0x3e, r19	; 62
    3744:	0f be       	out	0x3f, r0	; 63
    3746:	2d bf       	out	0x3d, r18	; 61
            	for( int i = 0 ; i < (10-strlen(temp)) ; ++i ){
    3748:	1a 82       	std	Y+2, r1	; 0x02
    374a:	19 82       	std	Y+1, r1	; 0x01
    374c:	08 c0       	rjmp	.+16     	; 0x375e <CalculatorL2_Run+0x3f8>
            		LCD_SendData(' ');
    374e:	80 e2       	ldi	r24, 0x20	; 32
    3750:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_SendData>
            	} else {
            		LCD_DisplayNumber(result);
            	}
            	char temp[10];
            	sprintf(temp,"%d",result);
            	for( int i = 0 ; i < (10-strlen(temp)) ; ++i ){
    3754:	89 81       	ldd	r24, Y+1	; 0x01
    3756:	9a 81       	ldd	r25, Y+2	; 0x02
    3758:	01 96       	adiw	r24, 0x01	; 1
    375a:	9a 83       	std	Y+2, r25	; 0x02
    375c:	89 83       	std	Y+1, r24	; 0x01
    375e:	09 81       	ldd	r16, Y+1	; 0x01
    3760:	1a 81       	ldd	r17, Y+2	; 0x02
    3762:	ce 01       	movw	r24, r28
    3764:	c1 96       	adiw	r24, 0x31	; 49
    3766:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <strlen>
    376a:	9c 01       	movw	r18, r24
    376c:	8a e0       	ldi	r24, 0x0A	; 10
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	82 1b       	sub	r24, r18
    3772:	93 0b       	sbc	r25, r19
    3774:	08 17       	cp	r16, r24
    3776:	19 07       	cpc	r17, r25
    3778:	50 f3       	brcs	.-44     	; 0x374e <CalculatorL2_Run+0x3e8>
            		LCD_SendData(' ');
            	}
                disClick = 1 ;
    377a:	81 e0       	ldi	r24, 0x01	; 1
    377c:	8e 8b       	std	Y+22, r24	; 0x16
    377e:	55 ce       	rjmp	.-854    	; 0x342a <CalculatorL2_Run+0xc4>
                break;
            } else if( disClick == 1 && (KeyValue == '+' ||KeyValue == '-' ||KeyValue == '*' ||KeyValue == '/') && zeroDivflag == 0 && errExp == 0 ){
    3780:	8e 89       	ldd	r24, Y+22	; 0x16
    3782:	81 30       	cpi	r24, 0x01	; 1
    3784:	09 f0       	breq	.+2      	; 0x3788 <CalculatorL2_Run+0x422>
    3786:	68 c0       	rjmp	.+208    	; 0x3858 <CalculatorL2_Run+0x4f2>
    3788:	88 89       	ldd	r24, Y+16	; 0x10
    378a:	8b 32       	cpi	r24, 0x2B	; 43
    378c:	51 f0       	breq	.+20     	; 0x37a2 <CalculatorL2_Run+0x43c>
    378e:	88 89       	ldd	r24, Y+16	; 0x10
    3790:	8d 32       	cpi	r24, 0x2D	; 45
    3792:	39 f0       	breq	.+14     	; 0x37a2 <CalculatorL2_Run+0x43c>
    3794:	88 89       	ldd	r24, Y+16	; 0x10
    3796:	8a 32       	cpi	r24, 0x2A	; 42
    3798:	21 f0       	breq	.+8      	; 0x37a2 <CalculatorL2_Run+0x43c>
    379a:	88 89       	ldd	r24, Y+16	; 0x10
    379c:	8f 32       	cpi	r24, 0x2F	; 47
    379e:	09 f0       	breq	.+2      	; 0x37a2 <CalculatorL2_Run+0x43c>
    37a0:	5b c0       	rjmp	.+182    	; 0x3858 <CalculatorL2_Run+0x4f2>
    37a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    37a4:	88 23       	and	r24, r24
    37a6:	09 f0       	breq	.+2      	; 0x37aa <CalculatorL2_Run+0x444>
    37a8:	57 c0       	rjmp	.+174    	; 0x3858 <CalculatorL2_Run+0x4f2>
    37aa:	89 85       	ldd	r24, Y+9	; 0x09
    37ac:	88 23       	and	r24, r24
    37ae:	09 f0       	breq	.+2      	; 0x37b2 <CalculatorL2_Run+0x44c>
    37b0:	53 c0       	rjmp	.+166    	; 0x3858 <CalculatorL2_Run+0x4f2>
            	LCD_ClearLCD();
    37b2:	0e 94 84 17 	call	0x2f08	; 0x2f08 <LCD_ClearLCD>
            	LCD_MoveCursor(2,0);
    37b6:	82 e0       	ldi	r24, 0x02	; 2
    37b8:	60 e0       	ldi	r22, 0x00	; 0
    37ba:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_MoveCursor>
            	LCD_DisplayString("Ans = ");
    37be:	82 e8       	ldi	r24, 0x82	; 130
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_DisplayString>
            	if( result == 0 ){
    37c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    37c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    37ca:	ad 85       	ldd	r26, Y+13	; 0x0d
    37cc:	be 85       	ldd	r27, Y+14	; 0x0e
    37ce:	00 97       	sbiw	r24, 0x00	; 0
    37d0:	a1 05       	cpc	r26, r1
    37d2:	b1 05       	cpc	r27, r1
    37d4:	21 f4       	brne	.+8      	; 0x37de <CalculatorL2_Run+0x478>
					LCD_SendData('0');
    37d6:	80 e3       	ldi	r24, 0x30	; 48
    37d8:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_SendData>
    37dc:	08 c0       	rjmp	.+16     	; 0x37ee <CalculatorL2_Run+0x488>
				} else {
					LCD_DisplayNumber(result);
    37de:	8b 85       	ldd	r24, Y+11	; 0x0b
    37e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    37e2:	ad 85       	ldd	r26, Y+13	; 0x0d
    37e4:	be 85       	ldd	r27, Y+14	; 0x0e
    37e6:	bc 01       	movw	r22, r24
    37e8:	cd 01       	movw	r24, r26
    37ea:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_DisplayNumber>
				}
            	LCD_MoveCursor(1,0);
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	60 e0       	ldi	r22, 0x00	; 0
    37f2:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_MoveCursor>
            	LCD_DisplayString("Ans");
    37f6:	8c e8       	ldi	r24, 0x8C	; 140
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_DisplayString>
            	resultStr[0] = '\0';
    37fe:	1f a2       	std	Y+39, r1	; 0x27
				sprintf(resultStr,"%d",result);
    3800:	8d b7       	in	r24, 0x3d	; 61
    3802:	9e b7       	in	r25, 0x3e	; 62
    3804:	08 97       	sbiw	r24, 0x08	; 8
    3806:	0f b6       	in	r0, 0x3f	; 63
    3808:	f8 94       	cli
    380a:	9e bf       	out	0x3e, r25	; 62
    380c:	0f be       	out	0x3f, r0	; 63
    380e:	8d bf       	out	0x3d, r24	; 61
    3810:	ed b7       	in	r30, 0x3d	; 61
    3812:	fe b7       	in	r31, 0x3e	; 62
    3814:	31 96       	adiw	r30, 0x01	; 1
    3816:	ce 01       	movw	r24, r28
    3818:	87 96       	adiw	r24, 0x27	; 39
    381a:	91 83       	std	Z+1, r25	; 0x01
    381c:	80 83       	st	Z, r24
    381e:	89 e8       	ldi	r24, 0x89	; 137
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	93 83       	std	Z+3, r25	; 0x03
    3824:	82 83       	std	Z+2, r24	; 0x02
    3826:	8b 85       	ldd	r24, Y+11	; 0x0b
    3828:	9c 85       	ldd	r25, Y+12	; 0x0c
    382a:	ad 85       	ldd	r26, Y+13	; 0x0d
    382c:	be 85       	ldd	r27, Y+14	; 0x0e
    382e:	84 83       	std	Z+4, r24	; 0x04
    3830:	95 83       	std	Z+5, r25	; 0x05
    3832:	a6 83       	std	Z+6, r26	; 0x06
    3834:	b7 83       	std	Z+7, r27	; 0x07
    3836:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <sprintf>
    383a:	2d b7       	in	r18, 0x3d	; 61
    383c:	3e b7       	in	r19, 0x3e	; 62
    383e:	28 5f       	subi	r18, 0xF8	; 248
    3840:	3f 4f       	sbci	r19, 0xFF	; 255
    3842:	0f b6       	in	r0, 0x3f	; 63
    3844:	f8 94       	cli
    3846:	3e bf       	out	0x3e, r19	; 62
    3848:	0f be       	out	0x3f, r0	; 63
    384a:	2d bf       	out	0x3d, r18	; 61
				opAgain = KeyValue ;
    384c:	88 89       	ldd	r24, Y+16	; 0x10
    384e:	8f 87       	std	Y+15, r24	; 0x0f
				index = 0 ;
    3850:	19 8a       	std	Y+17, r1	; 0x11
				OperationStatement[0] = '\0' ;
    3852:	1f 8a       	std	Y+23, r1	; 0x17
				disClick = 0 ;
    3854:	1e 8a       	std	Y+22, r1	; 0x16
    3856:	10 c0       	rjmp	.+32     	; 0x3878 <CalculatorL2_Run+0x512>
            } else if( disClick == 0 ){
    3858:	8e 89       	ldd	r24, Y+22	; 0x16
    385a:	88 23       	and	r24, r24
    385c:	69 f4       	brne	.+26     	; 0x3878 <CalculatorL2_Run+0x512>
                OperationStatement[index] = KeyValue;
    385e:	89 89       	ldd	r24, Y+17	; 0x11
    3860:	28 2f       	mov	r18, r24
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	ce 01       	movw	r24, r28
    3866:	47 96       	adiw	r24, 0x17	; 23
    3868:	fc 01       	movw	r30, r24
    386a:	e2 0f       	add	r30, r18
    386c:	f3 1f       	adc	r31, r19
    386e:	88 89       	ldd	r24, Y+16	; 0x10
    3870:	80 83       	st	Z, r24
                ++index;
    3872:	89 89       	ldd	r24, Y+17	; 0x11
    3874:	8f 5f       	subi	r24, 0xFF	; 255
    3876:	89 8b       	std	Y+17, r24	; 0x11
            }
            // Display the pressed key on the LCD.
            if( KeyValue != '=' && disClick == 0 ){
    3878:	88 89       	ldd	r24, Y+16	; 0x10
    387a:	8d 33       	cpi	r24, 0x3D	; 61
    387c:	09 f4       	brne	.+2      	; 0x3880 <CalculatorL2_Run+0x51a>
    387e:	d5 cd       	rjmp	.-1110   	; 0x342a <CalculatorL2_Run+0xc4>
    3880:	8e 89       	ldd	r24, Y+22	; 0x16
    3882:	88 23       	and	r24, r24
    3884:	09 f0       	breq	.+2      	; 0x3888 <CalculatorL2_Run+0x522>
    3886:	d1 cd       	rjmp	.-1118   	; 0x342a <CalculatorL2_Run+0xc4>
            	LCD_SendData(KeyValue);
    3888:	88 89       	ldd	r24, Y+16	; 0x10
    388a:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_SendData>
    388e:	cd cd       	rjmp	.-1126   	; 0x342a <CalculatorL2_Run+0xc4>

00003890 <CalculatorL2_StartStatement>:
 * Description: This function is used to print a start on LCD .
 * Arguments:
	 * No Arguments .
 * Return Value: no return ( void ) .
 */
static void CalculatorL2_StartStatement(void) {
    3890:	df 93       	push	r29
    3892:	cf 93       	push	r28
    3894:	cd b7       	in	r28, 0x3d	; 61
    3896:	de b7       	in	r29, 0x3e	; 62
    3898:	ac 97       	sbiw	r28, 0x2c	; 44
    389a:	0f b6       	in	r0, 0x3f	; 63
    389c:	f8 94       	cli
    389e:	de bf       	out	0x3e, r29	; 62
    38a0:	0f be       	out	0x3f, r0	; 63
    38a2:	cd bf       	out	0x3d, r28	; 61
    // Display "Simple" on the first line at column 5 of an LCD screen.
    LCD_MoveCursor(1, 5);
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	65 e0       	ldi	r22, 0x05	; 5
    38a8:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_MoveCursor>
    LCD_DisplayString("Simple");
    38ac:	80 e9       	ldi	r24, 0x90	; 144
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_DisplayString>

    // Display "Calculator" on the second line at column 3 of the same LCD screen.
    LCD_MoveCursor(2, 3);
    38b4:	82 e0       	ldi	r24, 0x02	; 2
    38b6:	63 e0       	ldi	r22, 0x03	; 3
    38b8:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_MoveCursor>
    LCD_DisplayString("Calculator");
    38bc:	87 e9       	ldi	r24, 0x97	; 151
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_DisplayString>
    38c4:	80 e0       	ldi	r24, 0x00	; 0
    38c6:	90 e8       	ldi	r25, 0x80	; 128
    38c8:	ab eb       	ldi	r26, 0xBB	; 187
    38ca:	b4 e4       	ldi	r27, 0x44	; 68
    38cc:	8f a3       	std	Y+39, r24	; 0x27
    38ce:	98 a7       	std	Y+40, r25	; 0x28
    38d0:	a9 a7       	std	Y+41, r26	; 0x29
    38d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38d4:	6f a1       	ldd	r22, Y+39	; 0x27
    38d6:	78 a5       	ldd	r23, Y+40	; 0x28
    38d8:	89 a5       	ldd	r24, Y+41	; 0x29
    38da:	9a a5       	ldd	r25, Y+42	; 0x2a
    38dc:	20 e0       	ldi	r18, 0x00	; 0
    38de:	30 e0       	ldi	r19, 0x00	; 0
    38e0:	4a e7       	ldi	r20, 0x7A	; 122
    38e2:	53 e4       	ldi	r21, 0x43	; 67
    38e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38e8:	dc 01       	movw	r26, r24
    38ea:	cb 01       	movw	r24, r22
    38ec:	8b a3       	std	Y+35, r24	; 0x23
    38ee:	9c a3       	std	Y+36, r25	; 0x24
    38f0:	ad a3       	std	Y+37, r26	; 0x25
    38f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    38f4:	6b a1       	ldd	r22, Y+35	; 0x23
    38f6:	7c a1       	ldd	r23, Y+36	; 0x24
    38f8:	8d a1       	ldd	r24, Y+37	; 0x25
    38fa:	9e a1       	ldd	r25, Y+38	; 0x26
    38fc:	20 e0       	ldi	r18, 0x00	; 0
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	40 e8       	ldi	r20, 0x80	; 128
    3902:	5f e3       	ldi	r21, 0x3F	; 63
    3904:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3908:	88 23       	and	r24, r24
    390a:	2c f4       	brge	.+10     	; 0x3916 <CalculatorL2_StartStatement+0x86>
		__ticks = 1;
    390c:	81 e0       	ldi	r24, 0x01	; 1
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	9a a3       	std	Y+34, r25	; 0x22
    3912:	89 a3       	std	Y+33, r24	; 0x21
    3914:	3f c0       	rjmp	.+126    	; 0x3994 <CalculatorL2_StartStatement+0x104>
	else if (__tmp > 65535)
    3916:	6b a1       	ldd	r22, Y+35	; 0x23
    3918:	7c a1       	ldd	r23, Y+36	; 0x24
    391a:	8d a1       	ldd	r24, Y+37	; 0x25
    391c:	9e a1       	ldd	r25, Y+38	; 0x26
    391e:	20 e0       	ldi	r18, 0x00	; 0
    3920:	3f ef       	ldi	r19, 0xFF	; 255
    3922:	4f e7       	ldi	r20, 0x7F	; 127
    3924:	57 e4       	ldi	r21, 0x47	; 71
    3926:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    392a:	18 16       	cp	r1, r24
    392c:	4c f5       	brge	.+82     	; 0x3980 <CalculatorL2_StartStatement+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    392e:	6f a1       	ldd	r22, Y+39	; 0x27
    3930:	78 a5       	ldd	r23, Y+40	; 0x28
    3932:	89 a5       	ldd	r24, Y+41	; 0x29
    3934:	9a a5       	ldd	r25, Y+42	; 0x2a
    3936:	20 e0       	ldi	r18, 0x00	; 0
    3938:	30 e0       	ldi	r19, 0x00	; 0
    393a:	40 e2       	ldi	r20, 0x20	; 32
    393c:	51 e4       	ldi	r21, 0x41	; 65
    393e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3942:	dc 01       	movw	r26, r24
    3944:	cb 01       	movw	r24, r22
    3946:	bc 01       	movw	r22, r24
    3948:	cd 01       	movw	r24, r26
    394a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    394e:	dc 01       	movw	r26, r24
    3950:	cb 01       	movw	r24, r22
    3952:	9a a3       	std	Y+34, r25	; 0x22
    3954:	89 a3       	std	Y+33, r24	; 0x21
    3956:	0f c0       	rjmp	.+30     	; 0x3976 <CalculatorL2_StartStatement+0xe6>
    3958:	89 e1       	ldi	r24, 0x19	; 25
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	98 a3       	std	Y+32, r25	; 0x20
    395e:	8f 8f       	std	Y+31, r24	; 0x1f
    3960:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3962:	98 a1       	ldd	r25, Y+32	; 0x20
    3964:	01 97       	sbiw	r24, 0x01	; 1
    3966:	f1 f7       	brne	.-4      	; 0x3964 <CalculatorL2_StartStatement+0xd4>
    3968:	98 a3       	std	Y+32, r25	; 0x20
    396a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    396c:	89 a1       	ldd	r24, Y+33	; 0x21
    396e:	9a a1       	ldd	r25, Y+34	; 0x22
    3970:	01 97       	sbiw	r24, 0x01	; 1
    3972:	9a a3       	std	Y+34, r25	; 0x22
    3974:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3976:	89 a1       	ldd	r24, Y+33	; 0x21
    3978:	9a a1       	ldd	r25, Y+34	; 0x22
    397a:	00 97       	sbiw	r24, 0x00	; 0
    397c:	69 f7       	brne	.-38     	; 0x3958 <CalculatorL2_StartStatement+0xc8>
    397e:	14 c0       	rjmp	.+40     	; 0x39a8 <CalculatorL2_StartStatement+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3980:	6b a1       	ldd	r22, Y+35	; 0x23
    3982:	7c a1       	ldd	r23, Y+36	; 0x24
    3984:	8d a1       	ldd	r24, Y+37	; 0x25
    3986:	9e a1       	ldd	r25, Y+38	; 0x26
    3988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398c:	dc 01       	movw	r26, r24
    398e:	cb 01       	movw	r24, r22
    3990:	9a a3       	std	Y+34, r25	; 0x22
    3992:	89 a3       	std	Y+33, r24	; 0x21
    3994:	89 a1       	ldd	r24, Y+33	; 0x21
    3996:	9a a1       	ldd	r25, Y+34	; 0x22
    3998:	9e 8f       	std	Y+30, r25	; 0x1e
    399a:	8d 8f       	std	Y+29, r24	; 0x1d
    399c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    399e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39a0:	01 97       	sbiw	r24, 0x01	; 1
    39a2:	f1 f7       	brne	.-4      	; 0x39a0 <CalculatorL2_StartStatement+0x110>
    39a4:	9e 8f       	std	Y+30, r25	; 0x1e
    39a6:	8d 8f       	std	Y+29, r24	; 0x1d

    // Delay for 2 seconds to show the "Simple Calculator" message.
    _delay_ms(1500);

    LCD_ClearLCD();
    39a8:	0e 94 84 17 	call	0x2f08	; 0x2f08 <LCD_ClearLCD>
    LCD_MoveCursor(2, 0);
    39ac:	82 e0       	ldi	r24, 0x02	; 2
    39ae:	60 e0       	ldi	r22, 0x00	; 0
    39b0:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_MoveCursor>
    LCD_DisplayString("    Level 2 ");
    39b4:	82 ea       	ldi	r24, 0xA2	; 162
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_DisplayString>
    for( int i = 0 ; i < 10 ; ++i ){
    39bc:	1c a6       	std	Y+44, r1	; 0x2c
    39be:	1b a6       	std	Y+43, r1	; 0x2b
    39c0:	88 c0       	rjmp	.+272    	; 0x3ad2 <CalculatorL2_StartStatement+0x242>
		LCD_MoveCursor(2, 12);
    39c2:	82 e0       	ldi	r24, 0x02	; 2
    39c4:	6c e0       	ldi	r22, 0x0C	; 12
    39c6:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_MoveCursor>
    	i % 2 == 0 ? LCD_SendData('!') : LCD_SendData(' ') ;
    39ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    39cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    39ce:	81 70       	andi	r24, 0x01	; 1
    39d0:	90 70       	andi	r25, 0x00	; 0
    39d2:	00 97       	sbiw	r24, 0x00	; 0
    39d4:	21 f4       	brne	.+8      	; 0x39de <CalculatorL2_StartStatement+0x14e>
    39d6:	81 e2       	ldi	r24, 0x21	; 33
    39d8:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_SendData>
    39dc:	03 c0       	rjmp	.+6      	; 0x39e4 <CalculatorL2_StartStatement+0x154>
    39de:	80 e2       	ldi	r24, 0x20	; 32
    39e0:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_SendData>
    39e4:	80 e0       	ldi	r24, 0x00	; 0
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	a8 ec       	ldi	r26, 0xC8	; 200
    39ea:	b2 e4       	ldi	r27, 0x42	; 66
    39ec:	89 8f       	std	Y+25, r24	; 0x19
    39ee:	9a 8f       	std	Y+26, r25	; 0x1a
    39f0:	ab 8f       	std	Y+27, r26	; 0x1b
    39f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39f4:	69 8d       	ldd	r22, Y+25	; 0x19
    39f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	4a e7       	ldi	r20, 0x7A	; 122
    3a02:	53 e4       	ldi	r21, 0x43	; 67
    3a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a08:	dc 01       	movw	r26, r24
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	8d 8b       	std	Y+21, r24	; 0x15
    3a0e:	9e 8b       	std	Y+22, r25	; 0x16
    3a10:	af 8b       	std	Y+23, r26	; 0x17
    3a12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a14:	6d 89       	ldd	r22, Y+21	; 0x15
    3a16:	7e 89       	ldd	r23, Y+22	; 0x16
    3a18:	8f 89       	ldd	r24, Y+23	; 0x17
    3a1a:	98 8d       	ldd	r25, Y+24	; 0x18
    3a1c:	20 e0       	ldi	r18, 0x00	; 0
    3a1e:	30 e0       	ldi	r19, 0x00	; 0
    3a20:	40 e8       	ldi	r20, 0x80	; 128
    3a22:	5f e3       	ldi	r21, 0x3F	; 63
    3a24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a28:	88 23       	and	r24, r24
    3a2a:	2c f4       	brge	.+10     	; 0x3a36 <CalculatorL2_StartStatement+0x1a6>
		__ticks = 1;
    3a2c:	81 e0       	ldi	r24, 0x01	; 1
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	9c 8b       	std	Y+20, r25	; 0x14
    3a32:	8b 8b       	std	Y+19, r24	; 0x13
    3a34:	3f c0       	rjmp	.+126    	; 0x3ab4 <CalculatorL2_StartStatement+0x224>
	else if (__tmp > 65535)
    3a36:	6d 89       	ldd	r22, Y+21	; 0x15
    3a38:	7e 89       	ldd	r23, Y+22	; 0x16
    3a3a:	8f 89       	ldd	r24, Y+23	; 0x17
    3a3c:	98 8d       	ldd	r25, Y+24	; 0x18
    3a3e:	20 e0       	ldi	r18, 0x00	; 0
    3a40:	3f ef       	ldi	r19, 0xFF	; 255
    3a42:	4f e7       	ldi	r20, 0x7F	; 127
    3a44:	57 e4       	ldi	r21, 0x47	; 71
    3a46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a4a:	18 16       	cp	r1, r24
    3a4c:	4c f5       	brge	.+82     	; 0x3aa0 <CalculatorL2_StartStatement+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a4e:	69 8d       	ldd	r22, Y+25	; 0x19
    3a50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a56:	20 e0       	ldi	r18, 0x00	; 0
    3a58:	30 e0       	ldi	r19, 0x00	; 0
    3a5a:	40 e2       	ldi	r20, 0x20	; 32
    3a5c:	51 e4       	ldi	r21, 0x41	; 65
    3a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a62:	dc 01       	movw	r26, r24
    3a64:	cb 01       	movw	r24, r22
    3a66:	bc 01       	movw	r22, r24
    3a68:	cd 01       	movw	r24, r26
    3a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a6e:	dc 01       	movw	r26, r24
    3a70:	cb 01       	movw	r24, r22
    3a72:	9c 8b       	std	Y+20, r25	; 0x14
    3a74:	8b 8b       	std	Y+19, r24	; 0x13
    3a76:	0f c0       	rjmp	.+30     	; 0x3a96 <CalculatorL2_StartStatement+0x206>
    3a78:	89 e1       	ldi	r24, 0x19	; 25
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	9a 8b       	std	Y+18, r25	; 0x12
    3a7e:	89 8b       	std	Y+17, r24	; 0x11
    3a80:	89 89       	ldd	r24, Y+17	; 0x11
    3a82:	9a 89       	ldd	r25, Y+18	; 0x12
    3a84:	01 97       	sbiw	r24, 0x01	; 1
    3a86:	f1 f7       	brne	.-4      	; 0x3a84 <CalculatorL2_StartStatement+0x1f4>
    3a88:	9a 8b       	std	Y+18, r25	; 0x12
    3a8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a8c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a8e:	9c 89       	ldd	r25, Y+20	; 0x14
    3a90:	01 97       	sbiw	r24, 0x01	; 1
    3a92:	9c 8b       	std	Y+20, r25	; 0x14
    3a94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a96:	8b 89       	ldd	r24, Y+19	; 0x13
    3a98:	9c 89       	ldd	r25, Y+20	; 0x14
    3a9a:	00 97       	sbiw	r24, 0x00	; 0
    3a9c:	69 f7       	brne	.-38     	; 0x3a78 <CalculatorL2_StartStatement+0x1e8>
    3a9e:	14 c0       	rjmp	.+40     	; 0x3ac8 <CalculatorL2_StartStatement+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aa0:	6d 89       	ldd	r22, Y+21	; 0x15
    3aa2:	7e 89       	ldd	r23, Y+22	; 0x16
    3aa4:	8f 89       	ldd	r24, Y+23	; 0x17
    3aa6:	98 8d       	ldd	r25, Y+24	; 0x18
    3aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aac:	dc 01       	movw	r26, r24
    3aae:	cb 01       	movw	r24, r22
    3ab0:	9c 8b       	std	Y+20, r25	; 0x14
    3ab2:	8b 8b       	std	Y+19, r24	; 0x13
    3ab4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ab6:	9c 89       	ldd	r25, Y+20	; 0x14
    3ab8:	98 8b       	std	Y+16, r25	; 0x10
    3aba:	8f 87       	std	Y+15, r24	; 0x0f
    3abc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3abe:	98 89       	ldd	r25, Y+16	; 0x10
    3ac0:	01 97       	sbiw	r24, 0x01	; 1
    3ac2:	f1 f7       	brne	.-4      	; 0x3ac0 <CalculatorL2_StartStatement+0x230>
    3ac4:	98 8b       	std	Y+16, r25	; 0x10
    3ac6:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1500);

    LCD_ClearLCD();
    LCD_MoveCursor(2, 0);
    LCD_DisplayString("    Level 2 ");
    for( int i = 0 ; i < 10 ; ++i ){
    3ac8:	8b a5       	ldd	r24, Y+43	; 0x2b
    3aca:	9c a5       	ldd	r25, Y+44	; 0x2c
    3acc:	01 96       	adiw	r24, 0x01	; 1
    3ace:	9c a7       	std	Y+44, r25	; 0x2c
    3ad0:	8b a7       	std	Y+43, r24	; 0x2b
    3ad2:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ad4:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ad6:	8a 30       	cpi	r24, 0x0A	; 10
    3ad8:	91 05       	cpc	r25, r1
    3ada:	0c f4       	brge	.+2      	; 0x3ade <CalculatorL2_StartStatement+0x24e>
    3adc:	72 cf       	rjmp	.-284    	; 0x39c2 <CalculatorL2_StartStatement+0x132>
    	i % 2 == 0 ? LCD_SendData('!') : LCD_SendData(' ') ;
    	_delay_ms(100);
    }

    // Clear the LCD screen.
    LCD_ClearLCD();
    3ade:	0e 94 84 17 	call	0x2f08	; 0x2f08 <LCD_ClearLCD>

    // Display "By :" on the first line at column 6 of the LCD screen.
    LCD_MoveCursor(1, 6);
    3ae2:	81 e0       	ldi	r24, 0x01	; 1
    3ae4:	66 e0       	ldi	r22, 0x06	; 6
    3ae6:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_MoveCursor>
    LCD_DisplayString("By :");
    3aea:	8f ea       	ldi	r24, 0xAF	; 175
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_DisplayString>

    // Display "Abo Alaa" on the second line at column 2 of the same LCD screen.
    LCD_MoveCursor(2, 4);
    3af2:	82 e0       	ldi	r24, 0x02	; 2
    3af4:	64 e0       	ldi	r22, 0x04	; 4
    3af6:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_MoveCursor>
    LCD_DisplayString("Abo Alaa");
    3afa:	84 eb       	ldi	r24, 0xB4	; 180
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_DisplayString>
    3b02:	80 e0       	ldi	r24, 0x00	; 0
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	aa ef       	ldi	r26, 0xFA	; 250
    3b08:	b4 e4       	ldi	r27, 0x44	; 68
    3b0a:	8b 87       	std	Y+11, r24	; 0x0b
    3b0c:	9c 87       	std	Y+12, r25	; 0x0c
    3b0e:	ad 87       	std	Y+13, r26	; 0x0d
    3b10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b12:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b14:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b16:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b18:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b1a:	20 e0       	ldi	r18, 0x00	; 0
    3b1c:	30 e0       	ldi	r19, 0x00	; 0
    3b1e:	4a e7       	ldi	r20, 0x7A	; 122
    3b20:	53 e4       	ldi	r21, 0x43	; 67
    3b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b26:	dc 01       	movw	r26, r24
    3b28:	cb 01       	movw	r24, r22
    3b2a:	8f 83       	std	Y+7, r24	; 0x07
    3b2c:	98 87       	std	Y+8, r25	; 0x08
    3b2e:	a9 87       	std	Y+9, r26	; 0x09
    3b30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b32:	6f 81       	ldd	r22, Y+7	; 0x07
    3b34:	78 85       	ldd	r23, Y+8	; 0x08
    3b36:	89 85       	ldd	r24, Y+9	; 0x09
    3b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	40 e8       	ldi	r20, 0x80	; 128
    3b40:	5f e3       	ldi	r21, 0x3F	; 63
    3b42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b46:	88 23       	and	r24, r24
    3b48:	2c f4       	brge	.+10     	; 0x3b54 <CalculatorL2_StartStatement+0x2c4>
		__ticks = 1;
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	9e 83       	std	Y+6, r25	; 0x06
    3b50:	8d 83       	std	Y+5, r24	; 0x05
    3b52:	3f c0       	rjmp	.+126    	; 0x3bd2 <CalculatorL2_StartStatement+0x342>
	else if (__tmp > 65535)
    3b54:	6f 81       	ldd	r22, Y+7	; 0x07
    3b56:	78 85       	ldd	r23, Y+8	; 0x08
    3b58:	89 85       	ldd	r24, Y+9	; 0x09
    3b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b5c:	20 e0       	ldi	r18, 0x00	; 0
    3b5e:	3f ef       	ldi	r19, 0xFF	; 255
    3b60:	4f e7       	ldi	r20, 0x7F	; 127
    3b62:	57 e4       	ldi	r21, 0x47	; 71
    3b64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b68:	18 16       	cp	r1, r24
    3b6a:	4c f5       	brge	.+82     	; 0x3bbe <CalculatorL2_StartStatement+0x32e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b70:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b72:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	40 e2       	ldi	r20, 0x20	; 32
    3b7a:	51 e4       	ldi	r21, 0x41	; 65
    3b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b80:	dc 01       	movw	r26, r24
    3b82:	cb 01       	movw	r24, r22
    3b84:	bc 01       	movw	r22, r24
    3b86:	cd 01       	movw	r24, r26
    3b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b8c:	dc 01       	movw	r26, r24
    3b8e:	cb 01       	movw	r24, r22
    3b90:	9e 83       	std	Y+6, r25	; 0x06
    3b92:	8d 83       	std	Y+5, r24	; 0x05
    3b94:	0f c0       	rjmp	.+30     	; 0x3bb4 <CalculatorL2_StartStatement+0x324>
    3b96:	89 e1       	ldi	r24, 0x19	; 25
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	9c 83       	std	Y+4, r25	; 0x04
    3b9c:	8b 83       	std	Y+3, r24	; 0x03
    3b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ba2:	01 97       	sbiw	r24, 0x01	; 1
    3ba4:	f1 f7       	brne	.-4      	; 0x3ba2 <CalculatorL2_StartStatement+0x312>
    3ba6:	9c 83       	std	Y+4, r25	; 0x04
    3ba8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3baa:	8d 81       	ldd	r24, Y+5	; 0x05
    3bac:	9e 81       	ldd	r25, Y+6	; 0x06
    3bae:	01 97       	sbiw	r24, 0x01	; 1
    3bb0:	9e 83       	std	Y+6, r25	; 0x06
    3bb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    3bb8:	00 97       	sbiw	r24, 0x00	; 0
    3bba:	69 f7       	brne	.-38     	; 0x3b96 <CalculatorL2_StartStatement+0x306>
    3bbc:	14 c0       	rjmp	.+40     	; 0x3be6 <CalculatorL2_StartStatement+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bbe:	6f 81       	ldd	r22, Y+7	; 0x07
    3bc0:	78 85       	ldd	r23, Y+8	; 0x08
    3bc2:	89 85       	ldd	r24, Y+9	; 0x09
    3bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bca:	dc 01       	movw	r26, r24
    3bcc:	cb 01       	movw	r24, r22
    3bce:	9e 83       	std	Y+6, r25	; 0x06
    3bd0:	8d 83       	std	Y+5, r24	; 0x05
    3bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd4:	9e 81       	ldd	r25, Y+6	; 0x06
    3bd6:	9a 83       	std	Y+2, r25	; 0x02
    3bd8:	89 83       	std	Y+1, r24	; 0x01
    3bda:	89 81       	ldd	r24, Y+1	; 0x01
    3bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    3bde:	01 97       	sbiw	r24, 0x01	; 1
    3be0:	f1 f7       	brne	.-4      	; 0x3bde <CalculatorL2_StartStatement+0x34e>
    3be2:	9a 83       	std	Y+2, r25	; 0x02
    3be4:	89 83       	std	Y+1, r24	; 0x01

    // Delay for 2 seconds to show the "By: Mohamed Alaa" message.
    _delay_ms(2000);

    // Clear the LCD screen.
    LCD_ClearLCD();
    3be6:	0e 94 84 17 	call	0x2f08	; 0x2f08 <LCD_ClearLCD>

    // Display "Press any" on the first line at column 3 of the LCD screen.
    LCD_MoveCursor(1, 3);
    3bea:	81 e0       	ldi	r24, 0x01	; 1
    3bec:	63 e0       	ldi	r22, 0x03	; 3
    3bee:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_MoveCursor>
    LCD_DisplayString("Press any");
    3bf2:	8d eb       	ldi	r24, 0xBD	; 189
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_DisplayString>

    // Display "key to Start..." on the second line at column 1 of the same LCD screen.
    LCD_MoveCursor(2, 1);
    3bfa:	82 e0       	ldi	r24, 0x02	; 2
    3bfc:	61 e0       	ldi	r22, 0x01	; 1
    3bfe:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_MoveCursor>
    LCD_DisplayString("key to Start...");
    3c02:	87 ec       	ldi	r24, 0xC7	; 199
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_DisplayString>

    // Wait indefinitely for any key press to clear the screen.
    while (1) {
        if (KEYPAD_GetPressedKeyValue(Keypad_Port) != 255) {
    3c0a:	80 91 4e 01 	lds	r24, 0x014E
    3c0e:	0e 94 03 18 	call	0x3006	; 0x3006 <KEYPAD_GetPressedKeyValue>
    3c12:	8f 3f       	cpi	r24, 0xFF	; 255
    3c14:	d1 f3       	breq	.-12     	; 0x3c0a <CalculatorL2_StartStatement+0x37a>
            LCD_ClearLCD();
    3c16:	0e 94 84 17 	call	0x2f08	; 0x2f08 <LCD_ClearLCD>
            break;
        }
    }
    3c1a:	ac 96       	adiw	r28, 0x2c	; 44
    3c1c:	0f b6       	in	r0, 0x3f	; 63
    3c1e:	f8 94       	cli
    3c20:	de bf       	out	0x3e, r29	; 62
    3c22:	0f be       	out	0x3f, r0	; 63
    3c24:	cd bf       	out	0x3d, r28	; 61
    3c26:	cf 91       	pop	r28
    3c28:	df 91       	pop	r29
    3c2a:	08 95       	ret

00003c2c <initializeStack>:
#include <string.h>
#include "MathCalc.h"


// Function to initialize the stack
void initializeStack(Stack *stack) {
    3c2c:	df 93       	push	r29
    3c2e:	cf 93       	push	r28
    3c30:	00 d0       	rcall	.+0      	; 0x3c32 <initializeStack+0x6>
    3c32:	cd b7       	in	r28, 0x3d	; 61
    3c34:	de b7       	in	r29, 0x3e	; 62
    3c36:	9a 83       	std	Y+2, r25	; 0x02
    3c38:	89 83       	std	Y+1, r24	; 0x01
    stack->top = -1;
    3c3a:	89 81       	ldd	r24, Y+1	; 0x01
    3c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c3e:	fc 01       	movw	r30, r24
    3c40:	e0 5b       	subi	r30, 0xB0	; 176
    3c42:	ff 4f       	sbci	r31, 0xFF	; 255
    3c44:	8f ef       	ldi	r24, 0xFF	; 255
    3c46:	9f ef       	ldi	r25, 0xFF	; 255
    3c48:	91 83       	std	Z+1, r25	; 0x01
    3c4a:	80 83       	st	Z, r24
}
    3c4c:	0f 90       	pop	r0
    3c4e:	0f 90       	pop	r0
    3c50:	cf 91       	pop	r28
    3c52:	df 91       	pop	r29
    3c54:	08 95       	ret

00003c56 <push>:

// Function to push a value onto the stack
void push(Stack *stack, int value) {
    3c56:	df 93       	push	r29
    3c58:	cf 93       	push	r28
    3c5a:	00 d0       	rcall	.+0      	; 0x3c5c <push+0x6>
    3c5c:	00 d0       	rcall	.+0      	; 0x3c5e <push+0x8>
    3c5e:	cd b7       	in	r28, 0x3d	; 61
    3c60:	de b7       	in	r29, 0x3e	; 62
    3c62:	9a 83       	std	Y+2, r25	; 0x02
    3c64:	89 83       	std	Y+1, r24	; 0x01
    3c66:	7c 83       	std	Y+4, r23	; 0x04
    3c68:	6b 83       	std	Y+3, r22	; 0x03
    if (stack->top < STACK_SIZE - 1) {
    3c6a:	89 81       	ldd	r24, Y+1	; 0x01
    3c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c6e:	fc 01       	movw	r30, r24
    3c70:	e0 5b       	subi	r30, 0xB0	; 176
    3c72:	ff 4f       	sbci	r31, 0xFF	; 255
    3c74:	80 81       	ld	r24, Z
    3c76:	91 81       	ldd	r25, Z+1	; 0x01
    3c78:	87 32       	cpi	r24, 0x27	; 39
    3c7a:	91 05       	cpc	r25, r1
    3c7c:	1c f5       	brge	.+70     	; 0x3cc4 <push+0x6e>
        stack->data[++stack->top] = value;
    3c7e:	89 81       	ldd	r24, Y+1	; 0x01
    3c80:	9a 81       	ldd	r25, Y+2	; 0x02
    3c82:	fc 01       	movw	r30, r24
    3c84:	e0 5b       	subi	r30, 0xB0	; 176
    3c86:	ff 4f       	sbci	r31, 0xFF	; 255
    3c88:	80 81       	ld	r24, Z
    3c8a:	91 81       	ldd	r25, Z+1	; 0x01
    3c8c:	9c 01       	movw	r18, r24
    3c8e:	2f 5f       	subi	r18, 0xFF	; 255
    3c90:	3f 4f       	sbci	r19, 0xFF	; 255
    3c92:	89 81       	ldd	r24, Y+1	; 0x01
    3c94:	9a 81       	ldd	r25, Y+2	; 0x02
    3c96:	fc 01       	movw	r30, r24
    3c98:	e0 5b       	subi	r30, 0xB0	; 176
    3c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9c:	31 83       	std	Z+1, r19	; 0x01
    3c9e:	20 83       	st	Z, r18
    3ca0:	89 81       	ldd	r24, Y+1	; 0x01
    3ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ca4:	fc 01       	movw	r30, r24
    3ca6:	e0 5b       	subi	r30, 0xB0	; 176
    3ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    3caa:	80 81       	ld	r24, Z
    3cac:	91 81       	ldd	r25, Z+1	; 0x01
    3cae:	29 81       	ldd	r18, Y+1	; 0x01
    3cb0:	3a 81       	ldd	r19, Y+2	; 0x02
    3cb2:	88 0f       	add	r24, r24
    3cb4:	99 1f       	adc	r25, r25
    3cb6:	f9 01       	movw	r30, r18
    3cb8:	e8 0f       	add	r30, r24
    3cba:	f9 1f       	adc	r31, r25
    3cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    3cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    3cc0:	91 83       	std	Z+1, r25	; 0x01
    3cc2:	80 83       	st	Z, r24
    }
}
    3cc4:	0f 90       	pop	r0
    3cc6:	0f 90       	pop	r0
    3cc8:	0f 90       	pop	r0
    3cca:	0f 90       	pop	r0
    3ccc:	cf 91       	pop	r28
    3cce:	df 91       	pop	r29
    3cd0:	08 95       	ret

00003cd2 <pop>:

// Function to pop a value from the stack
int pop(Stack *stack) {
    3cd2:	df 93       	push	r29
    3cd4:	cf 93       	push	r28
    3cd6:	00 d0       	rcall	.+0      	; 0x3cd8 <pop+0x6>
    3cd8:	00 d0       	rcall	.+0      	; 0x3cda <pop+0x8>
    3cda:	cd b7       	in	r28, 0x3d	; 61
    3cdc:	de b7       	in	r29, 0x3e	; 62
    3cde:	9a 83       	std	Y+2, r25	; 0x02
    3ce0:	89 83       	std	Y+1, r24	; 0x01
    if (stack->top >= 0) {
    3ce2:	89 81       	ldd	r24, Y+1	; 0x01
    3ce4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ce6:	fc 01       	movw	r30, r24
    3ce8:	e0 5b       	subi	r30, 0xB0	; 176
    3cea:	ff 4f       	sbci	r31, 0xFF	; 255
    3cec:	80 81       	ld	r24, Z
    3cee:	91 81       	ldd	r25, Z+1	; 0x01
    3cf0:	99 23       	and	r25, r25
    3cf2:	f4 f0       	brlt	.+60     	; 0x3d30 <pop+0x5e>
        return stack->data[stack->top--];
    3cf4:	89 81       	ldd	r24, Y+1	; 0x01
    3cf6:	9a 81       	ldd	r25, Y+2	; 0x02
    3cf8:	fc 01       	movw	r30, r24
    3cfa:	e0 5b       	subi	r30, 0xB0	; 176
    3cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfe:	40 81       	ld	r20, Z
    3d00:	51 81       	ldd	r21, Z+1	; 0x01
    3d02:	29 81       	ldd	r18, Y+1	; 0x01
    3d04:	3a 81       	ldd	r19, Y+2	; 0x02
    3d06:	ca 01       	movw	r24, r20
    3d08:	88 0f       	add	r24, r24
    3d0a:	99 1f       	adc	r25, r25
    3d0c:	f9 01       	movw	r30, r18
    3d0e:	e8 0f       	add	r30, r24
    3d10:	f9 1f       	adc	r31, r25
    3d12:	80 81       	ld	r24, Z
    3d14:	91 81       	ldd	r25, Z+1	; 0x01
    3d16:	9c 83       	std	Y+4, r25	; 0x04
    3d18:	8b 83       	std	Y+3, r24	; 0x03
    3d1a:	9a 01       	movw	r18, r20
    3d1c:	21 50       	subi	r18, 0x01	; 1
    3d1e:	30 40       	sbci	r19, 0x00	; 0
    3d20:	89 81       	ldd	r24, Y+1	; 0x01
    3d22:	9a 81       	ldd	r25, Y+2	; 0x02
    3d24:	fc 01       	movw	r30, r24
    3d26:	e0 5b       	subi	r30, 0xB0	; 176
    3d28:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2a:	31 83       	std	Z+1, r19	; 0x01
    3d2c:	20 83       	st	Z, r18
    3d2e:	02 c0       	rjmp	.+4      	; 0x3d34 <pop+0x62>
    }
    return 0;  // Stack underflow
    3d30:	1c 82       	std	Y+4, r1	; 0x04
    3d32:	1b 82       	std	Y+3, r1	; 0x03
    3d34:	8b 81       	ldd	r24, Y+3	; 0x03
    3d36:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3d38:	0f 90       	pop	r0
    3d3a:	0f 90       	pop	r0
    3d3c:	0f 90       	pop	r0
    3d3e:	0f 90       	pop	r0
    3d40:	cf 91       	pop	r28
    3d42:	df 91       	pop	r29
    3d44:	08 95       	ret

00003d46 <isOperator>:

// Function to check if a character is an operator
int isOperator(char ch) {
    3d46:	df 93       	push	r29
    3d48:	cf 93       	push	r28
    3d4a:	00 d0       	rcall	.+0      	; 0x3d4c <isOperator+0x6>
    3d4c:	0f 92       	push	r0
    3d4e:	cd b7       	in	r28, 0x3d	; 61
    3d50:	de b7       	in	r29, 0x3e	; 62
    3d52:	89 83       	std	Y+1, r24	; 0x01
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/');
    3d54:	89 81       	ldd	r24, Y+1	; 0x01
    3d56:	8b 32       	cpi	r24, 0x2B	; 43
    3d58:	49 f0       	breq	.+18     	; 0x3d6c <isOperator+0x26>
    3d5a:	89 81       	ldd	r24, Y+1	; 0x01
    3d5c:	8d 32       	cpi	r24, 0x2D	; 45
    3d5e:	31 f0       	breq	.+12     	; 0x3d6c <isOperator+0x26>
    3d60:	89 81       	ldd	r24, Y+1	; 0x01
    3d62:	8a 32       	cpi	r24, 0x2A	; 42
    3d64:	19 f0       	breq	.+6      	; 0x3d6c <isOperator+0x26>
    3d66:	89 81       	ldd	r24, Y+1	; 0x01
    3d68:	8f 32       	cpi	r24, 0x2F	; 47
    3d6a:	29 f4       	brne	.+10     	; 0x3d76 <isOperator+0x30>
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	9b 83       	std	Y+3, r25	; 0x03
    3d72:	8a 83       	std	Y+2, r24	; 0x02
    3d74:	02 c0       	rjmp	.+4      	; 0x3d7a <isOperator+0x34>
    3d76:	1b 82       	std	Y+3, r1	; 0x03
    3d78:	1a 82       	std	Y+2, r1	; 0x02
    3d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d7c:	9b 81       	ldd	r25, Y+3	; 0x03
}
    3d7e:	0f 90       	pop	r0
    3d80:	0f 90       	pop	r0
    3d82:	0f 90       	pop	r0
    3d84:	cf 91       	pop	r28
    3d86:	df 91       	pop	r29
    3d88:	08 95       	ret

00003d8a <getPrecedence>:

// Function to get the precedence of an operator
int getPrecedence(char ch) {
    3d8a:	df 93       	push	r29
    3d8c:	cf 93       	push	r28
    3d8e:	00 d0       	rcall	.+0      	; 0x3d90 <getPrecedence+0x6>
    3d90:	0f 92       	push	r0
    3d92:	cd b7       	in	r28, 0x3d	; 61
    3d94:	de b7       	in	r29, 0x3e	; 62
    3d96:	89 83       	std	Y+1, r24	; 0x01
    if (ch == '+' || ch == '-') {
    3d98:	89 81       	ldd	r24, Y+1	; 0x01
    3d9a:	8b 32       	cpi	r24, 0x2B	; 43
    3d9c:	19 f0       	breq	.+6      	; 0x3da4 <getPrecedence+0x1a>
    3d9e:	89 81       	ldd	r24, Y+1	; 0x01
    3da0:	8d 32       	cpi	r24, 0x2D	; 45
    3da2:	29 f4       	brne	.+10     	; 0x3dae <getPrecedence+0x24>
        return 1;
    3da4:	81 e0       	ldi	r24, 0x01	; 1
    3da6:	90 e0       	ldi	r25, 0x00	; 0
    3da8:	9b 83       	std	Y+3, r25	; 0x03
    3daa:	8a 83       	std	Y+2, r24	; 0x02
    3dac:	0d c0       	rjmp	.+26     	; 0x3dc8 <getPrecedence+0x3e>
    } else if (ch == '*' || ch == '/') {
    3dae:	89 81       	ldd	r24, Y+1	; 0x01
    3db0:	8a 32       	cpi	r24, 0x2A	; 42
    3db2:	19 f0       	breq	.+6      	; 0x3dba <getPrecedence+0x30>
    3db4:	89 81       	ldd	r24, Y+1	; 0x01
    3db6:	8f 32       	cpi	r24, 0x2F	; 47
    3db8:	29 f4       	brne	.+10     	; 0x3dc4 <getPrecedence+0x3a>
        return 2;
    3dba:	82 e0       	ldi	r24, 0x02	; 2
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	9b 83       	std	Y+3, r25	; 0x03
    3dc0:	8a 83       	std	Y+2, r24	; 0x02
    3dc2:	02 c0       	rjmp	.+4      	; 0x3dc8 <getPrecedence+0x3e>
    }
    return 0;  // Default for non-operators
    3dc4:	1b 82       	std	Y+3, r1	; 0x03
    3dc6:	1a 82       	std	Y+2, r1	; 0x02
    3dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dca:	9b 81       	ldd	r25, Y+3	; 0x03
}
    3dcc:	0f 90       	pop	r0
    3dce:	0f 90       	pop	r0
    3dd0:	0f 90       	pop	r0
    3dd2:	cf 91       	pop	r28
    3dd4:	df 91       	pop	r29
    3dd6:	08 95       	ret

00003dd8 <evaluateExpression>:

// Function to evaluate a mathematical expression
int evaluateExpression(const char *expression) {
    3dd8:	0f 93       	push	r16
    3dda:	1f 93       	push	r17
    3ddc:	df 93       	push	r29
    3dde:	cf 93       	push	r28
    3de0:	cd b7       	in	r28, 0x3d	; 61
    3de2:	de b7       	in	r29, 0x3e	; 62
    3de4:	cb 5b       	subi	r28, 0xBB	; 187
    3de6:	d0 40       	sbci	r29, 0x00	; 0
    3de8:	0f b6       	in	r0, 0x3f	; 63
    3dea:	f8 94       	cli
    3dec:	de bf       	out	0x3e, r29	; 62
    3dee:	0f be       	out	0x3f, r0	; 63
    3df0:	cd bf       	out	0x3d, r28	; 61
    3df2:	fe 01       	movw	r30, r28
    3df4:	ea 54       	subi	r30, 0x4A	; 74
    3df6:	ff 4f       	sbci	r31, 0xFF	; 255
    3df8:	91 83       	std	Z+1, r25	; 0x01
    3dfa:	80 83       	st	Z, r24
    Stack operatorStack;
    Stack operandStack;
    initializeStack(&operatorStack);
    3dfc:	ce 01       	movw	r24, r28
    3dfe:	42 96       	adiw	r24, 0x12	; 18
    3e00:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <initializeStack>
    initializeStack(&operandStack);
    3e04:	ce 01       	movw	r24, r28
    3e06:	8c 59       	subi	r24, 0x9C	; 156
    3e08:	9f 4f       	sbci	r25, 0xFF	; 255
    3e0a:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <initializeStack>

    int len = strlen(expression);
    3e0e:	fe 01       	movw	r30, r28
    3e10:	ea 54       	subi	r30, 0x4A	; 74
    3e12:	ff 4f       	sbci	r31, 0xFF	; 255
    3e14:	80 81       	ld	r24, Z
    3e16:	91 81       	ldd	r25, Z+1	; 0x01
    3e18:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <strlen>
    3e1c:	99 8b       	std	Y+17, r25	; 0x11
    3e1e:	88 8b       	std	Y+16, r24	; 0x10

    for (int i = 0; i < len; i++) {
    3e20:	1f 86       	std	Y+15, r1	; 0x0f
    3e22:	1e 86       	std	Y+14, r1	; 0x0e
    3e24:	1d c1       	rjmp	.+570    	; 0x4060 <evaluateExpression+0x288>
        char currentChar = expression[i];
    3e26:	2e 85       	ldd	r18, Y+14	; 0x0e
    3e28:	3f 85       	ldd	r19, Y+15	; 0x0f
    3e2a:	fe 01       	movw	r30, r28
    3e2c:	ea 54       	subi	r30, 0x4A	; 74
    3e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e30:	80 81       	ld	r24, Z
    3e32:	91 81       	ldd	r25, Z+1	; 0x01
    3e34:	fc 01       	movw	r30, r24
    3e36:	e2 0f       	add	r30, r18
    3e38:	f3 1f       	adc	r31, r19
    3e3a:	80 81       	ld	r24, Z
    3e3c:	8d 87       	std	Y+13, r24	; 0x0d

        if (isdigit(currentChar)) {
    3e3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e40:	88 2f       	mov	r24, r24
    3e42:	90 e0       	ldi	r25, 0x00	; 0
    3e44:	c0 97       	sbiw	r24, 0x30	; 48
    3e46:	8a 30       	cpi	r24, 0x0A	; 10
    3e48:	91 05       	cpc	r25, r1
    3e4a:	08 f0       	brcs	.+2      	; 0x3e4e <evaluateExpression+0x76>
    3e4c:	4d c0       	rjmp	.+154    	; 0x3ee8 <evaluateExpression+0x110>
            // Parse multi-digit numbers
            int num = 0;
    3e4e:	1c 86       	std	Y+12, r1	; 0x0c
    3e50:	1b 86       	std	Y+11, r1	; 0x0b
    3e52:	24 c0       	rjmp	.+72     	; 0x3e9c <evaluateExpression+0xc4>
            while (i < len && isdigit(expression[i])) {
                num = num * 10 + (expression[i] - '0');
    3e54:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e56:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e58:	9c 01       	movw	r18, r24
    3e5a:	22 0f       	add	r18, r18
    3e5c:	33 1f       	adc	r19, r19
    3e5e:	c9 01       	movw	r24, r18
    3e60:	88 0f       	add	r24, r24
    3e62:	99 1f       	adc	r25, r25
    3e64:	88 0f       	add	r24, r24
    3e66:	99 1f       	adc	r25, r25
    3e68:	a9 01       	movw	r20, r18
    3e6a:	48 0f       	add	r20, r24
    3e6c:	59 1f       	adc	r21, r25
    3e6e:	2e 85       	ldd	r18, Y+14	; 0x0e
    3e70:	3f 85       	ldd	r19, Y+15	; 0x0f
    3e72:	fe 01       	movw	r30, r28
    3e74:	ea 54       	subi	r30, 0x4A	; 74
    3e76:	ff 4f       	sbci	r31, 0xFF	; 255
    3e78:	80 81       	ld	r24, Z
    3e7a:	91 81       	ldd	r25, Z+1	; 0x01
    3e7c:	fc 01       	movw	r30, r24
    3e7e:	e2 0f       	add	r30, r18
    3e80:	f3 1f       	adc	r31, r19
    3e82:	80 81       	ld	r24, Z
    3e84:	88 2f       	mov	r24, r24
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	c0 97       	sbiw	r24, 0x30	; 48
    3e8a:	84 0f       	add	r24, r20
    3e8c:	95 1f       	adc	r25, r21
    3e8e:	9c 87       	std	Y+12, r25	; 0x0c
    3e90:	8b 87       	std	Y+11, r24	; 0x0b
                i++;
    3e92:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e94:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e96:	01 96       	adiw	r24, 0x01	; 1
    3e98:	9f 87       	std	Y+15, r25	; 0x0f
    3e9a:	8e 87       	std	Y+14, r24	; 0x0e
        char currentChar = expression[i];

        if (isdigit(currentChar)) {
            // Parse multi-digit numbers
            int num = 0;
            while (i < len && isdigit(expression[i])) {
    3e9c:	2e 85       	ldd	r18, Y+14	; 0x0e
    3e9e:	3f 85       	ldd	r19, Y+15	; 0x0f
    3ea0:	88 89       	ldd	r24, Y+16	; 0x10
    3ea2:	99 89       	ldd	r25, Y+17	; 0x11
    3ea4:	28 17       	cp	r18, r24
    3ea6:	39 07       	cpc	r19, r25
    3ea8:	8c f4       	brge	.+34     	; 0x3ecc <evaluateExpression+0xf4>
    3eaa:	2e 85       	ldd	r18, Y+14	; 0x0e
    3eac:	3f 85       	ldd	r19, Y+15	; 0x0f
    3eae:	fe 01       	movw	r30, r28
    3eb0:	ea 54       	subi	r30, 0x4A	; 74
    3eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb4:	80 81       	ld	r24, Z
    3eb6:	91 81       	ldd	r25, Z+1	; 0x01
    3eb8:	fc 01       	movw	r30, r24
    3eba:	e2 0f       	add	r30, r18
    3ebc:	f3 1f       	adc	r31, r19
    3ebe:	80 81       	ld	r24, Z
    3ec0:	88 2f       	mov	r24, r24
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	c0 97       	sbiw	r24, 0x30	; 48
    3ec6:	8a 30       	cpi	r24, 0x0A	; 10
    3ec8:	91 05       	cpc	r25, r1
    3eca:	20 f2       	brcs	.-120    	; 0x3e54 <evaluateExpression+0x7c>
                num = num * 10 + (expression[i] - '0');
                i++;
            }
            i--;  // Move back one position after the last digit
    3ecc:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ece:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ed0:	01 97       	sbiw	r24, 0x01	; 1
    3ed2:	9f 87       	std	Y+15, r25	; 0x0f
    3ed4:	8e 87       	std	Y+14, r24	; 0x0e

            push(&operandStack, num);
    3ed6:	ce 01       	movw	r24, r28
    3ed8:	8c 59       	subi	r24, 0x9C	; 156
    3eda:	9f 4f       	sbci	r25, 0xFF	; 255
    3edc:	2b 85       	ldd	r18, Y+11	; 0x0b
    3ede:	3c 85       	ldd	r19, Y+12	; 0x0c
    3ee0:	b9 01       	movw	r22, r18
    3ee2:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <push>
    3ee6:	b7 c0       	rjmp	.+366    	; 0x4056 <evaluateExpression+0x27e>
        } else if (isOperator(currentChar)) {
    3ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3eea:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <isOperator>
    3eee:	00 97       	sbiw	r24, 0x00	; 0
    3ef0:	09 f4       	brne	.+2      	; 0x3ef4 <evaluateExpression+0x11c>
    3ef2:	b1 c0       	rjmp	.+354    	; 0x4056 <evaluateExpression+0x27e>
    3ef4:	87 c0       	rjmp	.+270    	; 0x4004 <evaluateExpression+0x22c>
            while (operatorStack.top >= 0 &&
                   getPrecedence(operatorStack.data[operatorStack.top]) >= getPrecedence(currentChar)) {
                char operator = pop(&operatorStack);
    3ef6:	ce 01       	movw	r24, r28
    3ef8:	42 96       	adiw	r24, 0x12	; 18
    3efa:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <pop>
    3efe:	8a 87       	std	Y+10, r24	; 0x0a
                int operand2 = pop(&operandStack);
    3f00:	ce 01       	movw	r24, r28
    3f02:	8c 59       	subi	r24, 0x9C	; 156
    3f04:	9f 4f       	sbci	r25, 0xFF	; 255
    3f06:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <pop>
    3f0a:	99 87       	std	Y+9, r25	; 0x09
    3f0c:	88 87       	std	Y+8, r24	; 0x08
                int operand1 = pop(&operandStack);
    3f0e:	ce 01       	movw	r24, r28
    3f10:	8c 59       	subi	r24, 0x9C	; 156
    3f12:	9f 4f       	sbci	r25, 0xFF	; 255
    3f14:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <pop>
    3f18:	9f 83       	std	Y+7, r25	; 0x07
    3f1a:	8e 83       	std	Y+6, r24	; 0x06

                // Perform the operation and push the result back to the operand stack
                switch (operator) {
    3f1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f1e:	28 2f       	mov	r18, r24
    3f20:	30 e0       	ldi	r19, 0x00	; 0
    3f22:	c6 54       	subi	r28, 0x46	; 70
    3f24:	df 4f       	sbci	r29, 0xFF	; 255
    3f26:	39 83       	std	Y+1, r19	; 0x01
    3f28:	28 83       	st	Y, r18
    3f2a:	ca 5b       	subi	r28, 0xBA	; 186
    3f2c:	d0 40       	sbci	r29, 0x00	; 0
    3f2e:	c6 54       	subi	r28, 0x46	; 70
    3f30:	df 4f       	sbci	r29, 0xFF	; 255
    3f32:	48 81       	ld	r20, Y
    3f34:	59 81       	ldd	r21, Y+1	; 0x01
    3f36:	ca 5b       	subi	r28, 0xBA	; 186
    3f38:	d0 40       	sbci	r29, 0x00	; 0
    3f3a:	4b 32       	cpi	r20, 0x2B	; 43
    3f3c:	51 05       	cpc	r21, r1
    3f3e:	31 f1       	breq	.+76     	; 0x3f8c <evaluateExpression+0x1b4>
    3f40:	c6 54       	subi	r28, 0x46	; 70
    3f42:	df 4f       	sbci	r29, 0xFF	; 255
    3f44:	88 81       	ld	r24, Y
    3f46:	99 81       	ldd	r25, Y+1	; 0x01
    3f48:	ca 5b       	subi	r28, 0xBA	; 186
    3f4a:	d0 40       	sbci	r29, 0x00	; 0
    3f4c:	8c 32       	cpi	r24, 0x2C	; 44
    3f4e:	91 05       	cpc	r25, r1
    3f50:	54 f4       	brge	.+20     	; 0x3f66 <evaluateExpression+0x18e>
    3f52:	c6 54       	subi	r28, 0x46	; 70
    3f54:	df 4f       	sbci	r29, 0xFF	; 255
    3f56:	28 81       	ld	r18, Y
    3f58:	39 81       	ldd	r19, Y+1	; 0x01
    3f5a:	ca 5b       	subi	r28, 0xBA	; 186
    3f5c:	d0 40       	sbci	r29, 0x00	; 0
    3f5e:	2a 32       	cpi	r18, 0x2A	; 42
    3f60:	31 05       	cpc	r19, r1
    3f62:	71 f1       	breq	.+92     	; 0x3fc0 <evaluateExpression+0x1e8>
    3f64:	4f c0       	rjmp	.+158    	; 0x4004 <evaluateExpression+0x22c>
    3f66:	c6 54       	subi	r28, 0x46	; 70
    3f68:	df 4f       	sbci	r29, 0xFF	; 255
    3f6a:	48 81       	ld	r20, Y
    3f6c:	59 81       	ldd	r21, Y+1	; 0x01
    3f6e:	ca 5b       	subi	r28, 0xBA	; 186
    3f70:	d0 40       	sbci	r29, 0x00	; 0
    3f72:	4d 32       	cpi	r20, 0x2D	; 45
    3f74:	51 05       	cpc	r21, r1
    3f76:	b9 f0       	breq	.+46     	; 0x3fa6 <evaluateExpression+0x1ce>
    3f78:	c6 54       	subi	r28, 0x46	; 70
    3f7a:	df 4f       	sbci	r29, 0xFF	; 255
    3f7c:	88 81       	ld	r24, Y
    3f7e:	99 81       	ldd	r25, Y+1	; 0x01
    3f80:	ca 5b       	subi	r28, 0xBA	; 186
    3f82:	d0 40       	sbci	r29, 0x00	; 0
    3f84:	8f 32       	cpi	r24, 0x2F	; 47
    3f86:	91 05       	cpc	r25, r1
    3f88:	71 f1       	breq	.+92     	; 0x3fe6 <evaluateExpression+0x20e>
    3f8a:	3c c0       	rjmp	.+120    	; 0x4004 <evaluateExpression+0x22c>
                    case '+':
                        push(&operandStack, operand1 + operand2);
    3f8c:	2e 81       	ldd	r18, Y+6	; 0x06
    3f8e:	3f 81       	ldd	r19, Y+7	; 0x07
    3f90:	88 85       	ldd	r24, Y+8	; 0x08
    3f92:	99 85       	ldd	r25, Y+9	; 0x09
    3f94:	28 0f       	add	r18, r24
    3f96:	39 1f       	adc	r19, r25
    3f98:	ce 01       	movw	r24, r28
    3f9a:	8c 59       	subi	r24, 0x9C	; 156
    3f9c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f9e:	b9 01       	movw	r22, r18
    3fa0:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <push>
    3fa4:	2f c0       	rjmp	.+94     	; 0x4004 <evaluateExpression+0x22c>
                        break;
                    case '-':
                        push(&operandStack, operand1 - operand2);
    3fa6:	2e 81       	ldd	r18, Y+6	; 0x06
    3fa8:	3f 81       	ldd	r19, Y+7	; 0x07
    3faa:	88 85       	ldd	r24, Y+8	; 0x08
    3fac:	99 85       	ldd	r25, Y+9	; 0x09
    3fae:	28 1b       	sub	r18, r24
    3fb0:	39 0b       	sbc	r19, r25
    3fb2:	ce 01       	movw	r24, r28
    3fb4:	8c 59       	subi	r24, 0x9C	; 156
    3fb6:	9f 4f       	sbci	r25, 0xFF	; 255
    3fb8:	b9 01       	movw	r22, r18
    3fba:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <push>
    3fbe:	22 c0       	rjmp	.+68     	; 0x4004 <evaluateExpression+0x22c>
                        break;
                    case '*':
                        push(&operandStack, operand1 * operand2);
    3fc0:	2e 81       	ldd	r18, Y+6	; 0x06
    3fc2:	3f 81       	ldd	r19, Y+7	; 0x07
    3fc4:	88 85       	ldd	r24, Y+8	; 0x08
    3fc6:	99 85       	ldd	r25, Y+9	; 0x09
    3fc8:	a9 01       	movw	r20, r18
    3fca:	48 9f       	mul	r20, r24
    3fcc:	90 01       	movw	r18, r0
    3fce:	49 9f       	mul	r20, r25
    3fd0:	30 0d       	add	r19, r0
    3fd2:	58 9f       	mul	r21, r24
    3fd4:	30 0d       	add	r19, r0
    3fd6:	11 24       	eor	r1, r1
    3fd8:	ce 01       	movw	r24, r28
    3fda:	8c 59       	subi	r24, 0x9C	; 156
    3fdc:	9f 4f       	sbci	r25, 0xFF	; 255
    3fde:	b9 01       	movw	r22, r18
    3fe0:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <push>
    3fe4:	0f c0       	rjmp	.+30     	; 0x4004 <evaluateExpression+0x22c>
                        break;
                    case '/':
                        push(&operandStack, operand1 / operand2);
    3fe6:	8e 81       	ldd	r24, Y+6	; 0x06
    3fe8:	9f 81       	ldd	r25, Y+7	; 0x07
    3fea:	28 85       	ldd	r18, Y+8	; 0x08
    3fec:	39 85       	ldd	r19, Y+9	; 0x09
    3fee:	b9 01       	movw	r22, r18
    3ff0:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <__divmodhi4>
    3ff4:	cb 01       	movw	r24, r22
    3ff6:	9c 01       	movw	r18, r24
    3ff8:	ce 01       	movw	r24, r28
    3ffa:	8c 59       	subi	r24, 0x9C	; 156
    3ffc:	9f 4f       	sbci	r25, 0xFF	; 255
    3ffe:	b9 01       	movw	r22, r18
    4000:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <push>
            }
            i--;  // Move back one position after the last digit

            push(&operandStack, num);
        } else if (isOperator(currentChar)) {
            while (operatorStack.top >= 0 &&
    4004:	fe 01       	movw	r30, r28
    4006:	ee 59       	subi	r30, 0x9E	; 158
    4008:	ff 4f       	sbci	r31, 0xFF	; 255
    400a:	80 81       	ld	r24, Z
    400c:	91 81       	ldd	r25, Z+1	; 0x01
    400e:	99 23       	and	r25, r25
    4010:	d4 f0       	brlt	.+52     	; 0x4046 <evaluateExpression+0x26e>
    4012:	fe 01       	movw	r30, r28
    4014:	ee 59       	subi	r30, 0x9E	; 158
    4016:	ff 4f       	sbci	r31, 0xFF	; 255
    4018:	80 81       	ld	r24, Z
    401a:	91 81       	ldd	r25, Z+1	; 0x01
    401c:	9c 01       	movw	r18, r24
    401e:	22 0f       	add	r18, r18
    4020:	33 1f       	adc	r19, r19
    4022:	ce 01       	movw	r24, r28
    4024:	01 96       	adiw	r24, 0x01	; 1
    4026:	82 0f       	add	r24, r18
    4028:	93 1f       	adc	r25, r19
    402a:	fc 01       	movw	r30, r24
    402c:	71 96       	adiw	r30, 0x11	; 17
    402e:	80 81       	ld	r24, Z
    4030:	91 81       	ldd	r25, Z+1	; 0x01
    4032:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <getPrecedence>
    4036:	8c 01       	movw	r16, r24
    4038:	8d 85       	ldd	r24, Y+13	; 0x0d
    403a:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <getPrecedence>
    403e:	08 17       	cp	r16, r24
    4040:	19 07       	cpc	r17, r25
    4042:	0c f0       	brlt	.+2      	; 0x4046 <evaluateExpression+0x26e>
    4044:	58 cf       	rjmp	.-336    	; 0x3ef6 <evaluateExpression+0x11e>
                        push(&operandStack, operand1 / operand2);
                        break;
                }
            }
            // Push the current operator onto the operator stack
            push(&operatorStack, currentChar);
    4046:	8d 85       	ldd	r24, Y+13	; 0x0d
    4048:	28 2f       	mov	r18, r24
    404a:	30 e0       	ldi	r19, 0x00	; 0
    404c:	ce 01       	movw	r24, r28
    404e:	42 96       	adiw	r24, 0x12	; 18
    4050:	b9 01       	movw	r22, r18
    4052:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <push>
    initializeStack(&operatorStack);
    initializeStack(&operandStack);

    int len = strlen(expression);

    for (int i = 0; i < len; i++) {
    4056:	8e 85       	ldd	r24, Y+14	; 0x0e
    4058:	9f 85       	ldd	r25, Y+15	; 0x0f
    405a:	01 96       	adiw	r24, 0x01	; 1
    405c:	9f 87       	std	Y+15, r25	; 0x0f
    405e:	8e 87       	std	Y+14, r24	; 0x0e
    4060:	2e 85       	ldd	r18, Y+14	; 0x0e
    4062:	3f 85       	ldd	r19, Y+15	; 0x0f
    4064:	88 89       	ldd	r24, Y+16	; 0x10
    4066:	99 89       	ldd	r25, Y+17	; 0x11
    4068:	28 17       	cp	r18, r24
    406a:	39 07       	cpc	r19, r25
    406c:	0c f4       	brge	.+2      	; 0x4070 <evaluateExpression+0x298>
    406e:	db ce       	rjmp	.-586    	; 0x3e26 <evaluateExpression+0x4e>
    4070:	87 c0       	rjmp	.+270    	; 0x4180 <evaluateExpression+0x3a8>
        }
    }

    // Process any remaining operators in the stack
    while (operatorStack.top >= 0) {
        char operator = pop(&operatorStack);
    4072:	ce 01       	movw	r24, r28
    4074:	42 96       	adiw	r24, 0x12	; 18
    4076:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <pop>
    407a:	8d 83       	std	Y+5, r24	; 0x05
        int operand2 = pop(&operandStack);
    407c:	ce 01       	movw	r24, r28
    407e:	8c 59       	subi	r24, 0x9C	; 156
    4080:	9f 4f       	sbci	r25, 0xFF	; 255
    4082:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <pop>
    4086:	9c 83       	std	Y+4, r25	; 0x04
    4088:	8b 83       	std	Y+3, r24	; 0x03
        int operand1 = pop(&operandStack);
    408a:	ce 01       	movw	r24, r28
    408c:	8c 59       	subi	r24, 0x9C	; 156
    408e:	9f 4f       	sbci	r25, 0xFF	; 255
    4090:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <pop>
    4094:	9a 83       	std	Y+2, r25	; 0x02
    4096:	89 83       	std	Y+1, r24	; 0x01

        // Perform the operation and push the result back to the operand stack
        switch (operator) {
    4098:	8d 81       	ldd	r24, Y+5	; 0x05
    409a:	28 2f       	mov	r18, r24
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	c8 54       	subi	r28, 0x48	; 72
    40a0:	df 4f       	sbci	r29, 0xFF	; 255
    40a2:	39 83       	std	Y+1, r19	; 0x01
    40a4:	28 83       	st	Y, r18
    40a6:	c8 5b       	subi	r28, 0xB8	; 184
    40a8:	d0 40       	sbci	r29, 0x00	; 0
    40aa:	c8 54       	subi	r28, 0x48	; 72
    40ac:	df 4f       	sbci	r29, 0xFF	; 255
    40ae:	48 81       	ld	r20, Y
    40b0:	59 81       	ldd	r21, Y+1	; 0x01
    40b2:	c8 5b       	subi	r28, 0xB8	; 184
    40b4:	d0 40       	sbci	r29, 0x00	; 0
    40b6:	4b 32       	cpi	r20, 0x2B	; 43
    40b8:	51 05       	cpc	r21, r1
    40ba:	31 f1       	breq	.+76     	; 0x4108 <evaluateExpression+0x330>
    40bc:	c8 54       	subi	r28, 0x48	; 72
    40be:	df 4f       	sbci	r29, 0xFF	; 255
    40c0:	88 81       	ld	r24, Y
    40c2:	99 81       	ldd	r25, Y+1	; 0x01
    40c4:	c8 5b       	subi	r28, 0xB8	; 184
    40c6:	d0 40       	sbci	r29, 0x00	; 0
    40c8:	8c 32       	cpi	r24, 0x2C	; 44
    40ca:	91 05       	cpc	r25, r1
    40cc:	54 f4       	brge	.+20     	; 0x40e2 <evaluateExpression+0x30a>
    40ce:	c8 54       	subi	r28, 0x48	; 72
    40d0:	df 4f       	sbci	r29, 0xFF	; 255
    40d2:	28 81       	ld	r18, Y
    40d4:	39 81       	ldd	r19, Y+1	; 0x01
    40d6:	c8 5b       	subi	r28, 0xB8	; 184
    40d8:	d0 40       	sbci	r29, 0x00	; 0
    40da:	2a 32       	cpi	r18, 0x2A	; 42
    40dc:	31 05       	cpc	r19, r1
    40de:	71 f1       	breq	.+92     	; 0x413c <evaluateExpression+0x364>
    40e0:	4f c0       	rjmp	.+158    	; 0x4180 <evaluateExpression+0x3a8>
    40e2:	c8 54       	subi	r28, 0x48	; 72
    40e4:	df 4f       	sbci	r29, 0xFF	; 255
    40e6:	48 81       	ld	r20, Y
    40e8:	59 81       	ldd	r21, Y+1	; 0x01
    40ea:	c8 5b       	subi	r28, 0xB8	; 184
    40ec:	d0 40       	sbci	r29, 0x00	; 0
    40ee:	4d 32       	cpi	r20, 0x2D	; 45
    40f0:	51 05       	cpc	r21, r1
    40f2:	b9 f0       	breq	.+46     	; 0x4122 <evaluateExpression+0x34a>
    40f4:	c8 54       	subi	r28, 0x48	; 72
    40f6:	df 4f       	sbci	r29, 0xFF	; 255
    40f8:	88 81       	ld	r24, Y
    40fa:	99 81       	ldd	r25, Y+1	; 0x01
    40fc:	c8 5b       	subi	r28, 0xB8	; 184
    40fe:	d0 40       	sbci	r29, 0x00	; 0
    4100:	8f 32       	cpi	r24, 0x2F	; 47
    4102:	91 05       	cpc	r25, r1
    4104:	71 f1       	breq	.+92     	; 0x4162 <evaluateExpression+0x38a>
    4106:	3c c0       	rjmp	.+120    	; 0x4180 <evaluateExpression+0x3a8>
            case '+':
                push(&operandStack, operand1 + operand2);
    4108:	29 81       	ldd	r18, Y+1	; 0x01
    410a:	3a 81       	ldd	r19, Y+2	; 0x02
    410c:	8b 81       	ldd	r24, Y+3	; 0x03
    410e:	9c 81       	ldd	r25, Y+4	; 0x04
    4110:	28 0f       	add	r18, r24
    4112:	39 1f       	adc	r19, r25
    4114:	ce 01       	movw	r24, r28
    4116:	8c 59       	subi	r24, 0x9C	; 156
    4118:	9f 4f       	sbci	r25, 0xFF	; 255
    411a:	b9 01       	movw	r22, r18
    411c:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <push>
    4120:	2f c0       	rjmp	.+94     	; 0x4180 <evaluateExpression+0x3a8>
                break;
            case '-':
                push(&operandStack, operand1 - operand2);
    4122:	29 81       	ldd	r18, Y+1	; 0x01
    4124:	3a 81       	ldd	r19, Y+2	; 0x02
    4126:	8b 81       	ldd	r24, Y+3	; 0x03
    4128:	9c 81       	ldd	r25, Y+4	; 0x04
    412a:	28 1b       	sub	r18, r24
    412c:	39 0b       	sbc	r19, r25
    412e:	ce 01       	movw	r24, r28
    4130:	8c 59       	subi	r24, 0x9C	; 156
    4132:	9f 4f       	sbci	r25, 0xFF	; 255
    4134:	b9 01       	movw	r22, r18
    4136:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <push>
    413a:	22 c0       	rjmp	.+68     	; 0x4180 <evaluateExpression+0x3a8>
                break;
            case '*':
                push(&operandStack, operand1 * operand2);
    413c:	29 81       	ldd	r18, Y+1	; 0x01
    413e:	3a 81       	ldd	r19, Y+2	; 0x02
    4140:	8b 81       	ldd	r24, Y+3	; 0x03
    4142:	9c 81       	ldd	r25, Y+4	; 0x04
    4144:	a9 01       	movw	r20, r18
    4146:	48 9f       	mul	r20, r24
    4148:	90 01       	movw	r18, r0
    414a:	49 9f       	mul	r20, r25
    414c:	30 0d       	add	r19, r0
    414e:	58 9f       	mul	r21, r24
    4150:	30 0d       	add	r19, r0
    4152:	11 24       	eor	r1, r1
    4154:	ce 01       	movw	r24, r28
    4156:	8c 59       	subi	r24, 0x9C	; 156
    4158:	9f 4f       	sbci	r25, 0xFF	; 255
    415a:	b9 01       	movw	r22, r18
    415c:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <push>
    4160:	0f c0       	rjmp	.+30     	; 0x4180 <evaluateExpression+0x3a8>
                break;
            case '/':
                push(&operandStack, operand1 / operand2);
    4162:	89 81       	ldd	r24, Y+1	; 0x01
    4164:	9a 81       	ldd	r25, Y+2	; 0x02
    4166:	2b 81       	ldd	r18, Y+3	; 0x03
    4168:	3c 81       	ldd	r19, Y+4	; 0x04
    416a:	b9 01       	movw	r22, r18
    416c:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <__divmodhi4>
    4170:	cb 01       	movw	r24, r22
    4172:	9c 01       	movw	r18, r24
    4174:	ce 01       	movw	r24, r28
    4176:	8c 59       	subi	r24, 0x9C	; 156
    4178:	9f 4f       	sbci	r25, 0xFF	; 255
    417a:	b9 01       	movw	r22, r18
    417c:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <push>
            push(&operatorStack, currentChar);
        }
    }

    // Process any remaining operators in the stack
    while (operatorStack.top >= 0) {
    4180:	fe 01       	movw	r30, r28
    4182:	ee 59       	subi	r30, 0x9E	; 158
    4184:	ff 4f       	sbci	r31, 0xFF	; 255
    4186:	80 81       	ld	r24, Z
    4188:	91 81       	ldd	r25, Z+1	; 0x01
    418a:	99 23       	and	r25, r25
    418c:	0c f0       	brlt	.+2      	; 0x4190 <evaluateExpression+0x3b8>
    418e:	71 cf       	rjmp	.-286    	; 0x4072 <evaluateExpression+0x29a>
                break;
        }
    }

    // The final result is at the top of the operand stack
    return pop(&operandStack);
    4190:	ce 01       	movw	r24, r28
    4192:	8c 59       	subi	r24, 0x9C	; 156
    4194:	9f 4f       	sbci	r25, 0xFF	; 255
    4196:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <pop>
}
    419a:	c5 54       	subi	r28, 0x45	; 69
    419c:	df 4f       	sbci	r29, 0xFF	; 255
    419e:	0f b6       	in	r0, 0x3f	; 63
    41a0:	f8 94       	cli
    41a2:	de bf       	out	0x3e, r29	; 62
    41a4:	0f be       	out	0x3f, r0	; 63
    41a6:	cd bf       	out	0x3d, r28	; 61
    41a8:	cf 91       	pop	r28
    41aa:	df 91       	pop	r29
    41ac:	1f 91       	pop	r17
    41ae:	0f 91       	pop	r16
    41b0:	08 95       	ret

000041b2 <CalculatorL1_Run>:
	 * Keypad_Port_id : Keypad Port .
	 * LCD_Mode_id : LCD Connection Mode .
	 * Keypad_Mode_id : Keypad Connection Mode .
 * Return Value: no return ( void ) .
 */
void CalculatorL1_Run(uint8 LCD_DataPort_id, uint8 LCD_ControlPort_id, uint8 Keypad_Port_id, uint8 LCD_Mode_id, uint8 Keypad_Mode_id) {
    41b2:	0f 93       	push	r16
    41b4:	df 93       	push	r29
    41b6:	cf 93       	push	r28
    41b8:	cd b7       	in	r28, 0x3d	; 61
    41ba:	de b7       	in	r29, 0x3e	; 62
    41bc:	ab 97       	sbiw	r28, 0x2b	; 43
    41be:	0f b6       	in	r0, 0x3f	; 63
    41c0:	f8 94       	cli
    41c2:	de bf       	out	0x3e, r29	; 62
    41c4:	0f be       	out	0x3f, r0	; 63
    41c6:	cd bf       	out	0x3d, r28	; 61
    41c8:	8f a3       	std	Y+39, r24	; 0x27
    41ca:	68 a7       	std	Y+40, r22	; 0x28
    41cc:	49 a7       	std	Y+41, r20	; 0x29
    41ce:	2a a7       	std	Y+42, r18	; 0x2a
    41d0:	0b a7       	std	Y+43, r16	; 0x2b

    // Initialize global variables with provided values.
    LCD_DataPort = LCD_DataPort_id;
    41d2:	8f a1       	ldd	r24, Y+39	; 0x27
    41d4:	80 93 51 01 	sts	0x0151, r24
    LCD_ControlPort = LCD_ControlPort_id;
    41d8:	88 a5       	ldd	r24, Y+40	; 0x28
    41da:	80 93 52 01 	sts	0x0152, r24
    Keypad_Port = Keypad_Port_id;
    41de:	89 a5       	ldd	r24, Y+41	; 0x29
    41e0:	80 93 53 01 	sts	0x0153, r24
    LCD_Mode = LCD_Mode_id;
    41e4:	8a a5       	ldd	r24, Y+42	; 0x2a
    41e6:	80 93 54 01 	sts	0x0154, r24
    Keypad_Mode = Keypad_Mode_id;
    41ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    41ec:	80 93 55 01 	sts	0x0155, r24

    // Initialize the LCD display and keypad.
    LCD_LcdInit(LCD_DataPort, LCD_ControlPort, MODE_8_BIT);
    41f0:	80 91 51 01 	lds	r24, 0x0151
    41f4:	90 91 52 01 	lds	r25, 0x0152
    41f8:	69 2f       	mov	r22, r25
    41fa:	41 e0       	ldi	r20, 0x01	; 1
    41fc:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_LcdInit>
    KEYPAD_KeypadInit(Keypad_Port, HALF_INPUT_OUTPUT);
    4200:	80 91 53 01 	lds	r24, 0x0153
    4204:	60 ef       	ldi	r22, 0xF0	; 240
    4206:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <KEYPAD_KeypadInit>

    // Display an introductory message and wait for a key press to start.
    CalculatorL1_StartStatement();
    420a:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <CalculatorL1_StartStatement>
    Operation:

    while (1) {
    	// OperationStatement will contain Whole Calculation Expression .
    	// StopIndex is index of last input ( = )
        uint8 OperationStatement[16], index = 0, StopIndex;
    420e:	1e 8a       	std	Y+22, r1	; 0x16
        uint8 KeyValue = 0xff;
    4210:	8f ef       	ldi	r24, 0xFF	; 255
    4212:	8c 8b       	std	Y+20, r24	; 0x14
        sint32 Number_1 = 0, Number_2 = 0;
    4214:	18 8a       	std	Y+16, r1	; 0x10
    4216:	19 8a       	std	Y+17, r1	; 0x11
    4218:	1a 8a       	std	Y+18, r1	; 0x12
    421a:	1b 8a       	std	Y+19, r1	; 0x13
    421c:	1c 86       	std	Y+12, r1	; 0x0c
    421e:	1d 86       	std	Y+13, r1	; 0x0d
    4220:	1e 86       	std	Y+14, r1	; 0x0e
    4222:	1f 86       	std	Y+15, r1	; 0x0f
        // To Handle Negative Values if Found .
        uint8 operator, Number_1Operator = '+', Number_2Operator = '+';
    4224:	8b e2       	ldi	r24, 0x2B	; 43
    4226:	8a 87       	std	Y+10, r24	; 0x0a
    4228:	8b e2       	ldi	r24, 0x2B	; 43
    422a:	89 87       	std	Y+9, r24	; 0x09
        uint8 Number_1Flag = 0, OperatorFlag = 0, Number_2Flag = 0;
    422c:	18 86       	std	Y+8, r1	; 0x08
    422e:	1f 82       	std	Y+7, r1	; 0x07
    4230:	1e 82       	std	Y+6, r1	; 0x06

        // Input loop to get the user's input.
        while (1) {
            KeyValue = KEYPAD_GetPressedKeyValue(Keypad_Port);
    4232:	80 91 53 01 	lds	r24, 0x0153
    4236:	0e 94 03 18 	call	0x3006	; 0x3006 <KEYPAD_GetPressedKeyValue>
    423a:	8c 8b       	std	Y+20, r24	; 0x14

            if (KeyValue == 0xff) {
    423c:	8c 89       	ldd	r24, Y+20	; 0x14
    423e:	8f 3f       	cpi	r24, 0xFF	; 255
    4240:	c1 f3       	breq	.-16     	; 0x4232 <CalculatorL1_Run+0x80>
                continue;
            } else if (KeyValue == 'c') {
    4242:	8c 89       	ldd	r24, Y+20	; 0x14
    4244:	83 36       	cpi	r24, 0x63	; 99
    4246:	19 f4       	brne	.+6      	; 0x424e <CalculatorL1_Run+0x9c>
                // Clear the LCD and start over if 'c' is pressed.
                LCD_ClearLCD();
    4248:	0e 94 84 17 	call	0x2f08	; 0x2f08 <LCD_ClearLCD>
    424c:	e0 cf       	rjmp	.-64     	; 0x420e <CalculatorL1_Run+0x5c>
                goto Operation;
            } else if (KeyValue == '=') {
    424e:	8c 89       	ldd	r24, Y+20	; 0x14
    4250:	8d 33       	cpi	r24, 0x3D	; 61
    4252:	21 f4       	brne	.+8      	; 0x425c <CalculatorL1_Run+0xaa>
                // End the input if '=' is pressed.
                StopIndex = index;
    4254:	8e 89       	ldd	r24, Y+22	; 0x16
    4256:	8d 8b       	std	Y+21, r24	; 0x15
            LCD_SendData(KeyValue);
        }

        // Parse the input and perform the calculation.
        uint8 counter;
        for (counter = 0; counter < StopIndex; ++counter) {
    4258:	1d 82       	std	Y+5, r1	; 0x05
    425a:	2e c1       	rjmp	.+604    	; 0x44b8 <CalculatorL1_Run+0x306>
            } else if (KeyValue == '=') {
                // End the input if '=' is pressed.
                StopIndex = index;
                break;
            } else {
                OperationStatement[index] = KeyValue;
    425c:	8e 89       	ldd	r24, Y+22	; 0x16
    425e:	28 2f       	mov	r18, r24
    4260:	30 e0       	ldi	r19, 0x00	; 0
    4262:	ce 01       	movw	r24, r28
    4264:	47 96       	adiw	r24, 0x17	; 23
    4266:	fc 01       	movw	r30, r24
    4268:	e2 0f       	add	r30, r18
    426a:	f3 1f       	adc	r31, r19
    426c:	8c 89       	ldd	r24, Y+20	; 0x14
    426e:	80 83       	st	Z, r24
                ++index;
    4270:	8e 89       	ldd	r24, Y+22	; 0x16
    4272:	8f 5f       	subi	r24, 0xFF	; 255
    4274:	8e 8b       	std	Y+22, r24	; 0x16
            }

            // Display the pressed key on the LCD.
            LCD_SendData(KeyValue);
    4276:	8c 89       	ldd	r24, Y+20	; 0x14
    4278:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_SendData>
    427c:	da cf       	rjmp	.-76     	; 0x4232 <CalculatorL1_Run+0x80>
        }

        // Parse the input and perform the calculation.
        uint8 counter;
        for (counter = 0; counter < StopIndex; ++counter) {
            if ((OperationStatement[counter] == '-') && (Number_1Flag == 0)) {
    427e:	8d 81       	ldd	r24, Y+5	; 0x05
    4280:	28 2f       	mov	r18, r24
    4282:	30 e0       	ldi	r19, 0x00	; 0
    4284:	ce 01       	movw	r24, r28
    4286:	47 96       	adiw	r24, 0x17	; 23
    4288:	fc 01       	movw	r30, r24
    428a:	e2 0f       	add	r30, r18
    428c:	f3 1f       	adc	r31, r19
    428e:	80 81       	ld	r24, Z
    4290:	8d 32       	cpi	r24, 0x2D	; 45
    4292:	71 f4       	brne	.+28     	; 0x42b0 <CalculatorL1_Run+0xfe>
    4294:	88 85       	ldd	r24, Y+8	; 0x08
    4296:	88 23       	and	r24, r24
    4298:	59 f4       	brne	.+22     	; 0x42b0 <CalculatorL1_Run+0xfe>
                Number_1Operator = OperationStatement[counter];
    429a:	8d 81       	ldd	r24, Y+5	; 0x05
    429c:	28 2f       	mov	r18, r24
    429e:	30 e0       	ldi	r19, 0x00	; 0
    42a0:	ce 01       	movw	r24, r28
    42a2:	47 96       	adiw	r24, 0x17	; 23
    42a4:	fc 01       	movw	r30, r24
    42a6:	e2 0f       	add	r30, r18
    42a8:	f3 1f       	adc	r31, r19
    42aa:	80 81       	ld	r24, Z
    42ac:	8a 87       	std	Y+10, r24	; 0x0a
    42ae:	01 c1       	rjmp	.+514    	; 0x44b2 <CalculatorL1_Run+0x300>
            } else if ((OperationStatement[counter] >= '0' && OperationStatement[counter] <= '9') &&
    42b0:	8d 81       	ldd	r24, Y+5	; 0x05
    42b2:	28 2f       	mov	r18, r24
    42b4:	30 e0       	ldi	r19, 0x00	; 0
    42b6:	ce 01       	movw	r24, r28
    42b8:	47 96       	adiw	r24, 0x17	; 23
    42ba:	fc 01       	movw	r30, r24
    42bc:	e2 0f       	add	r30, r18
    42be:	f3 1f       	adc	r31, r19
    42c0:	80 81       	ld	r24, Z
    42c2:	80 33       	cpi	r24, 0x30	; 48
    42c4:	08 f4       	brcc	.+2      	; 0x42c8 <CalculatorL1_Run+0x116>
    42c6:	43 c0       	rjmp	.+134    	; 0x434e <CalculatorL1_Run+0x19c>
    42c8:	8d 81       	ldd	r24, Y+5	; 0x05
    42ca:	28 2f       	mov	r18, r24
    42cc:	30 e0       	ldi	r19, 0x00	; 0
    42ce:	ce 01       	movw	r24, r28
    42d0:	47 96       	adiw	r24, 0x17	; 23
    42d2:	fc 01       	movw	r30, r24
    42d4:	e2 0f       	add	r30, r18
    42d6:	f3 1f       	adc	r31, r19
    42d8:	80 81       	ld	r24, Z
    42da:	8a 33       	cpi	r24, 0x3A	; 58
    42dc:	c0 f5       	brcc	.+112    	; 0x434e <CalculatorL1_Run+0x19c>
    42de:	8f 81       	ldd	r24, Y+7	; 0x07
    42e0:	88 23       	and	r24, r24
    42e2:	a9 f5       	brne	.+106    	; 0x434e <CalculatorL1_Run+0x19c>
    42e4:	8e 81       	ldd	r24, Y+6	; 0x06
    42e6:	88 23       	and	r24, r24
    42e8:	91 f5       	brne	.+100    	; 0x434e <CalculatorL1_Run+0x19c>
                       (OperatorFlag == 0) && (Number_2Flag == 0)) {
                Number_1Flag = 1;
    42ea:	81 e0       	ldi	r24, 0x01	; 1
    42ec:	88 87       	std	Y+8, r24	; 0x08
                Number_1 += (OperationStatement[counter] - '0');
    42ee:	8d 81       	ldd	r24, Y+5	; 0x05
    42f0:	28 2f       	mov	r18, r24
    42f2:	30 e0       	ldi	r19, 0x00	; 0
    42f4:	ce 01       	movw	r24, r28
    42f6:	47 96       	adiw	r24, 0x17	; 23
    42f8:	fc 01       	movw	r30, r24
    42fa:	e2 0f       	add	r30, r18
    42fc:	f3 1f       	adc	r31, r19
    42fe:	80 81       	ld	r24, Z
    4300:	88 2f       	mov	r24, r24
    4302:	90 e0       	ldi	r25, 0x00	; 0
    4304:	c0 97       	sbiw	r24, 0x30	; 48
    4306:	9c 01       	movw	r18, r24
    4308:	44 27       	eor	r20, r20
    430a:	37 fd       	sbrc	r19, 7
    430c:	40 95       	com	r20
    430e:	54 2f       	mov	r21, r20
    4310:	88 89       	ldd	r24, Y+16	; 0x10
    4312:	99 89       	ldd	r25, Y+17	; 0x11
    4314:	aa 89       	ldd	r26, Y+18	; 0x12
    4316:	bb 89       	ldd	r27, Y+19	; 0x13
    4318:	82 0f       	add	r24, r18
    431a:	93 1f       	adc	r25, r19
    431c:	a4 1f       	adc	r26, r20
    431e:	b5 1f       	adc	r27, r21
    4320:	88 8b       	std	Y+16, r24	; 0x10
    4322:	99 8b       	std	Y+17, r25	; 0x11
    4324:	aa 8b       	std	Y+18, r26	; 0x12
    4326:	bb 8b       	std	Y+19, r27	; 0x13
                Number_1 *= 10;
    4328:	88 89       	ldd	r24, Y+16	; 0x10
    432a:	99 89       	ldd	r25, Y+17	; 0x11
    432c:	aa 89       	ldd	r26, Y+18	; 0x12
    432e:	bb 89       	ldd	r27, Y+19	; 0x13
    4330:	2a e0       	ldi	r18, 0x0A	; 10
    4332:	30 e0       	ldi	r19, 0x00	; 0
    4334:	40 e0       	ldi	r20, 0x00	; 0
    4336:	50 e0       	ldi	r21, 0x00	; 0
    4338:	bc 01       	movw	r22, r24
    433a:	cd 01       	movw	r24, r26
    433c:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__mulsi3>
    4340:	dc 01       	movw	r26, r24
    4342:	cb 01       	movw	r24, r22
    4344:	88 8b       	std	Y+16, r24	; 0x10
    4346:	99 8b       	std	Y+17, r25	; 0x11
    4348:	aa 8b       	std	Y+18, r26	; 0x12
    434a:	bb 8b       	std	Y+19, r27	; 0x13
    434c:	b2 c0       	rjmp	.+356    	; 0x44b2 <CalculatorL1_Run+0x300>
            } else if ((OperationStatement[counter] == '+' || OperationStatement[counter] == '-' ||
    434e:	8d 81       	ldd	r24, Y+5	; 0x05
    4350:	28 2f       	mov	r18, r24
    4352:	30 e0       	ldi	r19, 0x00	; 0
    4354:	ce 01       	movw	r24, r28
    4356:	47 96       	adiw	r24, 0x17	; 23
    4358:	fc 01       	movw	r30, r24
    435a:	e2 0f       	add	r30, r18
    435c:	f3 1f       	adc	r31, r19
    435e:	80 81       	ld	r24, Z
    4360:	8b 32       	cpi	r24, 0x2B	; 43
    4362:	09 f1       	breq	.+66     	; 0x43a6 <CalculatorL1_Run+0x1f4>
    4364:	8d 81       	ldd	r24, Y+5	; 0x05
    4366:	28 2f       	mov	r18, r24
    4368:	30 e0       	ldi	r19, 0x00	; 0
    436a:	ce 01       	movw	r24, r28
    436c:	47 96       	adiw	r24, 0x17	; 23
    436e:	fc 01       	movw	r30, r24
    4370:	e2 0f       	add	r30, r18
    4372:	f3 1f       	adc	r31, r19
    4374:	80 81       	ld	r24, Z
    4376:	8d 32       	cpi	r24, 0x2D	; 45
    4378:	b1 f0       	breq	.+44     	; 0x43a6 <CalculatorL1_Run+0x1f4>
    437a:	8d 81       	ldd	r24, Y+5	; 0x05
    437c:	28 2f       	mov	r18, r24
    437e:	30 e0       	ldi	r19, 0x00	; 0
    4380:	ce 01       	movw	r24, r28
    4382:	47 96       	adiw	r24, 0x17	; 23
    4384:	fc 01       	movw	r30, r24
    4386:	e2 0f       	add	r30, r18
    4388:	f3 1f       	adc	r31, r19
    438a:	80 81       	ld	r24, Z
    438c:	8a 32       	cpi	r24, 0x2A	; 42
    438e:	59 f0       	breq	.+22     	; 0x43a6 <CalculatorL1_Run+0x1f4>
    4390:	8d 81       	ldd	r24, Y+5	; 0x05
    4392:	28 2f       	mov	r18, r24
    4394:	30 e0       	ldi	r19, 0x00	; 0
    4396:	ce 01       	movw	r24, r28
    4398:	47 96       	adiw	r24, 0x17	; 23
    439a:	fc 01       	movw	r30, r24
    439c:	e2 0f       	add	r30, r18
    439e:	f3 1f       	adc	r31, r19
    43a0:	80 81       	ld	r24, Z
    43a2:	8f 32       	cpi	r24, 0x2F	; 47
    43a4:	99 f4       	brne	.+38     	; 0x43cc <CalculatorL1_Run+0x21a>
    43a6:	88 85       	ldd	r24, Y+8	; 0x08
    43a8:	81 30       	cpi	r24, 0x01	; 1
    43aa:	81 f4       	brne	.+32     	; 0x43cc <CalculatorL1_Run+0x21a>
    43ac:	8f 81       	ldd	r24, Y+7	; 0x07
    43ae:	88 23       	and	r24, r24
    43b0:	69 f4       	brne	.+26     	; 0x43cc <CalculatorL1_Run+0x21a>
                        OperationStatement[counter] == '*' || OperationStatement[counter] == '/') &&
                       (Number_1Flag == 1) && (OperatorFlag == 0)) {
                OperatorFlag = 1;
    43b2:	81 e0       	ldi	r24, 0x01	; 1
    43b4:	8f 83       	std	Y+7, r24	; 0x07
                operator = OperationStatement[counter];
    43b6:	8d 81       	ldd	r24, Y+5	; 0x05
    43b8:	28 2f       	mov	r18, r24
    43ba:	30 e0       	ldi	r19, 0x00	; 0
    43bc:	ce 01       	movw	r24, r28
    43be:	47 96       	adiw	r24, 0x17	; 23
    43c0:	fc 01       	movw	r30, r24
    43c2:	e2 0f       	add	r30, r18
    43c4:	f3 1f       	adc	r31, r19
    43c6:	80 81       	ld	r24, Z
    43c8:	8b 87       	std	Y+11, r24	; 0x0b
    43ca:	73 c0       	rjmp	.+230    	; 0x44b2 <CalculatorL1_Run+0x300>
            } else if ((OperationStatement[counter] == '-') && (Number_1Flag == 1) && (OperatorFlag == 1)) {
    43cc:	8d 81       	ldd	r24, Y+5	; 0x05
    43ce:	28 2f       	mov	r18, r24
    43d0:	30 e0       	ldi	r19, 0x00	; 0
    43d2:	ce 01       	movw	r24, r28
    43d4:	47 96       	adiw	r24, 0x17	; 23
    43d6:	fc 01       	movw	r30, r24
    43d8:	e2 0f       	add	r30, r18
    43da:	f3 1f       	adc	r31, r19
    43dc:	80 81       	ld	r24, Z
    43de:	8d 32       	cpi	r24, 0x2D	; 45
    43e0:	89 f4       	brne	.+34     	; 0x4404 <CalculatorL1_Run+0x252>
    43e2:	88 85       	ldd	r24, Y+8	; 0x08
    43e4:	81 30       	cpi	r24, 0x01	; 1
    43e6:	71 f4       	brne	.+28     	; 0x4404 <CalculatorL1_Run+0x252>
    43e8:	8f 81       	ldd	r24, Y+7	; 0x07
    43ea:	81 30       	cpi	r24, 0x01	; 1
    43ec:	59 f4       	brne	.+22     	; 0x4404 <CalculatorL1_Run+0x252>
                Number_2Operator = OperationStatement[counter];
    43ee:	8d 81       	ldd	r24, Y+5	; 0x05
    43f0:	28 2f       	mov	r18, r24
    43f2:	30 e0       	ldi	r19, 0x00	; 0
    43f4:	ce 01       	movw	r24, r28
    43f6:	47 96       	adiw	r24, 0x17	; 23
    43f8:	fc 01       	movw	r30, r24
    43fa:	e2 0f       	add	r30, r18
    43fc:	f3 1f       	adc	r31, r19
    43fe:	80 81       	ld	r24, Z
    4400:	89 87       	std	Y+9, r24	; 0x09
    4402:	57 c0       	rjmp	.+174    	; 0x44b2 <CalculatorL1_Run+0x300>
            } else if ((OperationStatement[counter] >= '0' && OperationStatement[counter] <= '9') &&
    4404:	8d 81       	ldd	r24, Y+5	; 0x05
    4406:	28 2f       	mov	r18, r24
    4408:	30 e0       	ldi	r19, 0x00	; 0
    440a:	ce 01       	movw	r24, r28
    440c:	47 96       	adiw	r24, 0x17	; 23
    440e:	fc 01       	movw	r30, r24
    4410:	e2 0f       	add	r30, r18
    4412:	f3 1f       	adc	r31, r19
    4414:	80 81       	ld	r24, Z
    4416:	80 33       	cpi	r24, 0x30	; 48
    4418:	08 f4       	brcc	.+2      	; 0x441c <CalculatorL1_Run+0x26a>
    441a:	43 c0       	rjmp	.+134    	; 0x44a2 <CalculatorL1_Run+0x2f0>
    441c:	8d 81       	ldd	r24, Y+5	; 0x05
    441e:	28 2f       	mov	r18, r24
    4420:	30 e0       	ldi	r19, 0x00	; 0
    4422:	ce 01       	movw	r24, r28
    4424:	47 96       	adiw	r24, 0x17	; 23
    4426:	fc 01       	movw	r30, r24
    4428:	e2 0f       	add	r30, r18
    442a:	f3 1f       	adc	r31, r19
    442c:	80 81       	ld	r24, Z
    442e:	8a 33       	cpi	r24, 0x3A	; 58
    4430:	c0 f5       	brcc	.+112    	; 0x44a2 <CalculatorL1_Run+0x2f0>
    4432:	88 85       	ldd	r24, Y+8	; 0x08
    4434:	81 30       	cpi	r24, 0x01	; 1
    4436:	a9 f5       	brne	.+106    	; 0x44a2 <CalculatorL1_Run+0x2f0>
    4438:	8f 81       	ldd	r24, Y+7	; 0x07
    443a:	81 30       	cpi	r24, 0x01	; 1
    443c:	91 f5       	brne	.+100    	; 0x44a2 <CalculatorL1_Run+0x2f0>
                       (Number_1Flag == 1) && (OperatorFlag == 1)) {
                Number_2Flag = 1;
    443e:	81 e0       	ldi	r24, 0x01	; 1
    4440:	8e 83       	std	Y+6, r24	; 0x06
                Number_2 += (OperationStatement[counter] - '0');
    4442:	8d 81       	ldd	r24, Y+5	; 0x05
    4444:	28 2f       	mov	r18, r24
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	ce 01       	movw	r24, r28
    444a:	47 96       	adiw	r24, 0x17	; 23
    444c:	fc 01       	movw	r30, r24
    444e:	e2 0f       	add	r30, r18
    4450:	f3 1f       	adc	r31, r19
    4452:	80 81       	ld	r24, Z
    4454:	88 2f       	mov	r24, r24
    4456:	90 e0       	ldi	r25, 0x00	; 0
    4458:	c0 97       	sbiw	r24, 0x30	; 48
    445a:	9c 01       	movw	r18, r24
    445c:	44 27       	eor	r20, r20
    445e:	37 fd       	sbrc	r19, 7
    4460:	40 95       	com	r20
    4462:	54 2f       	mov	r21, r20
    4464:	8c 85       	ldd	r24, Y+12	; 0x0c
    4466:	9d 85       	ldd	r25, Y+13	; 0x0d
    4468:	ae 85       	ldd	r26, Y+14	; 0x0e
    446a:	bf 85       	ldd	r27, Y+15	; 0x0f
    446c:	82 0f       	add	r24, r18
    446e:	93 1f       	adc	r25, r19
    4470:	a4 1f       	adc	r26, r20
    4472:	b5 1f       	adc	r27, r21
    4474:	8c 87       	std	Y+12, r24	; 0x0c
    4476:	9d 87       	std	Y+13, r25	; 0x0d
    4478:	ae 87       	std	Y+14, r26	; 0x0e
    447a:	bf 87       	std	Y+15, r27	; 0x0f
                Number_2 *= 10;
    447c:	8c 85       	ldd	r24, Y+12	; 0x0c
    447e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4480:	ae 85       	ldd	r26, Y+14	; 0x0e
    4482:	bf 85       	ldd	r27, Y+15	; 0x0f
    4484:	2a e0       	ldi	r18, 0x0A	; 10
    4486:	30 e0       	ldi	r19, 0x00	; 0
    4488:	40 e0       	ldi	r20, 0x00	; 0
    448a:	50 e0       	ldi	r21, 0x00	; 0
    448c:	bc 01       	movw	r22, r24
    448e:	cd 01       	movw	r24, r26
    4490:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__mulsi3>
    4494:	dc 01       	movw	r26, r24
    4496:	cb 01       	movw	r24, r22
    4498:	8c 87       	std	Y+12, r24	; 0x0c
    449a:	9d 87       	std	Y+13, r25	; 0x0d
    449c:	ae 87       	std	Y+14, r26	; 0x0e
    449e:	bf 87       	std	Y+15, r27	; 0x0f
    44a0:	08 c0       	rjmp	.+16     	; 0x44b2 <CalculatorL1_Run+0x300>
            } else {
                // Display an error message if an invalid character is encountered.
                LCD_MoveCursor(2, 9);
    44a2:	82 e0       	ldi	r24, 0x02	; 2
    44a4:	69 e0       	ldi	r22, 0x09	; 9
    44a6:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_MoveCursor>
                LCD_DisplayString("Error !");
    44aa:	87 ed       	ldi	r24, 0xD7	; 215
    44ac:	90 e0       	ldi	r25, 0x00	; 0
    44ae:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_DisplayString>
            LCD_SendData(KeyValue);
        }

        // Parse the input and perform the calculation.
        uint8 counter;
        for (counter = 0; counter < StopIndex; ++counter) {
    44b2:	8d 81       	ldd	r24, Y+5	; 0x05
    44b4:	8f 5f       	subi	r24, 0xFF	; 255
    44b6:	8d 83       	std	Y+5, r24	; 0x05
    44b8:	9d 81       	ldd	r25, Y+5	; 0x05
    44ba:	8d 89       	ldd	r24, Y+21	; 0x15
    44bc:	98 17       	cp	r25, r24
    44be:	08 f4       	brcc	.+2      	; 0x44c2 <CalculatorL1_Run+0x310>
    44c0:	de ce       	rjmp	.-580    	; 0x427e <CalculatorL1_Run+0xcc>
                LCD_DisplayString("Error !");
            }
        }

        // Handle negative numbers.
        if (Number_1Operator == '-') {
    44c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    44c4:	8d 32       	cpi	r24, 0x2D	; 45
    44c6:	79 f4       	brne	.+30     	; 0x44e6 <CalculatorL1_Run+0x334>
            Number_1 *= -1;
    44c8:	88 89       	ldd	r24, Y+16	; 0x10
    44ca:	99 89       	ldd	r25, Y+17	; 0x11
    44cc:	aa 89       	ldd	r26, Y+18	; 0x12
    44ce:	bb 89       	ldd	r27, Y+19	; 0x13
    44d0:	b0 95       	com	r27
    44d2:	a0 95       	com	r26
    44d4:	90 95       	com	r25
    44d6:	81 95       	neg	r24
    44d8:	9f 4f       	sbci	r25, 0xFF	; 255
    44da:	af 4f       	sbci	r26, 0xFF	; 255
    44dc:	bf 4f       	sbci	r27, 0xFF	; 255
    44de:	88 8b       	std	Y+16, r24	; 0x10
    44e0:	99 8b       	std	Y+17, r25	; 0x11
    44e2:	aa 8b       	std	Y+18, r26	; 0x12
    44e4:	bb 8b       	std	Y+19, r27	; 0x13
        }
        if (Number_2Operator == '-') {
    44e6:	89 85       	ldd	r24, Y+9	; 0x09
    44e8:	8d 32       	cpi	r24, 0x2D	; 45
    44ea:	79 f4       	brne	.+30     	; 0x450a <CalculatorL1_Run+0x358>
            Number_2 *= -1;
    44ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    44ee:	9d 85       	ldd	r25, Y+13	; 0x0d
    44f0:	ae 85       	ldd	r26, Y+14	; 0x0e
    44f2:	bf 85       	ldd	r27, Y+15	; 0x0f
    44f4:	b0 95       	com	r27
    44f6:	a0 95       	com	r26
    44f8:	90 95       	com	r25
    44fa:	81 95       	neg	r24
    44fc:	9f 4f       	sbci	r25, 0xFF	; 255
    44fe:	af 4f       	sbci	r26, 0xFF	; 255
    4500:	bf 4f       	sbci	r27, 0xFF	; 255
    4502:	8c 87       	std	Y+12, r24	; 0x0c
    4504:	9d 87       	std	Y+13, r25	; 0x0d
    4506:	ae 87       	std	Y+14, r26	; 0x0e
    4508:	bf 87       	std	Y+15, r27	; 0x0f
        }

        // Remove the extra factor of 10 from parsing.
        Number_1 /= 10;
    450a:	88 89       	ldd	r24, Y+16	; 0x10
    450c:	99 89       	ldd	r25, Y+17	; 0x11
    450e:	aa 89       	ldd	r26, Y+18	; 0x12
    4510:	bb 89       	ldd	r27, Y+19	; 0x13
    4512:	2a e0       	ldi	r18, 0x0A	; 10
    4514:	30 e0       	ldi	r19, 0x00	; 0
    4516:	40 e0       	ldi	r20, 0x00	; 0
    4518:	50 e0       	ldi	r21, 0x00	; 0
    451a:	bc 01       	movw	r22, r24
    451c:	cd 01       	movw	r24, r26
    451e:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <__divmodsi4>
    4522:	da 01       	movw	r26, r20
    4524:	c9 01       	movw	r24, r18
    4526:	88 8b       	std	Y+16, r24	; 0x10
    4528:	99 8b       	std	Y+17, r25	; 0x11
    452a:	aa 8b       	std	Y+18, r26	; 0x12
    452c:	bb 8b       	std	Y+19, r27	; 0x13
        Number_2 /= 10;
    452e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4530:	9d 85       	ldd	r25, Y+13	; 0x0d
    4532:	ae 85       	ldd	r26, Y+14	; 0x0e
    4534:	bf 85       	ldd	r27, Y+15	; 0x0f
    4536:	2a e0       	ldi	r18, 0x0A	; 10
    4538:	30 e0       	ldi	r19, 0x00	; 0
    453a:	40 e0       	ldi	r20, 0x00	; 0
    453c:	50 e0       	ldi	r21, 0x00	; 0
    453e:	bc 01       	movw	r22, r24
    4540:	cd 01       	movw	r24, r26
    4542:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <__divmodsi4>
    4546:	da 01       	movw	r26, r20
    4548:	c9 01       	movw	r24, r18
    454a:	8c 87       	std	Y+12, r24	; 0x0c
    454c:	9d 87       	std	Y+13, r25	; 0x0d
    454e:	ae 87       	std	Y+14, r26	; 0x0e
    4550:	bf 87       	std	Y+15, r27	; 0x0f

        // Calculate the result .
        sint32 Result;
        Result = CalculatorL1_ResultCalc(Number_1, Number_2, operator);
    4552:	88 89       	ldd	r24, Y+16	; 0x10
    4554:	99 89       	ldd	r25, Y+17	; 0x11
    4556:	aa 89       	ldd	r26, Y+18	; 0x12
    4558:	bb 89       	ldd	r27, Y+19	; 0x13
    455a:	2c 85       	ldd	r18, Y+12	; 0x0c
    455c:	3d 85       	ldd	r19, Y+13	; 0x0d
    455e:	4e 85       	ldd	r20, Y+14	; 0x0e
    4560:	5f 85       	ldd	r21, Y+15	; 0x0f
    4562:	bc 01       	movw	r22, r24
    4564:	cd 01       	movw	r24, r26
    4566:	0b 85       	ldd	r16, Y+11	; 0x0b
    4568:	0e 94 0b 24 	call	0x4816	; 0x4816 <CalculatorL1_ResultCalc>
    456c:	dc 01       	movw	r26, r24
    456e:	cb 01       	movw	r24, r22
    4570:	89 83       	std	Y+1, r24	; 0x01
    4572:	9a 83       	std	Y+2, r25	; 0x02
    4574:	ab 83       	std	Y+3, r26	; 0x03
    4576:	bc 83       	std	Y+4, r27	; 0x04

        // Display the result on the LCD or an error message if an error occurred.
        LCD_MoveCursor(2, 0);
    4578:	82 e0       	ldi	r24, 0x02	; 2
    457a:	60 e0       	ldi	r22, 0x00	; 0
    457c:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_MoveCursor>
        if (Result == "Error") {
    4580:	89 81       	ldd	r24, Y+1	; 0x01
    4582:	9a 81       	ldd	r25, Y+2	; 0x02
    4584:	20 e0       	ldi	r18, 0x00	; 0
    4586:	8f 3d       	cpi	r24, 0xDF	; 223
    4588:	92 07       	cpc	r25, r18
    458a:	49 f4       	brne	.+18     	; 0x459e <CalculatorL1_Run+0x3ec>
            LCD_MoveCursor(2, 9);
    458c:	82 e0       	ldi	r24, 0x02	; 2
    458e:	69 e0       	ldi	r22, 0x09	; 9
    4590:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_MoveCursor>
            LCD_DisplayString("Error !");
    4594:	87 ed       	ldi	r24, 0xD7	; 215
    4596:	90 e0       	ldi	r25, 0x00	; 0
    4598:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_DisplayString>
    459c:	38 ce       	rjmp	.-912    	; 0x420e <CalculatorL1_Run+0x5c>
        } else {
            LCD_DisplayNumber(Result);
    459e:	89 81       	ldd	r24, Y+1	; 0x01
    45a0:	9a 81       	ldd	r25, Y+2	; 0x02
    45a2:	ab 81       	ldd	r26, Y+3	; 0x03
    45a4:	bc 81       	ldd	r27, Y+4	; 0x04
    45a6:	bc 01       	movw	r22, r24
    45a8:	cd 01       	movw	r24, r26
    45aa:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_DisplayNumber>
    45ae:	2f ce       	rjmp	.-930    	; 0x420e <CalculatorL1_Run+0x5c>

000045b0 <CalculatorL1_StartStatement>:
 * Description: This function is used to print a start on LCD .
 * Arguments:
	 * No Arguments .
 * Return Value: no return ( void ) .
 */
static void CalculatorL1_StartStatement(void) {
    45b0:	df 93       	push	r29
    45b2:	cf 93       	push	r28
    45b4:	cd b7       	in	r28, 0x3d	; 61
    45b6:	de b7       	in	r29, 0x3e	; 62
    45b8:	6c 97       	sbiw	r28, 0x1c	; 28
    45ba:	0f b6       	in	r0, 0x3f	; 63
    45bc:	f8 94       	cli
    45be:	de bf       	out	0x3e, r29	; 62
    45c0:	0f be       	out	0x3f, r0	; 63
    45c2:	cd bf       	out	0x3d, r28	; 61
    // Display "Simple" on the first line at column 5 of an LCD screen.
    LCD_MoveCursor(1, 5);
    45c4:	81 e0       	ldi	r24, 0x01	; 1
    45c6:	65 e0       	ldi	r22, 0x05	; 5
    45c8:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_MoveCursor>
    LCD_DisplayString("Simple");
    45cc:	85 ee       	ldi	r24, 0xE5	; 229
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_DisplayString>

    // Display "Calculator" on the second line at column 3 of the same LCD screen.
    LCD_MoveCursor(2, 3);
    45d4:	82 e0       	ldi	r24, 0x02	; 2
    45d6:	63 e0       	ldi	r22, 0x03	; 3
    45d8:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_MoveCursor>
    LCD_DisplayString("Calculator");
    45dc:	8c ee       	ldi	r24, 0xEC	; 236
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_DisplayString>
    45e4:	80 e0       	ldi	r24, 0x00	; 0
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	aa ef       	ldi	r26, 0xFA	; 250
    45ea:	b4 e4       	ldi	r27, 0x44	; 68
    45ec:	89 8f       	std	Y+25, r24	; 0x19
    45ee:	9a 8f       	std	Y+26, r25	; 0x1a
    45f0:	ab 8f       	std	Y+27, r26	; 0x1b
    45f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45f4:	69 8d       	ldd	r22, Y+25	; 0x19
    45f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45fc:	20 e0       	ldi	r18, 0x00	; 0
    45fe:	30 e0       	ldi	r19, 0x00	; 0
    4600:	4a e7       	ldi	r20, 0x7A	; 122
    4602:	53 e4       	ldi	r21, 0x43	; 67
    4604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4608:	dc 01       	movw	r26, r24
    460a:	cb 01       	movw	r24, r22
    460c:	8d 8b       	std	Y+21, r24	; 0x15
    460e:	9e 8b       	std	Y+22, r25	; 0x16
    4610:	af 8b       	std	Y+23, r26	; 0x17
    4612:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4614:	6d 89       	ldd	r22, Y+21	; 0x15
    4616:	7e 89       	ldd	r23, Y+22	; 0x16
    4618:	8f 89       	ldd	r24, Y+23	; 0x17
    461a:	98 8d       	ldd	r25, Y+24	; 0x18
    461c:	20 e0       	ldi	r18, 0x00	; 0
    461e:	30 e0       	ldi	r19, 0x00	; 0
    4620:	40 e8       	ldi	r20, 0x80	; 128
    4622:	5f e3       	ldi	r21, 0x3F	; 63
    4624:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4628:	88 23       	and	r24, r24
    462a:	2c f4       	brge	.+10     	; 0x4636 <CalculatorL1_StartStatement+0x86>
		__ticks = 1;
    462c:	81 e0       	ldi	r24, 0x01	; 1
    462e:	90 e0       	ldi	r25, 0x00	; 0
    4630:	9c 8b       	std	Y+20, r25	; 0x14
    4632:	8b 8b       	std	Y+19, r24	; 0x13
    4634:	3f c0       	rjmp	.+126    	; 0x46b4 <CalculatorL1_StartStatement+0x104>
	else if (__tmp > 65535)
    4636:	6d 89       	ldd	r22, Y+21	; 0x15
    4638:	7e 89       	ldd	r23, Y+22	; 0x16
    463a:	8f 89       	ldd	r24, Y+23	; 0x17
    463c:	98 8d       	ldd	r25, Y+24	; 0x18
    463e:	20 e0       	ldi	r18, 0x00	; 0
    4640:	3f ef       	ldi	r19, 0xFF	; 255
    4642:	4f e7       	ldi	r20, 0x7F	; 127
    4644:	57 e4       	ldi	r21, 0x47	; 71
    4646:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    464a:	18 16       	cp	r1, r24
    464c:	4c f5       	brge	.+82     	; 0x46a0 <CalculatorL1_StartStatement+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    464e:	69 8d       	ldd	r22, Y+25	; 0x19
    4650:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4652:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4654:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4656:	20 e0       	ldi	r18, 0x00	; 0
    4658:	30 e0       	ldi	r19, 0x00	; 0
    465a:	40 e2       	ldi	r20, 0x20	; 32
    465c:	51 e4       	ldi	r21, 0x41	; 65
    465e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4662:	dc 01       	movw	r26, r24
    4664:	cb 01       	movw	r24, r22
    4666:	bc 01       	movw	r22, r24
    4668:	cd 01       	movw	r24, r26
    466a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    466e:	dc 01       	movw	r26, r24
    4670:	cb 01       	movw	r24, r22
    4672:	9c 8b       	std	Y+20, r25	; 0x14
    4674:	8b 8b       	std	Y+19, r24	; 0x13
    4676:	0f c0       	rjmp	.+30     	; 0x4696 <CalculatorL1_StartStatement+0xe6>
    4678:	89 e1       	ldi	r24, 0x19	; 25
    467a:	90 e0       	ldi	r25, 0x00	; 0
    467c:	9a 8b       	std	Y+18, r25	; 0x12
    467e:	89 8b       	std	Y+17, r24	; 0x11
    4680:	89 89       	ldd	r24, Y+17	; 0x11
    4682:	9a 89       	ldd	r25, Y+18	; 0x12
    4684:	01 97       	sbiw	r24, 0x01	; 1
    4686:	f1 f7       	brne	.-4      	; 0x4684 <CalculatorL1_StartStatement+0xd4>
    4688:	9a 8b       	std	Y+18, r25	; 0x12
    468a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    468c:	8b 89       	ldd	r24, Y+19	; 0x13
    468e:	9c 89       	ldd	r25, Y+20	; 0x14
    4690:	01 97       	sbiw	r24, 0x01	; 1
    4692:	9c 8b       	std	Y+20, r25	; 0x14
    4694:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4696:	8b 89       	ldd	r24, Y+19	; 0x13
    4698:	9c 89       	ldd	r25, Y+20	; 0x14
    469a:	00 97       	sbiw	r24, 0x00	; 0
    469c:	69 f7       	brne	.-38     	; 0x4678 <CalculatorL1_StartStatement+0xc8>
    469e:	14 c0       	rjmp	.+40     	; 0x46c8 <CalculatorL1_StartStatement+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46a0:	6d 89       	ldd	r22, Y+21	; 0x15
    46a2:	7e 89       	ldd	r23, Y+22	; 0x16
    46a4:	8f 89       	ldd	r24, Y+23	; 0x17
    46a6:	98 8d       	ldd	r25, Y+24	; 0x18
    46a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46ac:	dc 01       	movw	r26, r24
    46ae:	cb 01       	movw	r24, r22
    46b0:	9c 8b       	std	Y+20, r25	; 0x14
    46b2:	8b 8b       	std	Y+19, r24	; 0x13
    46b4:	8b 89       	ldd	r24, Y+19	; 0x13
    46b6:	9c 89       	ldd	r25, Y+20	; 0x14
    46b8:	98 8b       	std	Y+16, r25	; 0x10
    46ba:	8f 87       	std	Y+15, r24	; 0x0f
    46bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    46be:	98 89       	ldd	r25, Y+16	; 0x10
    46c0:	01 97       	sbiw	r24, 0x01	; 1
    46c2:	f1 f7       	brne	.-4      	; 0x46c0 <CalculatorL1_StartStatement+0x110>
    46c4:	98 8b       	std	Y+16, r25	; 0x10
    46c6:	8f 87       	std	Y+15, r24	; 0x0f

    // Delay for 2 seconds to show the "Simple Calculator" message.
    _delay_ms(2000);

    // Clear the LCD screen.
    LCD_ClearLCD();
    46c8:	0e 94 84 17 	call	0x2f08	; 0x2f08 <LCD_ClearLCD>

    // Display "By :" on the first line at column 6 of the LCD screen.
    LCD_MoveCursor(1, 6);
    46cc:	81 e0       	ldi	r24, 0x01	; 1
    46ce:	66 e0       	ldi	r22, 0x06	; 6
    46d0:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_MoveCursor>
    LCD_DisplayString("By :");
    46d4:	87 ef       	ldi	r24, 0xF7	; 247
    46d6:	90 e0       	ldi	r25, 0x00	; 0
    46d8:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_DisplayString>

    // Display "Abo Alaa" on the second line at column 2 of the same LCD screen.
    LCD_MoveCursor(2, 4);
    46dc:	82 e0       	ldi	r24, 0x02	; 2
    46de:	64 e0       	ldi	r22, 0x04	; 4
    46e0:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_MoveCursor>
    LCD_DisplayString("Abo Alaa");
    46e4:	8c ef       	ldi	r24, 0xFC	; 252
    46e6:	90 e0       	ldi	r25, 0x00	; 0
    46e8:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_DisplayString>
    46ec:	80 e0       	ldi	r24, 0x00	; 0
    46ee:	90 e0       	ldi	r25, 0x00	; 0
    46f0:	aa ef       	ldi	r26, 0xFA	; 250
    46f2:	b4 e4       	ldi	r27, 0x44	; 68
    46f4:	8b 87       	std	Y+11, r24	; 0x0b
    46f6:	9c 87       	std	Y+12, r25	; 0x0c
    46f8:	ad 87       	std	Y+13, r26	; 0x0d
    46fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    46fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4700:	8d 85       	ldd	r24, Y+13	; 0x0d
    4702:	9e 85       	ldd	r25, Y+14	; 0x0e
    4704:	20 e0       	ldi	r18, 0x00	; 0
    4706:	30 e0       	ldi	r19, 0x00	; 0
    4708:	4a e7       	ldi	r20, 0x7A	; 122
    470a:	53 e4       	ldi	r21, 0x43	; 67
    470c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4710:	dc 01       	movw	r26, r24
    4712:	cb 01       	movw	r24, r22
    4714:	8f 83       	std	Y+7, r24	; 0x07
    4716:	98 87       	std	Y+8, r25	; 0x08
    4718:	a9 87       	std	Y+9, r26	; 0x09
    471a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    471c:	6f 81       	ldd	r22, Y+7	; 0x07
    471e:	78 85       	ldd	r23, Y+8	; 0x08
    4720:	89 85       	ldd	r24, Y+9	; 0x09
    4722:	9a 85       	ldd	r25, Y+10	; 0x0a
    4724:	20 e0       	ldi	r18, 0x00	; 0
    4726:	30 e0       	ldi	r19, 0x00	; 0
    4728:	40 e8       	ldi	r20, 0x80	; 128
    472a:	5f e3       	ldi	r21, 0x3F	; 63
    472c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4730:	88 23       	and	r24, r24
    4732:	2c f4       	brge	.+10     	; 0x473e <CalculatorL1_StartStatement+0x18e>
		__ticks = 1;
    4734:	81 e0       	ldi	r24, 0x01	; 1
    4736:	90 e0       	ldi	r25, 0x00	; 0
    4738:	9e 83       	std	Y+6, r25	; 0x06
    473a:	8d 83       	std	Y+5, r24	; 0x05
    473c:	3f c0       	rjmp	.+126    	; 0x47bc <CalculatorL1_StartStatement+0x20c>
	else if (__tmp > 65535)
    473e:	6f 81       	ldd	r22, Y+7	; 0x07
    4740:	78 85       	ldd	r23, Y+8	; 0x08
    4742:	89 85       	ldd	r24, Y+9	; 0x09
    4744:	9a 85       	ldd	r25, Y+10	; 0x0a
    4746:	20 e0       	ldi	r18, 0x00	; 0
    4748:	3f ef       	ldi	r19, 0xFF	; 255
    474a:	4f e7       	ldi	r20, 0x7F	; 127
    474c:	57 e4       	ldi	r21, 0x47	; 71
    474e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4752:	18 16       	cp	r1, r24
    4754:	4c f5       	brge	.+82     	; 0x47a8 <CalculatorL1_StartStatement+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4756:	6b 85       	ldd	r22, Y+11	; 0x0b
    4758:	7c 85       	ldd	r23, Y+12	; 0x0c
    475a:	8d 85       	ldd	r24, Y+13	; 0x0d
    475c:	9e 85       	ldd	r25, Y+14	; 0x0e
    475e:	20 e0       	ldi	r18, 0x00	; 0
    4760:	30 e0       	ldi	r19, 0x00	; 0
    4762:	40 e2       	ldi	r20, 0x20	; 32
    4764:	51 e4       	ldi	r21, 0x41	; 65
    4766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    476a:	dc 01       	movw	r26, r24
    476c:	cb 01       	movw	r24, r22
    476e:	bc 01       	movw	r22, r24
    4770:	cd 01       	movw	r24, r26
    4772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4776:	dc 01       	movw	r26, r24
    4778:	cb 01       	movw	r24, r22
    477a:	9e 83       	std	Y+6, r25	; 0x06
    477c:	8d 83       	std	Y+5, r24	; 0x05
    477e:	0f c0       	rjmp	.+30     	; 0x479e <CalculatorL1_StartStatement+0x1ee>
    4780:	89 e1       	ldi	r24, 0x19	; 25
    4782:	90 e0       	ldi	r25, 0x00	; 0
    4784:	9c 83       	std	Y+4, r25	; 0x04
    4786:	8b 83       	std	Y+3, r24	; 0x03
    4788:	8b 81       	ldd	r24, Y+3	; 0x03
    478a:	9c 81       	ldd	r25, Y+4	; 0x04
    478c:	01 97       	sbiw	r24, 0x01	; 1
    478e:	f1 f7       	brne	.-4      	; 0x478c <CalculatorL1_StartStatement+0x1dc>
    4790:	9c 83       	std	Y+4, r25	; 0x04
    4792:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4794:	8d 81       	ldd	r24, Y+5	; 0x05
    4796:	9e 81       	ldd	r25, Y+6	; 0x06
    4798:	01 97       	sbiw	r24, 0x01	; 1
    479a:	9e 83       	std	Y+6, r25	; 0x06
    479c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    479e:	8d 81       	ldd	r24, Y+5	; 0x05
    47a0:	9e 81       	ldd	r25, Y+6	; 0x06
    47a2:	00 97       	sbiw	r24, 0x00	; 0
    47a4:	69 f7       	brne	.-38     	; 0x4780 <CalculatorL1_StartStatement+0x1d0>
    47a6:	14 c0       	rjmp	.+40     	; 0x47d0 <CalculatorL1_StartStatement+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47a8:	6f 81       	ldd	r22, Y+7	; 0x07
    47aa:	78 85       	ldd	r23, Y+8	; 0x08
    47ac:	89 85       	ldd	r24, Y+9	; 0x09
    47ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    47b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47b4:	dc 01       	movw	r26, r24
    47b6:	cb 01       	movw	r24, r22
    47b8:	9e 83       	std	Y+6, r25	; 0x06
    47ba:	8d 83       	std	Y+5, r24	; 0x05
    47bc:	8d 81       	ldd	r24, Y+5	; 0x05
    47be:	9e 81       	ldd	r25, Y+6	; 0x06
    47c0:	9a 83       	std	Y+2, r25	; 0x02
    47c2:	89 83       	std	Y+1, r24	; 0x01
    47c4:	89 81       	ldd	r24, Y+1	; 0x01
    47c6:	9a 81       	ldd	r25, Y+2	; 0x02
    47c8:	01 97       	sbiw	r24, 0x01	; 1
    47ca:	f1 f7       	brne	.-4      	; 0x47c8 <CalculatorL1_StartStatement+0x218>
    47cc:	9a 83       	std	Y+2, r25	; 0x02
    47ce:	89 83       	std	Y+1, r24	; 0x01

    // Delay for 2 seconds to show the "By: Mohamed Alaa" message.
    _delay_ms(2000);

    // Clear the LCD screen.
    LCD_ClearLCD();
    47d0:	0e 94 84 17 	call	0x2f08	; 0x2f08 <LCD_ClearLCD>

    // Display "Press any" on the first line at column 3 of the LCD screen.
    LCD_MoveCursor(1, 3);
    47d4:	81 e0       	ldi	r24, 0x01	; 1
    47d6:	63 e0       	ldi	r22, 0x03	; 3
    47d8:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_MoveCursor>
    LCD_DisplayString("Press any");
    47dc:	85 e0       	ldi	r24, 0x05	; 5
    47de:	91 e0       	ldi	r25, 0x01	; 1
    47e0:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_DisplayString>

    // Display "key to Start..." on the second line at column 1 of the same LCD screen.
    LCD_MoveCursor(2, 1);
    47e4:	82 e0       	ldi	r24, 0x02	; 2
    47e6:	61 e0       	ldi	r22, 0x01	; 1
    47e8:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_MoveCursor>
    LCD_DisplayString("key to Start...");
    47ec:	8f e0       	ldi	r24, 0x0F	; 15
    47ee:	91 e0       	ldi	r25, 0x01	; 1
    47f0:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_DisplayString>

    // Wait indefinitely for any key press to clear the screen.
    while (1) {
        if (KEYPAD_GetPressedKeyValue(Keypad_Port) != 255) {
    47f4:	80 91 53 01 	lds	r24, 0x0153
    47f8:	0e 94 03 18 	call	0x3006	; 0x3006 <KEYPAD_GetPressedKeyValue>
    47fc:	8f 3f       	cpi	r24, 0xFF	; 255
    47fe:	d1 f3       	breq	.-12     	; 0x47f4 <CalculatorL1_StartStatement+0x244>
            LCD_ClearLCD();
    4800:	0e 94 84 17 	call	0x2f08	; 0x2f08 <LCD_ClearLCD>
            break;
        }
    }
    4804:	6c 96       	adiw	r28, 0x1c	; 28
    4806:	0f b6       	in	r0, 0x3f	; 63
    4808:	f8 94       	cli
    480a:	de bf       	out	0x3e, r29	; 62
    480c:	0f be       	out	0x3f, r0	; 63
    480e:	cd bf       	out	0x3d, r28	; 61
    4810:	cf 91       	pop	r28
    4812:	df 91       	pop	r29
    4814:	08 95       	ret

00004816 <CalculatorL1_ResultCalc>:
	 * Operand_1 : First Number .
	 * Operand_2 : Second Number .
	 * Operator : Operator .
 * Return Value: Returns The Result .
 */
static sint32 CalculatorL1_ResultCalc( sint32 Operand_1 , sint32 Operand_2 , uint8 Operator ) {
    4816:	0f 93       	push	r16
    4818:	df 93       	push	r29
    481a:	cf 93       	push	r28
    481c:	cd b7       	in	r28, 0x3d	; 61
    481e:	de b7       	in	r29, 0x3e	; 62
    4820:	2f 97       	sbiw	r28, 0x0f	; 15
    4822:	0f b6       	in	r0, 0x3f	; 63
    4824:	f8 94       	cli
    4826:	de bf       	out	0x3e, r29	; 62
    4828:	0f be       	out	0x3f, r0	; 63
    482a:	cd bf       	out	0x3d, r28	; 61
    482c:	6d 83       	std	Y+5, r22	; 0x05
    482e:	7e 83       	std	Y+6, r23	; 0x06
    4830:	8f 83       	std	Y+7, r24	; 0x07
    4832:	98 87       	std	Y+8, r25	; 0x08
    4834:	29 87       	std	Y+9, r18	; 0x09
    4836:	3a 87       	std	Y+10, r19	; 0x0a
    4838:	4b 87       	std	Y+11, r20	; 0x0b
    483a:	5c 87       	std	Y+12, r21	; 0x0c
    483c:	0d 87       	std	Y+13, r16	; 0x0d
    // Declare a variable to store the result.
    sint32 Result;

    // Use a switch statement to perform different operations based on the operator.
    switch (Operator) {
    483e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4840:	28 2f       	mov	r18, r24
    4842:	30 e0       	ldi	r19, 0x00	; 0
    4844:	3f 87       	std	Y+15, r19	; 0x0f
    4846:	2e 87       	std	Y+14, r18	; 0x0e
    4848:	8e 85       	ldd	r24, Y+14	; 0x0e
    484a:	9f 85       	ldd	r25, Y+15	; 0x0f
    484c:	8b 32       	cpi	r24, 0x2B	; 43
    484e:	91 05       	cpc	r25, r1
    4850:	b1 f0       	breq	.+44     	; 0x487e <CalculatorL1_ResultCalc+0x68>
    4852:	2e 85       	ldd	r18, Y+14	; 0x0e
    4854:	3f 85       	ldd	r19, Y+15	; 0x0f
    4856:	2c 32       	cpi	r18, 0x2C	; 44
    4858:	31 05       	cpc	r19, r1
    485a:	34 f4       	brge	.+12     	; 0x4868 <CalculatorL1_ResultCalc+0x52>
    485c:	8e 85       	ldd	r24, Y+14	; 0x0e
    485e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4860:	8a 32       	cpi	r24, 0x2A	; 42
    4862:	91 05       	cpc	r25, r1
    4864:	71 f1       	breq	.+92     	; 0x48c2 <CalculatorL1_ResultCalc+0xac>
    4866:	6d c0       	rjmp	.+218    	; 0x4942 <CalculatorL1_ResultCalc+0x12c>
    4868:	2e 85       	ldd	r18, Y+14	; 0x0e
    486a:	3f 85       	ldd	r19, Y+15	; 0x0f
    486c:	2d 32       	cpi	r18, 0x2D	; 45
    486e:	31 05       	cpc	r19, r1
    4870:	b9 f0       	breq	.+46     	; 0x48a0 <CalculatorL1_ResultCalc+0x8a>
    4872:	8e 85       	ldd	r24, Y+14	; 0x0e
    4874:	9f 85       	ldd	r25, Y+15	; 0x0f
    4876:	8f 32       	cpi	r24, 0x2F	; 47
    4878:	91 05       	cpc	r25, r1
    487a:	b1 f1       	breq	.+108    	; 0x48e8 <CalculatorL1_ResultCalc+0xd2>
    487c:	62 c0       	rjmp	.+196    	; 0x4942 <CalculatorL1_ResultCalc+0x12c>
        case '+':
            // If the operator is '+', add Operand_1 and Operand_2.
            Result = Operand_1 + Operand_2;
    487e:	8d 81       	ldd	r24, Y+5	; 0x05
    4880:	9e 81       	ldd	r25, Y+6	; 0x06
    4882:	af 81       	ldd	r26, Y+7	; 0x07
    4884:	b8 85       	ldd	r27, Y+8	; 0x08
    4886:	29 85       	ldd	r18, Y+9	; 0x09
    4888:	3a 85       	ldd	r19, Y+10	; 0x0a
    488a:	4b 85       	ldd	r20, Y+11	; 0x0b
    488c:	5c 85       	ldd	r21, Y+12	; 0x0c
    488e:	82 0f       	add	r24, r18
    4890:	93 1f       	adc	r25, r19
    4892:	a4 1f       	adc	r26, r20
    4894:	b5 1f       	adc	r27, r21
    4896:	89 83       	std	Y+1, r24	; 0x01
    4898:	9a 83       	std	Y+2, r25	; 0x02
    489a:	ab 83       	std	Y+3, r26	; 0x03
    489c:	bc 83       	std	Y+4, r27	; 0x04
    489e:	51 c0       	rjmp	.+162    	; 0x4942 <CalculatorL1_ResultCalc+0x12c>
            break;
        case '-':
            // If the operator is '-', subtract Operand_2 from Operand_1.
            Result = Operand_1 - Operand_2;
    48a0:	8d 81       	ldd	r24, Y+5	; 0x05
    48a2:	9e 81       	ldd	r25, Y+6	; 0x06
    48a4:	af 81       	ldd	r26, Y+7	; 0x07
    48a6:	b8 85       	ldd	r27, Y+8	; 0x08
    48a8:	29 85       	ldd	r18, Y+9	; 0x09
    48aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    48ac:	4b 85       	ldd	r20, Y+11	; 0x0b
    48ae:	5c 85       	ldd	r21, Y+12	; 0x0c
    48b0:	82 1b       	sub	r24, r18
    48b2:	93 0b       	sbc	r25, r19
    48b4:	a4 0b       	sbc	r26, r20
    48b6:	b5 0b       	sbc	r27, r21
    48b8:	89 83       	std	Y+1, r24	; 0x01
    48ba:	9a 83       	std	Y+2, r25	; 0x02
    48bc:	ab 83       	std	Y+3, r26	; 0x03
    48be:	bc 83       	std	Y+4, r27	; 0x04
    48c0:	40 c0       	rjmp	.+128    	; 0x4942 <CalculatorL1_ResultCalc+0x12c>
            break;
        case '*':
            // If the operator is '*', multiply Operand_1 and Operand_2.
            Result = Operand_1 * Operand_2;
    48c2:	8d 81       	ldd	r24, Y+5	; 0x05
    48c4:	9e 81       	ldd	r25, Y+6	; 0x06
    48c6:	af 81       	ldd	r26, Y+7	; 0x07
    48c8:	b8 85       	ldd	r27, Y+8	; 0x08
    48ca:	29 85       	ldd	r18, Y+9	; 0x09
    48cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    48ce:	4b 85       	ldd	r20, Y+11	; 0x0b
    48d0:	5c 85       	ldd	r21, Y+12	; 0x0c
    48d2:	bc 01       	movw	r22, r24
    48d4:	cd 01       	movw	r24, r26
    48d6:	0e 94 08 25 	call	0x4a10	; 0x4a10 <__mulsi3>
    48da:	dc 01       	movw	r26, r24
    48dc:	cb 01       	movw	r24, r22
    48de:	89 83       	std	Y+1, r24	; 0x01
    48e0:	9a 83       	std	Y+2, r25	; 0x02
    48e2:	ab 83       	std	Y+3, r26	; 0x03
    48e4:	bc 83       	std	Y+4, r27	; 0x04
    48e6:	2d c0       	rjmp	.+90     	; 0x4942 <CalculatorL1_ResultCalc+0x12c>
            break;
        case '/':
            // If the operator is '/', check for division by zero.
            if (Operand_2 == 0) {
    48e8:	89 85       	ldd	r24, Y+9	; 0x09
    48ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    48ec:	ab 85       	ldd	r26, Y+11	; 0x0b
    48ee:	bc 85       	ldd	r27, Y+12	; 0x0c
    48f0:	00 97       	sbiw	r24, 0x00	; 0
    48f2:	a1 05       	cpc	r26, r1
    48f4:	b1 05       	cpc	r27, r1
    48f6:	99 f4       	brne	.+38     	; 0x491e <CalculatorL1_ResultCalc+0x108>
                // Display an error message on an LCD screen .
                LCD_MoveCursor(2, 9);
    48f8:	82 e0       	ldi	r24, 0x02	; 2
    48fa:	69 e0       	ldi	r22, 0x09	; 9
    48fc:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <LCD_MoveCursor>
                LCD_DisplayString("Error !");
    4900:	87 ed       	ldi	r24, 0xD7	; 215
    4902:	90 e0       	ldi	r25, 0x00	; 0
    4904:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_DisplayString>
                // Set the Result to "Error" to indicate an error condition.
                Result = "Error";
    4908:	8f ed       	ldi	r24, 0xDF	; 223
    490a:	90 e0       	ldi	r25, 0x00	; 0
    490c:	aa 27       	eor	r26, r26
    490e:	97 fd       	sbrc	r25, 7
    4910:	a0 95       	com	r26
    4912:	ba 2f       	mov	r27, r26
    4914:	89 83       	std	Y+1, r24	; 0x01
    4916:	9a 83       	std	Y+2, r25	; 0x02
    4918:	ab 83       	std	Y+3, r26	; 0x03
    491a:	bc 83       	std	Y+4, r27	; 0x04
    491c:	12 c0       	rjmp	.+36     	; 0x4942 <CalculatorL1_ResultCalc+0x12c>
            } else {
                // If Operand_2 is not zero, perform division and store the result.
                Result = Operand_1 / Operand_2;
    491e:	8d 81       	ldd	r24, Y+5	; 0x05
    4920:	9e 81       	ldd	r25, Y+6	; 0x06
    4922:	af 81       	ldd	r26, Y+7	; 0x07
    4924:	b8 85       	ldd	r27, Y+8	; 0x08
    4926:	29 85       	ldd	r18, Y+9	; 0x09
    4928:	3a 85       	ldd	r19, Y+10	; 0x0a
    492a:	4b 85       	ldd	r20, Y+11	; 0x0b
    492c:	5c 85       	ldd	r21, Y+12	; 0x0c
    492e:	bc 01       	movw	r22, r24
    4930:	cd 01       	movw	r24, r26
    4932:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <__divmodsi4>
    4936:	da 01       	movw	r26, r20
    4938:	c9 01       	movw	r24, r18
    493a:	89 83       	std	Y+1, r24	; 0x01
    493c:	9a 83       	std	Y+2, r25	; 0x02
    493e:	ab 83       	std	Y+3, r26	; 0x03
    4940:	bc 83       	std	Y+4, r27	; 0x04
            }
            break;
    }

    // Return the computed result.
    return Result;
    4942:	89 81       	ldd	r24, Y+1	; 0x01
    4944:	9a 81       	ldd	r25, Y+2	; 0x02
    4946:	ab 81       	ldd	r26, Y+3	; 0x03
    4948:	bc 81       	ldd	r27, Y+4	; 0x04
}
    494a:	bc 01       	movw	r22, r24
    494c:	cd 01       	movw	r24, r26
    494e:	2f 96       	adiw	r28, 0x0f	; 15
    4950:	0f b6       	in	r0, 0x3f	; 63
    4952:	f8 94       	cli
    4954:	de bf       	out	0x3e, r29	; 62
    4956:	0f be       	out	0x3f, r0	; 63
    4958:	cd bf       	out	0x3d, r28	; 61
    495a:	cf 91       	pop	r28
    495c:	df 91       	pop	r29
    495e:	0f 91       	pop	r16
    4960:	08 95       	ret

00004962 <BUZZER_BuzzerInit>:
 * Arguments:
	 * Port_Id: port .
	 * Pin_Id: pin on the port .
 * Return Value: no return ( void ) .
 */
void BUZZER_BuzzerInit( uint8 Port_Id , uint8 Pin_Id ){
    4962:	df 93       	push	r29
    4964:	cf 93       	push	r28
    4966:	00 d0       	rcall	.+0      	; 0x4968 <BUZZER_BuzzerInit+0x6>
    4968:	cd b7       	in	r28, 0x3d	; 61
    496a:	de b7       	in	r29, 0x3e	; 62
    496c:	89 83       	std	Y+1, r24	; 0x01
    496e:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_SetPinDirction(Port_Id,Pin_Id,PIN_OUTPUT);
    4970:	89 81       	ldd	r24, Y+1	; 0x01
    4972:	6a 81       	ldd	r22, Y+2	; 0x02
    4974:	41 e0       	ldi	r20, 0x01	; 1
    4976:	0e 94 d5 07 	call	0xfaa	; 0xfaa <GPIO_SetPinDirction>
	GPIO_WritePinValue(Port_Id,Pin_Id,LOGIC_LOW);
    497a:	89 81       	ldd	r24, Y+1	; 0x01
    497c:	6a 81       	ldd	r22, Y+2	; 0x02
    497e:	40 e0       	ldi	r20, 0x00	; 0
    4980:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
}
    4984:	0f 90       	pop	r0
    4986:	0f 90       	pop	r0
    4988:	cf 91       	pop	r28
    498a:	df 91       	pop	r29
    498c:	08 95       	ret

0000498e <BUZZER_BuzzerOn>:
 * Arguments:
	 * Port_Id: port .
	 * Pin_Id: pin on the port .
 * Return Value: no return ( void ) .
 */
void BUZZER_BuzzerOn( uint8 Port_Id , uint8 Pin_Id ){
    498e:	df 93       	push	r29
    4990:	cf 93       	push	r28
    4992:	00 d0       	rcall	.+0      	; 0x4994 <BUZZER_BuzzerOn+0x6>
    4994:	cd b7       	in	r28, 0x3d	; 61
    4996:	de b7       	in	r29, 0x3e	; 62
    4998:	89 83       	std	Y+1, r24	; 0x01
    499a:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_WritePinValue(Port_Id,Pin_Id,LOGIC_HIGH);
    499c:	89 81       	ldd	r24, Y+1	; 0x01
    499e:	6a 81       	ldd	r22, Y+2	; 0x02
    49a0:	41 e0       	ldi	r20, 0x01	; 1
    49a2:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
}
    49a6:	0f 90       	pop	r0
    49a8:	0f 90       	pop	r0
    49aa:	cf 91       	pop	r28
    49ac:	df 91       	pop	r29
    49ae:	08 95       	ret

000049b0 <BUZZER_BuzzerOff>:
 * Arguments:
	 * Port_Id: port .
	 * Pin_Id: pin on the port .
 * Return Value: no return ( void ) .
 */
void BUZZER_BuzzerOff( uint8 Port_Id , uint8 Pin_Id ){
    49b0:	df 93       	push	r29
    49b2:	cf 93       	push	r28
    49b4:	00 d0       	rcall	.+0      	; 0x49b6 <BUZZER_BuzzerOff+0x6>
    49b6:	cd b7       	in	r28, 0x3d	; 61
    49b8:	de b7       	in	r29, 0x3e	; 62
    49ba:	89 83       	std	Y+1, r24	; 0x01
    49bc:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_WritePinValue(Port_Id,Pin_Id,LOGIC_LOW);
    49be:	89 81       	ldd	r24, Y+1	; 0x01
    49c0:	6a 81       	ldd	r22, Y+2	; 0x02
    49c2:	40 e0       	ldi	r20, 0x00	; 0
    49c4:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_WritePinValue>
}
    49c8:	0f 90       	pop	r0
    49ca:	0f 90       	pop	r0
    49cc:	cf 91       	pop	r28
    49ce:	df 91       	pop	r29
    49d0:	08 95       	ret

000049d2 <main>:
#include "External_Interrupt/Ext_Int.h"
#include "Timers/Timers.h"
#include "Drivers/CalculatorL1/CalcL1.h"
#include "Drivers/CalculatorL2/CalcL2.h"

int main(void){
    49d2:	0f 93       	push	r16
    49d4:	1f 93       	push	r17
    49d6:	df 93       	push	r29
    49d8:	cf 93       	push	r28
    49da:	cd b7       	in	r28, 0x3d	; 61
    49dc:	de b7       	in	r29, 0x3e	; 62

	GPIO_SetPortDirction(PORTA_ID,PORT_OUTPUT);
    49de:	80 e0       	ldi	r24, 0x00	; 0
    49e0:	6f ef       	ldi	r22, 0xFF	; 255
    49e2:	0e 94 aa 0a 	call	0x1554	; 0x1554 <GPIO_SetPortDirction>
	GPIO_SetPortDirction(PORTB_ID,PORT_OUTPUT);
    49e6:	81 e0       	ldi	r24, 0x01	; 1
    49e8:	6f ef       	ldi	r22, 0xFF	; 255
    49ea:	0e 94 aa 0a 	call	0x1554	; 0x1554 <GPIO_SetPortDirction>
	GPIO_SetPortDirction(PORTC_ID,HALF_INPUT_OUTPUT);
    49ee:	82 e0       	ldi	r24, 0x02	; 2
    49f0:	60 ef       	ldi	r22, 0xF0	; 240
    49f2:	0e 94 aa 0a 	call	0x1554	; 0x1554 <GPIO_SetPortDirction>
	while(1){
		CalculatorL2_Run(PORTA_ID,PORTB_ID,PORTC_ID,MODE_8_BIT,HALF_INPUT_OUTPUT);
    49f6:	80 e0       	ldi	r24, 0x00	; 0
    49f8:	90 e0       	ldi	r25, 0x00	; 0
    49fa:	61 e0       	ldi	r22, 0x01	; 1
    49fc:	70 e0       	ldi	r23, 0x00	; 0
    49fe:	42 e0       	ldi	r20, 0x02	; 2
    4a00:	50 e0       	ldi	r21, 0x00	; 0
    4a02:	21 e0       	ldi	r18, 0x01	; 1
    4a04:	30 e0       	ldi	r19, 0x00	; 0
    4a06:	00 ef       	ldi	r16, 0xF0	; 240
    4a08:	10 e0       	ldi	r17, 0x00	; 0
    4a0a:	0e 94 b3 19 	call	0x3366	; 0x3366 <CalculatorL2_Run>
    4a0e:	f3 cf       	rjmp	.-26     	; 0x49f6 <main+0x24>

00004a10 <__mulsi3>:
    4a10:	62 9f       	mul	r22, r18
    4a12:	d0 01       	movw	r26, r0
    4a14:	73 9f       	mul	r23, r19
    4a16:	f0 01       	movw	r30, r0
    4a18:	82 9f       	mul	r24, r18
    4a1a:	e0 0d       	add	r30, r0
    4a1c:	f1 1d       	adc	r31, r1
    4a1e:	64 9f       	mul	r22, r20
    4a20:	e0 0d       	add	r30, r0
    4a22:	f1 1d       	adc	r31, r1
    4a24:	92 9f       	mul	r25, r18
    4a26:	f0 0d       	add	r31, r0
    4a28:	83 9f       	mul	r24, r19
    4a2a:	f0 0d       	add	r31, r0
    4a2c:	74 9f       	mul	r23, r20
    4a2e:	f0 0d       	add	r31, r0
    4a30:	65 9f       	mul	r22, r21
    4a32:	f0 0d       	add	r31, r0
    4a34:	99 27       	eor	r25, r25
    4a36:	72 9f       	mul	r23, r18
    4a38:	b0 0d       	add	r27, r0
    4a3a:	e1 1d       	adc	r30, r1
    4a3c:	f9 1f       	adc	r31, r25
    4a3e:	63 9f       	mul	r22, r19
    4a40:	b0 0d       	add	r27, r0
    4a42:	e1 1d       	adc	r30, r1
    4a44:	f9 1f       	adc	r31, r25
    4a46:	bd 01       	movw	r22, r26
    4a48:	cf 01       	movw	r24, r30
    4a4a:	11 24       	eor	r1, r1
    4a4c:	08 95       	ret

00004a4e <__divmodhi4>:
    4a4e:	97 fb       	bst	r25, 7
    4a50:	09 2e       	mov	r0, r25
    4a52:	07 26       	eor	r0, r23
    4a54:	0a d0       	rcall	.+20     	; 0x4a6a <__divmodhi4_neg1>
    4a56:	77 fd       	sbrc	r23, 7
    4a58:	04 d0       	rcall	.+8      	; 0x4a62 <__divmodhi4_neg2>
    4a5a:	27 d0       	rcall	.+78     	; 0x4aaa <__udivmodhi4>
    4a5c:	06 d0       	rcall	.+12     	; 0x4a6a <__divmodhi4_neg1>
    4a5e:	00 20       	and	r0, r0
    4a60:	1a f4       	brpl	.+6      	; 0x4a68 <__divmodhi4_exit>

00004a62 <__divmodhi4_neg2>:
    4a62:	70 95       	com	r23
    4a64:	61 95       	neg	r22
    4a66:	7f 4f       	sbci	r23, 0xFF	; 255

00004a68 <__divmodhi4_exit>:
    4a68:	08 95       	ret

00004a6a <__divmodhi4_neg1>:
    4a6a:	f6 f7       	brtc	.-4      	; 0x4a68 <__divmodhi4_exit>
    4a6c:	90 95       	com	r25
    4a6e:	81 95       	neg	r24
    4a70:	9f 4f       	sbci	r25, 0xFF	; 255
    4a72:	08 95       	ret

00004a74 <__divmodsi4>:
    4a74:	97 fb       	bst	r25, 7
    4a76:	09 2e       	mov	r0, r25
    4a78:	05 26       	eor	r0, r21
    4a7a:	0e d0       	rcall	.+28     	; 0x4a98 <__divmodsi4_neg1>
    4a7c:	57 fd       	sbrc	r21, 7
    4a7e:	04 d0       	rcall	.+8      	; 0x4a88 <__divmodsi4_neg2>
    4a80:	28 d0       	rcall	.+80     	; 0x4ad2 <__udivmodsi4>
    4a82:	0a d0       	rcall	.+20     	; 0x4a98 <__divmodsi4_neg1>
    4a84:	00 1c       	adc	r0, r0
    4a86:	38 f4       	brcc	.+14     	; 0x4a96 <__divmodsi4_exit>

00004a88 <__divmodsi4_neg2>:
    4a88:	50 95       	com	r21
    4a8a:	40 95       	com	r20
    4a8c:	30 95       	com	r19
    4a8e:	21 95       	neg	r18
    4a90:	3f 4f       	sbci	r19, 0xFF	; 255
    4a92:	4f 4f       	sbci	r20, 0xFF	; 255
    4a94:	5f 4f       	sbci	r21, 0xFF	; 255

00004a96 <__divmodsi4_exit>:
    4a96:	08 95       	ret

00004a98 <__divmodsi4_neg1>:
    4a98:	f6 f7       	brtc	.-4      	; 0x4a96 <__divmodsi4_exit>
    4a9a:	90 95       	com	r25
    4a9c:	80 95       	com	r24
    4a9e:	70 95       	com	r23
    4aa0:	61 95       	neg	r22
    4aa2:	7f 4f       	sbci	r23, 0xFF	; 255
    4aa4:	8f 4f       	sbci	r24, 0xFF	; 255
    4aa6:	9f 4f       	sbci	r25, 0xFF	; 255
    4aa8:	08 95       	ret

00004aaa <__udivmodhi4>:
    4aaa:	aa 1b       	sub	r26, r26
    4aac:	bb 1b       	sub	r27, r27
    4aae:	51 e1       	ldi	r21, 0x11	; 17
    4ab0:	07 c0       	rjmp	.+14     	; 0x4ac0 <__udivmodhi4_ep>

00004ab2 <__udivmodhi4_loop>:
    4ab2:	aa 1f       	adc	r26, r26
    4ab4:	bb 1f       	adc	r27, r27
    4ab6:	a6 17       	cp	r26, r22
    4ab8:	b7 07       	cpc	r27, r23
    4aba:	10 f0       	brcs	.+4      	; 0x4ac0 <__udivmodhi4_ep>
    4abc:	a6 1b       	sub	r26, r22
    4abe:	b7 0b       	sbc	r27, r23

00004ac0 <__udivmodhi4_ep>:
    4ac0:	88 1f       	adc	r24, r24
    4ac2:	99 1f       	adc	r25, r25
    4ac4:	5a 95       	dec	r21
    4ac6:	a9 f7       	brne	.-22     	; 0x4ab2 <__udivmodhi4_loop>
    4ac8:	80 95       	com	r24
    4aca:	90 95       	com	r25
    4acc:	bc 01       	movw	r22, r24
    4ace:	cd 01       	movw	r24, r26
    4ad0:	08 95       	ret

00004ad2 <__udivmodsi4>:
    4ad2:	a1 e2       	ldi	r26, 0x21	; 33
    4ad4:	1a 2e       	mov	r1, r26
    4ad6:	aa 1b       	sub	r26, r26
    4ad8:	bb 1b       	sub	r27, r27
    4ada:	fd 01       	movw	r30, r26
    4adc:	0d c0       	rjmp	.+26     	; 0x4af8 <__udivmodsi4_ep>

00004ade <__udivmodsi4_loop>:
    4ade:	aa 1f       	adc	r26, r26
    4ae0:	bb 1f       	adc	r27, r27
    4ae2:	ee 1f       	adc	r30, r30
    4ae4:	ff 1f       	adc	r31, r31
    4ae6:	a2 17       	cp	r26, r18
    4ae8:	b3 07       	cpc	r27, r19
    4aea:	e4 07       	cpc	r30, r20
    4aec:	f5 07       	cpc	r31, r21
    4aee:	20 f0       	brcs	.+8      	; 0x4af8 <__udivmodsi4_ep>
    4af0:	a2 1b       	sub	r26, r18
    4af2:	b3 0b       	sbc	r27, r19
    4af4:	e4 0b       	sbc	r30, r20
    4af6:	f5 0b       	sbc	r31, r21

00004af8 <__udivmodsi4_ep>:
    4af8:	66 1f       	adc	r22, r22
    4afa:	77 1f       	adc	r23, r23
    4afc:	88 1f       	adc	r24, r24
    4afe:	99 1f       	adc	r25, r25
    4b00:	1a 94       	dec	r1
    4b02:	69 f7       	brne	.-38     	; 0x4ade <__udivmodsi4_loop>
    4b04:	60 95       	com	r22
    4b06:	70 95       	com	r23
    4b08:	80 95       	com	r24
    4b0a:	90 95       	com	r25
    4b0c:	9b 01       	movw	r18, r22
    4b0e:	ac 01       	movw	r20, r24
    4b10:	bd 01       	movw	r22, r26
    4b12:	cf 01       	movw	r24, r30
    4b14:	08 95       	ret

00004b16 <__prologue_saves__>:
    4b16:	2f 92       	push	r2
    4b18:	3f 92       	push	r3
    4b1a:	4f 92       	push	r4
    4b1c:	5f 92       	push	r5
    4b1e:	6f 92       	push	r6
    4b20:	7f 92       	push	r7
    4b22:	8f 92       	push	r8
    4b24:	9f 92       	push	r9
    4b26:	af 92       	push	r10
    4b28:	bf 92       	push	r11
    4b2a:	cf 92       	push	r12
    4b2c:	df 92       	push	r13
    4b2e:	ef 92       	push	r14
    4b30:	ff 92       	push	r15
    4b32:	0f 93       	push	r16
    4b34:	1f 93       	push	r17
    4b36:	cf 93       	push	r28
    4b38:	df 93       	push	r29
    4b3a:	cd b7       	in	r28, 0x3d	; 61
    4b3c:	de b7       	in	r29, 0x3e	; 62
    4b3e:	ca 1b       	sub	r28, r26
    4b40:	db 0b       	sbc	r29, r27
    4b42:	0f b6       	in	r0, 0x3f	; 63
    4b44:	f8 94       	cli
    4b46:	de bf       	out	0x3e, r29	; 62
    4b48:	0f be       	out	0x3f, r0	; 63
    4b4a:	cd bf       	out	0x3d, r28	; 61
    4b4c:	09 94       	ijmp

00004b4e <__epilogue_restores__>:
    4b4e:	2a 88       	ldd	r2, Y+18	; 0x12
    4b50:	39 88       	ldd	r3, Y+17	; 0x11
    4b52:	48 88       	ldd	r4, Y+16	; 0x10
    4b54:	5f 84       	ldd	r5, Y+15	; 0x0f
    4b56:	6e 84       	ldd	r6, Y+14	; 0x0e
    4b58:	7d 84       	ldd	r7, Y+13	; 0x0d
    4b5a:	8c 84       	ldd	r8, Y+12	; 0x0c
    4b5c:	9b 84       	ldd	r9, Y+11	; 0x0b
    4b5e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4b60:	b9 84       	ldd	r11, Y+9	; 0x09
    4b62:	c8 84       	ldd	r12, Y+8	; 0x08
    4b64:	df 80       	ldd	r13, Y+7	; 0x07
    4b66:	ee 80       	ldd	r14, Y+6	; 0x06
    4b68:	fd 80       	ldd	r15, Y+5	; 0x05
    4b6a:	0c 81       	ldd	r16, Y+4	; 0x04
    4b6c:	1b 81       	ldd	r17, Y+3	; 0x03
    4b6e:	aa 81       	ldd	r26, Y+2	; 0x02
    4b70:	b9 81       	ldd	r27, Y+1	; 0x01
    4b72:	ce 0f       	add	r28, r30
    4b74:	d1 1d       	adc	r29, r1
    4b76:	0f b6       	in	r0, 0x3f	; 63
    4b78:	f8 94       	cli
    4b7a:	de bf       	out	0x3e, r29	; 62
    4b7c:	0f be       	out	0x3f, r0	; 63
    4b7e:	cd bf       	out	0x3d, r28	; 61
    4b80:	ed 01       	movw	r28, r26
    4b82:	08 95       	ret

00004b84 <strlen>:
    4b84:	fc 01       	movw	r30, r24
    4b86:	01 90       	ld	r0, Z+
    4b88:	00 20       	and	r0, r0
    4b8a:	e9 f7       	brne	.-6      	; 0x4b86 <strlen+0x2>
    4b8c:	80 95       	com	r24
    4b8e:	90 95       	com	r25
    4b90:	8e 0f       	add	r24, r30
    4b92:	9f 1f       	adc	r25, r31
    4b94:	08 95       	ret

00004b96 <sprintf>:
    4b96:	ae e0       	ldi	r26, 0x0E	; 14
    4b98:	b0 e0       	ldi	r27, 0x00	; 0
    4b9a:	e1 ed       	ldi	r30, 0xD1	; 209
    4b9c:	f5 e2       	ldi	r31, 0x25	; 37
    4b9e:	0c 94 99 25 	jmp	0x4b32	; 0x4b32 <__prologue_saves__+0x1c>
    4ba2:	0d 89       	ldd	r16, Y+21	; 0x15
    4ba4:	1e 89       	ldd	r17, Y+22	; 0x16
    4ba6:	86 e0       	ldi	r24, 0x06	; 6
    4ba8:	8c 83       	std	Y+4, r24	; 0x04
    4baa:	1a 83       	std	Y+2, r17	; 0x02
    4bac:	09 83       	std	Y+1, r16	; 0x01
    4bae:	8f ef       	ldi	r24, 0xFF	; 255
    4bb0:	9f e7       	ldi	r25, 0x7F	; 127
    4bb2:	9e 83       	std	Y+6, r25	; 0x06
    4bb4:	8d 83       	std	Y+5, r24	; 0x05
    4bb6:	9e 01       	movw	r18, r28
    4bb8:	27 5e       	subi	r18, 0xE7	; 231
    4bba:	3f 4f       	sbci	r19, 0xFF	; 255
    4bbc:	ce 01       	movw	r24, r28
    4bbe:	01 96       	adiw	r24, 0x01	; 1
    4bc0:	6f 89       	ldd	r22, Y+23	; 0x17
    4bc2:	78 8d       	ldd	r23, Y+24	; 0x18
    4bc4:	a9 01       	movw	r20, r18
    4bc6:	0e 94 ef 25 	call	0x4bde	; 0x4bde <vfprintf>
    4bca:	2f 81       	ldd	r18, Y+7	; 0x07
    4bcc:	38 85       	ldd	r19, Y+8	; 0x08
    4bce:	02 0f       	add	r16, r18
    4bd0:	13 1f       	adc	r17, r19
    4bd2:	f8 01       	movw	r30, r16
    4bd4:	10 82       	st	Z, r1
    4bd6:	2e 96       	adiw	r28, 0x0e	; 14
    4bd8:	e4 e0       	ldi	r30, 0x04	; 4
    4bda:	0c 94 b5 25 	jmp	0x4b6a	; 0x4b6a <__epilogue_restores__+0x1c>

00004bde <vfprintf>:
    4bde:	ab e0       	ldi	r26, 0x0B	; 11
    4be0:	b0 e0       	ldi	r27, 0x00	; 0
    4be2:	e5 ef       	ldi	r30, 0xF5	; 245
    4be4:	f5 e2       	ldi	r31, 0x25	; 37
    4be6:	0c 94 8b 25 	jmp	0x4b16	; 0x4b16 <__prologue_saves__>
    4bea:	3c 01       	movw	r6, r24
    4bec:	2b 01       	movw	r4, r22
    4bee:	5a 01       	movw	r10, r20
    4bf0:	fc 01       	movw	r30, r24
    4bf2:	17 82       	std	Z+7, r1	; 0x07
    4bf4:	16 82       	std	Z+6, r1	; 0x06
    4bf6:	83 81       	ldd	r24, Z+3	; 0x03
    4bf8:	81 fd       	sbrc	r24, 1
    4bfa:	03 c0       	rjmp	.+6      	; 0x4c02 <vfprintf+0x24>
    4bfc:	6f ef       	ldi	r22, 0xFF	; 255
    4bfe:	7f ef       	ldi	r23, 0xFF	; 255
    4c00:	c6 c1       	rjmp	.+908    	; 0x4f8e <vfprintf+0x3b0>
    4c02:	9a e0       	ldi	r25, 0x0A	; 10
    4c04:	89 2e       	mov	r8, r25
    4c06:	1e 01       	movw	r2, r28
    4c08:	08 94       	sec
    4c0a:	21 1c       	adc	r2, r1
    4c0c:	31 1c       	adc	r3, r1
    4c0e:	f3 01       	movw	r30, r6
    4c10:	23 81       	ldd	r18, Z+3	; 0x03
    4c12:	f2 01       	movw	r30, r4
    4c14:	23 fd       	sbrc	r18, 3
    4c16:	85 91       	lpm	r24, Z+
    4c18:	23 ff       	sbrs	r18, 3
    4c1a:	81 91       	ld	r24, Z+
    4c1c:	2f 01       	movw	r4, r30
    4c1e:	88 23       	and	r24, r24
    4c20:	09 f4       	brne	.+2      	; 0x4c24 <vfprintf+0x46>
    4c22:	b2 c1       	rjmp	.+868    	; 0x4f88 <vfprintf+0x3aa>
    4c24:	85 32       	cpi	r24, 0x25	; 37
    4c26:	39 f4       	brne	.+14     	; 0x4c36 <vfprintf+0x58>
    4c28:	23 fd       	sbrc	r18, 3
    4c2a:	85 91       	lpm	r24, Z+
    4c2c:	23 ff       	sbrs	r18, 3
    4c2e:	81 91       	ld	r24, Z+
    4c30:	2f 01       	movw	r4, r30
    4c32:	85 32       	cpi	r24, 0x25	; 37
    4c34:	29 f4       	brne	.+10     	; 0x4c40 <vfprintf+0x62>
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	b3 01       	movw	r22, r6
    4c3a:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <fputc>
    4c3e:	e7 cf       	rjmp	.-50     	; 0x4c0e <vfprintf+0x30>
    4c40:	98 2f       	mov	r25, r24
    4c42:	ff 24       	eor	r15, r15
    4c44:	ee 24       	eor	r14, r14
    4c46:	99 24       	eor	r9, r9
    4c48:	ff e1       	ldi	r31, 0x1F	; 31
    4c4a:	ff 15       	cp	r31, r15
    4c4c:	d0 f0       	brcs	.+52     	; 0x4c82 <vfprintf+0xa4>
    4c4e:	9b 32       	cpi	r25, 0x2B	; 43
    4c50:	69 f0       	breq	.+26     	; 0x4c6c <vfprintf+0x8e>
    4c52:	9c 32       	cpi	r25, 0x2C	; 44
    4c54:	28 f4       	brcc	.+10     	; 0x4c60 <vfprintf+0x82>
    4c56:	90 32       	cpi	r25, 0x20	; 32
    4c58:	59 f0       	breq	.+22     	; 0x4c70 <vfprintf+0x92>
    4c5a:	93 32       	cpi	r25, 0x23	; 35
    4c5c:	91 f4       	brne	.+36     	; 0x4c82 <vfprintf+0xa4>
    4c5e:	0e c0       	rjmp	.+28     	; 0x4c7c <vfprintf+0x9e>
    4c60:	9d 32       	cpi	r25, 0x2D	; 45
    4c62:	49 f0       	breq	.+18     	; 0x4c76 <vfprintf+0x98>
    4c64:	90 33       	cpi	r25, 0x30	; 48
    4c66:	69 f4       	brne	.+26     	; 0x4c82 <vfprintf+0xa4>
    4c68:	41 e0       	ldi	r20, 0x01	; 1
    4c6a:	24 c0       	rjmp	.+72     	; 0x4cb4 <vfprintf+0xd6>
    4c6c:	52 e0       	ldi	r21, 0x02	; 2
    4c6e:	f5 2a       	or	r15, r21
    4c70:	84 e0       	ldi	r24, 0x04	; 4
    4c72:	f8 2a       	or	r15, r24
    4c74:	28 c0       	rjmp	.+80     	; 0x4cc6 <vfprintf+0xe8>
    4c76:	98 e0       	ldi	r25, 0x08	; 8
    4c78:	f9 2a       	or	r15, r25
    4c7a:	25 c0       	rjmp	.+74     	; 0x4cc6 <vfprintf+0xe8>
    4c7c:	e0 e1       	ldi	r30, 0x10	; 16
    4c7e:	fe 2a       	or	r15, r30
    4c80:	22 c0       	rjmp	.+68     	; 0x4cc6 <vfprintf+0xe8>
    4c82:	f7 fc       	sbrc	r15, 7
    4c84:	29 c0       	rjmp	.+82     	; 0x4cd8 <vfprintf+0xfa>
    4c86:	89 2f       	mov	r24, r25
    4c88:	80 53       	subi	r24, 0x30	; 48
    4c8a:	8a 30       	cpi	r24, 0x0A	; 10
    4c8c:	70 f4       	brcc	.+28     	; 0x4caa <vfprintf+0xcc>
    4c8e:	f6 fe       	sbrs	r15, 6
    4c90:	05 c0       	rjmp	.+10     	; 0x4c9c <vfprintf+0xbe>
    4c92:	98 9c       	mul	r9, r8
    4c94:	90 2c       	mov	r9, r0
    4c96:	11 24       	eor	r1, r1
    4c98:	98 0e       	add	r9, r24
    4c9a:	15 c0       	rjmp	.+42     	; 0x4cc6 <vfprintf+0xe8>
    4c9c:	e8 9c       	mul	r14, r8
    4c9e:	e0 2c       	mov	r14, r0
    4ca0:	11 24       	eor	r1, r1
    4ca2:	e8 0e       	add	r14, r24
    4ca4:	f0 e2       	ldi	r31, 0x20	; 32
    4ca6:	ff 2a       	or	r15, r31
    4ca8:	0e c0       	rjmp	.+28     	; 0x4cc6 <vfprintf+0xe8>
    4caa:	9e 32       	cpi	r25, 0x2E	; 46
    4cac:	29 f4       	brne	.+10     	; 0x4cb8 <vfprintf+0xda>
    4cae:	f6 fc       	sbrc	r15, 6
    4cb0:	6b c1       	rjmp	.+726    	; 0x4f88 <vfprintf+0x3aa>
    4cb2:	40 e4       	ldi	r20, 0x40	; 64
    4cb4:	f4 2a       	or	r15, r20
    4cb6:	07 c0       	rjmp	.+14     	; 0x4cc6 <vfprintf+0xe8>
    4cb8:	9c 36       	cpi	r25, 0x6C	; 108
    4cba:	19 f4       	brne	.+6      	; 0x4cc2 <vfprintf+0xe4>
    4cbc:	50 e8       	ldi	r21, 0x80	; 128
    4cbe:	f5 2a       	or	r15, r21
    4cc0:	02 c0       	rjmp	.+4      	; 0x4cc6 <vfprintf+0xe8>
    4cc2:	98 36       	cpi	r25, 0x68	; 104
    4cc4:	49 f4       	brne	.+18     	; 0x4cd8 <vfprintf+0xfa>
    4cc6:	f2 01       	movw	r30, r4
    4cc8:	23 fd       	sbrc	r18, 3
    4cca:	95 91       	lpm	r25, Z+
    4ccc:	23 ff       	sbrs	r18, 3
    4cce:	91 91       	ld	r25, Z+
    4cd0:	2f 01       	movw	r4, r30
    4cd2:	99 23       	and	r25, r25
    4cd4:	09 f0       	breq	.+2      	; 0x4cd8 <vfprintf+0xfa>
    4cd6:	b8 cf       	rjmp	.-144    	; 0x4c48 <vfprintf+0x6a>
    4cd8:	89 2f       	mov	r24, r25
    4cda:	85 54       	subi	r24, 0x45	; 69
    4cdc:	83 30       	cpi	r24, 0x03	; 3
    4cde:	18 f0       	brcs	.+6      	; 0x4ce6 <vfprintf+0x108>
    4ce0:	80 52       	subi	r24, 0x20	; 32
    4ce2:	83 30       	cpi	r24, 0x03	; 3
    4ce4:	38 f4       	brcc	.+14     	; 0x4cf4 <vfprintf+0x116>
    4ce6:	44 e0       	ldi	r20, 0x04	; 4
    4ce8:	50 e0       	ldi	r21, 0x00	; 0
    4cea:	a4 0e       	add	r10, r20
    4cec:	b5 1e       	adc	r11, r21
    4cee:	5f e3       	ldi	r21, 0x3F	; 63
    4cf0:	59 83       	std	Y+1, r21	; 0x01
    4cf2:	0f c0       	rjmp	.+30     	; 0x4d12 <vfprintf+0x134>
    4cf4:	93 36       	cpi	r25, 0x63	; 99
    4cf6:	31 f0       	breq	.+12     	; 0x4d04 <vfprintf+0x126>
    4cf8:	93 37       	cpi	r25, 0x73	; 115
    4cfa:	79 f0       	breq	.+30     	; 0x4d1a <vfprintf+0x13c>
    4cfc:	93 35       	cpi	r25, 0x53	; 83
    4cfe:	09 f0       	breq	.+2      	; 0x4d02 <vfprintf+0x124>
    4d00:	56 c0       	rjmp	.+172    	; 0x4dae <vfprintf+0x1d0>
    4d02:	20 c0       	rjmp	.+64     	; 0x4d44 <vfprintf+0x166>
    4d04:	f5 01       	movw	r30, r10
    4d06:	80 81       	ld	r24, Z
    4d08:	89 83       	std	Y+1, r24	; 0x01
    4d0a:	42 e0       	ldi	r20, 0x02	; 2
    4d0c:	50 e0       	ldi	r21, 0x00	; 0
    4d0e:	a4 0e       	add	r10, r20
    4d10:	b5 1e       	adc	r11, r21
    4d12:	61 01       	movw	r12, r2
    4d14:	01 e0       	ldi	r16, 0x01	; 1
    4d16:	10 e0       	ldi	r17, 0x00	; 0
    4d18:	12 c0       	rjmp	.+36     	; 0x4d3e <vfprintf+0x160>
    4d1a:	f5 01       	movw	r30, r10
    4d1c:	c0 80       	ld	r12, Z
    4d1e:	d1 80       	ldd	r13, Z+1	; 0x01
    4d20:	f6 fc       	sbrc	r15, 6
    4d22:	03 c0       	rjmp	.+6      	; 0x4d2a <vfprintf+0x14c>
    4d24:	6f ef       	ldi	r22, 0xFF	; 255
    4d26:	7f ef       	ldi	r23, 0xFF	; 255
    4d28:	02 c0       	rjmp	.+4      	; 0x4d2e <vfprintf+0x150>
    4d2a:	69 2d       	mov	r22, r9
    4d2c:	70 e0       	ldi	r23, 0x00	; 0
    4d2e:	42 e0       	ldi	r20, 0x02	; 2
    4d30:	50 e0       	ldi	r21, 0x00	; 0
    4d32:	a4 0e       	add	r10, r20
    4d34:	b5 1e       	adc	r11, r21
    4d36:	c6 01       	movw	r24, r12
    4d38:	0e 94 d7 27 	call	0x4fae	; 0x4fae <strnlen>
    4d3c:	8c 01       	movw	r16, r24
    4d3e:	5f e7       	ldi	r21, 0x7F	; 127
    4d40:	f5 22       	and	r15, r21
    4d42:	14 c0       	rjmp	.+40     	; 0x4d6c <vfprintf+0x18e>
    4d44:	f5 01       	movw	r30, r10
    4d46:	c0 80       	ld	r12, Z
    4d48:	d1 80       	ldd	r13, Z+1	; 0x01
    4d4a:	f6 fc       	sbrc	r15, 6
    4d4c:	03 c0       	rjmp	.+6      	; 0x4d54 <vfprintf+0x176>
    4d4e:	6f ef       	ldi	r22, 0xFF	; 255
    4d50:	7f ef       	ldi	r23, 0xFF	; 255
    4d52:	02 c0       	rjmp	.+4      	; 0x4d58 <vfprintf+0x17a>
    4d54:	69 2d       	mov	r22, r9
    4d56:	70 e0       	ldi	r23, 0x00	; 0
    4d58:	42 e0       	ldi	r20, 0x02	; 2
    4d5a:	50 e0       	ldi	r21, 0x00	; 0
    4d5c:	a4 0e       	add	r10, r20
    4d5e:	b5 1e       	adc	r11, r21
    4d60:	c6 01       	movw	r24, r12
    4d62:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <strnlen_P>
    4d66:	8c 01       	movw	r16, r24
    4d68:	50 e8       	ldi	r21, 0x80	; 128
    4d6a:	f5 2a       	or	r15, r21
    4d6c:	f3 fe       	sbrs	r15, 3
    4d6e:	07 c0       	rjmp	.+14     	; 0x4d7e <vfprintf+0x1a0>
    4d70:	1a c0       	rjmp	.+52     	; 0x4da6 <vfprintf+0x1c8>
    4d72:	80 e2       	ldi	r24, 0x20	; 32
    4d74:	90 e0       	ldi	r25, 0x00	; 0
    4d76:	b3 01       	movw	r22, r6
    4d78:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <fputc>
    4d7c:	ea 94       	dec	r14
    4d7e:	8e 2d       	mov	r24, r14
    4d80:	90 e0       	ldi	r25, 0x00	; 0
    4d82:	08 17       	cp	r16, r24
    4d84:	19 07       	cpc	r17, r25
    4d86:	a8 f3       	brcs	.-22     	; 0x4d72 <vfprintf+0x194>
    4d88:	0e c0       	rjmp	.+28     	; 0x4da6 <vfprintf+0x1c8>
    4d8a:	f6 01       	movw	r30, r12
    4d8c:	f7 fc       	sbrc	r15, 7
    4d8e:	85 91       	lpm	r24, Z+
    4d90:	f7 fe       	sbrs	r15, 7
    4d92:	81 91       	ld	r24, Z+
    4d94:	6f 01       	movw	r12, r30
    4d96:	90 e0       	ldi	r25, 0x00	; 0
    4d98:	b3 01       	movw	r22, r6
    4d9a:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <fputc>
    4d9e:	e1 10       	cpse	r14, r1
    4da0:	ea 94       	dec	r14
    4da2:	01 50       	subi	r16, 0x01	; 1
    4da4:	10 40       	sbci	r17, 0x00	; 0
    4da6:	01 15       	cp	r16, r1
    4da8:	11 05       	cpc	r17, r1
    4daa:	79 f7       	brne	.-34     	; 0x4d8a <vfprintf+0x1ac>
    4dac:	ea c0       	rjmp	.+468    	; 0x4f82 <vfprintf+0x3a4>
    4dae:	94 36       	cpi	r25, 0x64	; 100
    4db0:	11 f0       	breq	.+4      	; 0x4db6 <vfprintf+0x1d8>
    4db2:	99 36       	cpi	r25, 0x69	; 105
    4db4:	69 f5       	brne	.+90     	; 0x4e10 <vfprintf+0x232>
    4db6:	f7 fe       	sbrs	r15, 7
    4db8:	08 c0       	rjmp	.+16     	; 0x4dca <vfprintf+0x1ec>
    4dba:	f5 01       	movw	r30, r10
    4dbc:	20 81       	ld	r18, Z
    4dbe:	31 81       	ldd	r19, Z+1	; 0x01
    4dc0:	42 81       	ldd	r20, Z+2	; 0x02
    4dc2:	53 81       	ldd	r21, Z+3	; 0x03
    4dc4:	84 e0       	ldi	r24, 0x04	; 4
    4dc6:	90 e0       	ldi	r25, 0x00	; 0
    4dc8:	0a c0       	rjmp	.+20     	; 0x4dde <vfprintf+0x200>
    4dca:	f5 01       	movw	r30, r10
    4dcc:	80 81       	ld	r24, Z
    4dce:	91 81       	ldd	r25, Z+1	; 0x01
    4dd0:	9c 01       	movw	r18, r24
    4dd2:	44 27       	eor	r20, r20
    4dd4:	37 fd       	sbrc	r19, 7
    4dd6:	40 95       	com	r20
    4dd8:	54 2f       	mov	r21, r20
    4dda:	82 e0       	ldi	r24, 0x02	; 2
    4ddc:	90 e0       	ldi	r25, 0x00	; 0
    4dde:	a8 0e       	add	r10, r24
    4de0:	b9 1e       	adc	r11, r25
    4de2:	9f e6       	ldi	r25, 0x6F	; 111
    4de4:	f9 22       	and	r15, r25
    4de6:	57 ff       	sbrs	r21, 7
    4de8:	09 c0       	rjmp	.+18     	; 0x4dfc <vfprintf+0x21e>
    4dea:	50 95       	com	r21
    4dec:	40 95       	com	r20
    4dee:	30 95       	com	r19
    4df0:	21 95       	neg	r18
    4df2:	3f 4f       	sbci	r19, 0xFF	; 255
    4df4:	4f 4f       	sbci	r20, 0xFF	; 255
    4df6:	5f 4f       	sbci	r21, 0xFF	; 255
    4df8:	e0 e8       	ldi	r30, 0x80	; 128
    4dfa:	fe 2a       	or	r15, r30
    4dfc:	ca 01       	movw	r24, r20
    4dfe:	b9 01       	movw	r22, r18
    4e00:	a1 01       	movw	r20, r2
    4e02:	2a e0       	ldi	r18, 0x0A	; 10
    4e04:	30 e0       	ldi	r19, 0x00	; 0
    4e06:	0e 94 0e 28 	call	0x501c	; 0x501c <__ultoa_invert>
    4e0a:	d8 2e       	mov	r13, r24
    4e0c:	d2 18       	sub	r13, r2
    4e0e:	40 c0       	rjmp	.+128    	; 0x4e90 <vfprintf+0x2b2>
    4e10:	95 37       	cpi	r25, 0x75	; 117
    4e12:	29 f4       	brne	.+10     	; 0x4e1e <vfprintf+0x240>
    4e14:	1f 2d       	mov	r17, r15
    4e16:	1f 7e       	andi	r17, 0xEF	; 239
    4e18:	2a e0       	ldi	r18, 0x0A	; 10
    4e1a:	30 e0       	ldi	r19, 0x00	; 0
    4e1c:	1d c0       	rjmp	.+58     	; 0x4e58 <vfprintf+0x27a>
    4e1e:	1f 2d       	mov	r17, r15
    4e20:	19 7f       	andi	r17, 0xF9	; 249
    4e22:	9f 36       	cpi	r25, 0x6F	; 111
    4e24:	61 f0       	breq	.+24     	; 0x4e3e <vfprintf+0x260>
    4e26:	90 37       	cpi	r25, 0x70	; 112
    4e28:	20 f4       	brcc	.+8      	; 0x4e32 <vfprintf+0x254>
    4e2a:	98 35       	cpi	r25, 0x58	; 88
    4e2c:	09 f0       	breq	.+2      	; 0x4e30 <vfprintf+0x252>
    4e2e:	ac c0       	rjmp	.+344    	; 0x4f88 <vfprintf+0x3aa>
    4e30:	0f c0       	rjmp	.+30     	; 0x4e50 <vfprintf+0x272>
    4e32:	90 37       	cpi	r25, 0x70	; 112
    4e34:	39 f0       	breq	.+14     	; 0x4e44 <vfprintf+0x266>
    4e36:	98 37       	cpi	r25, 0x78	; 120
    4e38:	09 f0       	breq	.+2      	; 0x4e3c <vfprintf+0x25e>
    4e3a:	a6 c0       	rjmp	.+332    	; 0x4f88 <vfprintf+0x3aa>
    4e3c:	04 c0       	rjmp	.+8      	; 0x4e46 <vfprintf+0x268>
    4e3e:	28 e0       	ldi	r18, 0x08	; 8
    4e40:	30 e0       	ldi	r19, 0x00	; 0
    4e42:	0a c0       	rjmp	.+20     	; 0x4e58 <vfprintf+0x27a>
    4e44:	10 61       	ori	r17, 0x10	; 16
    4e46:	14 fd       	sbrc	r17, 4
    4e48:	14 60       	ori	r17, 0x04	; 4
    4e4a:	20 e1       	ldi	r18, 0x10	; 16
    4e4c:	30 e0       	ldi	r19, 0x00	; 0
    4e4e:	04 c0       	rjmp	.+8      	; 0x4e58 <vfprintf+0x27a>
    4e50:	14 fd       	sbrc	r17, 4
    4e52:	16 60       	ori	r17, 0x06	; 6
    4e54:	20 e1       	ldi	r18, 0x10	; 16
    4e56:	32 e0       	ldi	r19, 0x02	; 2
    4e58:	17 ff       	sbrs	r17, 7
    4e5a:	08 c0       	rjmp	.+16     	; 0x4e6c <vfprintf+0x28e>
    4e5c:	f5 01       	movw	r30, r10
    4e5e:	60 81       	ld	r22, Z
    4e60:	71 81       	ldd	r23, Z+1	; 0x01
    4e62:	82 81       	ldd	r24, Z+2	; 0x02
    4e64:	93 81       	ldd	r25, Z+3	; 0x03
    4e66:	44 e0       	ldi	r20, 0x04	; 4
    4e68:	50 e0       	ldi	r21, 0x00	; 0
    4e6a:	08 c0       	rjmp	.+16     	; 0x4e7c <vfprintf+0x29e>
    4e6c:	f5 01       	movw	r30, r10
    4e6e:	80 81       	ld	r24, Z
    4e70:	91 81       	ldd	r25, Z+1	; 0x01
    4e72:	bc 01       	movw	r22, r24
    4e74:	80 e0       	ldi	r24, 0x00	; 0
    4e76:	90 e0       	ldi	r25, 0x00	; 0
    4e78:	42 e0       	ldi	r20, 0x02	; 2
    4e7a:	50 e0       	ldi	r21, 0x00	; 0
    4e7c:	a4 0e       	add	r10, r20
    4e7e:	b5 1e       	adc	r11, r21
    4e80:	a1 01       	movw	r20, r2
    4e82:	0e 94 0e 28 	call	0x501c	; 0x501c <__ultoa_invert>
    4e86:	d8 2e       	mov	r13, r24
    4e88:	d2 18       	sub	r13, r2
    4e8a:	8f e7       	ldi	r24, 0x7F	; 127
    4e8c:	f8 2e       	mov	r15, r24
    4e8e:	f1 22       	and	r15, r17
    4e90:	f6 fe       	sbrs	r15, 6
    4e92:	0b c0       	rjmp	.+22     	; 0x4eaa <vfprintf+0x2cc>
    4e94:	5e ef       	ldi	r21, 0xFE	; 254
    4e96:	f5 22       	and	r15, r21
    4e98:	d9 14       	cp	r13, r9
    4e9a:	38 f4       	brcc	.+14     	; 0x4eaa <vfprintf+0x2cc>
    4e9c:	f4 fe       	sbrs	r15, 4
    4e9e:	07 c0       	rjmp	.+14     	; 0x4eae <vfprintf+0x2d0>
    4ea0:	f2 fc       	sbrc	r15, 2
    4ea2:	05 c0       	rjmp	.+10     	; 0x4eae <vfprintf+0x2d0>
    4ea4:	8f ee       	ldi	r24, 0xEF	; 239
    4ea6:	f8 22       	and	r15, r24
    4ea8:	02 c0       	rjmp	.+4      	; 0x4eae <vfprintf+0x2d0>
    4eaa:	1d 2d       	mov	r17, r13
    4eac:	01 c0       	rjmp	.+2      	; 0x4eb0 <vfprintf+0x2d2>
    4eae:	19 2d       	mov	r17, r9
    4eb0:	f4 fe       	sbrs	r15, 4
    4eb2:	0d c0       	rjmp	.+26     	; 0x4ece <vfprintf+0x2f0>
    4eb4:	fe 01       	movw	r30, r28
    4eb6:	ed 0d       	add	r30, r13
    4eb8:	f1 1d       	adc	r31, r1
    4eba:	80 81       	ld	r24, Z
    4ebc:	80 33       	cpi	r24, 0x30	; 48
    4ebe:	19 f4       	brne	.+6      	; 0x4ec6 <vfprintf+0x2e8>
    4ec0:	99 ee       	ldi	r25, 0xE9	; 233
    4ec2:	f9 22       	and	r15, r25
    4ec4:	08 c0       	rjmp	.+16     	; 0x4ed6 <vfprintf+0x2f8>
    4ec6:	1f 5f       	subi	r17, 0xFF	; 255
    4ec8:	f2 fe       	sbrs	r15, 2
    4eca:	05 c0       	rjmp	.+10     	; 0x4ed6 <vfprintf+0x2f8>
    4ecc:	03 c0       	rjmp	.+6      	; 0x4ed4 <vfprintf+0x2f6>
    4ece:	8f 2d       	mov	r24, r15
    4ed0:	86 78       	andi	r24, 0x86	; 134
    4ed2:	09 f0       	breq	.+2      	; 0x4ed6 <vfprintf+0x2f8>
    4ed4:	1f 5f       	subi	r17, 0xFF	; 255
    4ed6:	0f 2d       	mov	r16, r15
    4ed8:	f3 fc       	sbrc	r15, 3
    4eda:	14 c0       	rjmp	.+40     	; 0x4f04 <vfprintf+0x326>
    4edc:	f0 fe       	sbrs	r15, 0
    4ede:	0f c0       	rjmp	.+30     	; 0x4efe <vfprintf+0x320>
    4ee0:	1e 15       	cp	r17, r14
    4ee2:	10 f0       	brcs	.+4      	; 0x4ee8 <vfprintf+0x30a>
    4ee4:	9d 2c       	mov	r9, r13
    4ee6:	0b c0       	rjmp	.+22     	; 0x4efe <vfprintf+0x320>
    4ee8:	9d 2c       	mov	r9, r13
    4eea:	9e 0c       	add	r9, r14
    4eec:	91 1a       	sub	r9, r17
    4eee:	1e 2d       	mov	r17, r14
    4ef0:	06 c0       	rjmp	.+12     	; 0x4efe <vfprintf+0x320>
    4ef2:	80 e2       	ldi	r24, 0x20	; 32
    4ef4:	90 e0       	ldi	r25, 0x00	; 0
    4ef6:	b3 01       	movw	r22, r6
    4ef8:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <fputc>
    4efc:	1f 5f       	subi	r17, 0xFF	; 255
    4efe:	1e 15       	cp	r17, r14
    4f00:	c0 f3       	brcs	.-16     	; 0x4ef2 <vfprintf+0x314>
    4f02:	04 c0       	rjmp	.+8      	; 0x4f0c <vfprintf+0x32e>
    4f04:	1e 15       	cp	r17, r14
    4f06:	10 f4       	brcc	.+4      	; 0x4f0c <vfprintf+0x32e>
    4f08:	e1 1a       	sub	r14, r17
    4f0a:	01 c0       	rjmp	.+2      	; 0x4f0e <vfprintf+0x330>
    4f0c:	ee 24       	eor	r14, r14
    4f0e:	04 ff       	sbrs	r16, 4
    4f10:	0f c0       	rjmp	.+30     	; 0x4f30 <vfprintf+0x352>
    4f12:	80 e3       	ldi	r24, 0x30	; 48
    4f14:	90 e0       	ldi	r25, 0x00	; 0
    4f16:	b3 01       	movw	r22, r6
    4f18:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <fputc>
    4f1c:	02 ff       	sbrs	r16, 2
    4f1e:	1d c0       	rjmp	.+58     	; 0x4f5a <vfprintf+0x37c>
    4f20:	01 fd       	sbrc	r16, 1
    4f22:	03 c0       	rjmp	.+6      	; 0x4f2a <vfprintf+0x34c>
    4f24:	88 e7       	ldi	r24, 0x78	; 120
    4f26:	90 e0       	ldi	r25, 0x00	; 0
    4f28:	0e c0       	rjmp	.+28     	; 0x4f46 <vfprintf+0x368>
    4f2a:	88 e5       	ldi	r24, 0x58	; 88
    4f2c:	90 e0       	ldi	r25, 0x00	; 0
    4f2e:	0b c0       	rjmp	.+22     	; 0x4f46 <vfprintf+0x368>
    4f30:	80 2f       	mov	r24, r16
    4f32:	86 78       	andi	r24, 0x86	; 134
    4f34:	91 f0       	breq	.+36     	; 0x4f5a <vfprintf+0x37c>
    4f36:	01 ff       	sbrs	r16, 1
    4f38:	02 c0       	rjmp	.+4      	; 0x4f3e <vfprintf+0x360>
    4f3a:	8b e2       	ldi	r24, 0x2B	; 43
    4f3c:	01 c0       	rjmp	.+2      	; 0x4f40 <vfprintf+0x362>
    4f3e:	80 e2       	ldi	r24, 0x20	; 32
    4f40:	f7 fc       	sbrc	r15, 7
    4f42:	8d e2       	ldi	r24, 0x2D	; 45
    4f44:	90 e0       	ldi	r25, 0x00	; 0
    4f46:	b3 01       	movw	r22, r6
    4f48:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <fputc>
    4f4c:	06 c0       	rjmp	.+12     	; 0x4f5a <vfprintf+0x37c>
    4f4e:	80 e3       	ldi	r24, 0x30	; 48
    4f50:	90 e0       	ldi	r25, 0x00	; 0
    4f52:	b3 01       	movw	r22, r6
    4f54:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <fputc>
    4f58:	9a 94       	dec	r9
    4f5a:	d9 14       	cp	r13, r9
    4f5c:	c0 f3       	brcs	.-16     	; 0x4f4e <vfprintf+0x370>
    4f5e:	da 94       	dec	r13
    4f60:	f1 01       	movw	r30, r2
    4f62:	ed 0d       	add	r30, r13
    4f64:	f1 1d       	adc	r31, r1
    4f66:	80 81       	ld	r24, Z
    4f68:	90 e0       	ldi	r25, 0x00	; 0
    4f6a:	b3 01       	movw	r22, r6
    4f6c:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <fputc>
    4f70:	dd 20       	and	r13, r13
    4f72:	a9 f7       	brne	.-22     	; 0x4f5e <vfprintf+0x380>
    4f74:	06 c0       	rjmp	.+12     	; 0x4f82 <vfprintf+0x3a4>
    4f76:	80 e2       	ldi	r24, 0x20	; 32
    4f78:	90 e0       	ldi	r25, 0x00	; 0
    4f7a:	b3 01       	movw	r22, r6
    4f7c:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <fputc>
    4f80:	ea 94       	dec	r14
    4f82:	ee 20       	and	r14, r14
    4f84:	c1 f7       	brne	.-16     	; 0x4f76 <vfprintf+0x398>
    4f86:	43 ce       	rjmp	.-890    	; 0x4c0e <vfprintf+0x30>
    4f88:	f3 01       	movw	r30, r6
    4f8a:	66 81       	ldd	r22, Z+6	; 0x06
    4f8c:	77 81       	ldd	r23, Z+7	; 0x07
    4f8e:	cb 01       	movw	r24, r22
    4f90:	2b 96       	adiw	r28, 0x0b	; 11
    4f92:	e2 e1       	ldi	r30, 0x12	; 18
    4f94:	0c 94 a7 25 	jmp	0x4b4e	; 0x4b4e <__epilogue_restores__>

00004f98 <strnlen_P>:
    4f98:	fc 01       	movw	r30, r24
    4f9a:	05 90       	lpm	r0, Z+
    4f9c:	61 50       	subi	r22, 0x01	; 1
    4f9e:	70 40       	sbci	r23, 0x00	; 0
    4fa0:	01 10       	cpse	r0, r1
    4fa2:	d8 f7       	brcc	.-10     	; 0x4f9a <strnlen_P+0x2>
    4fa4:	80 95       	com	r24
    4fa6:	90 95       	com	r25
    4fa8:	8e 0f       	add	r24, r30
    4faa:	9f 1f       	adc	r25, r31
    4fac:	08 95       	ret

00004fae <strnlen>:
    4fae:	fc 01       	movw	r30, r24
    4fb0:	61 50       	subi	r22, 0x01	; 1
    4fb2:	70 40       	sbci	r23, 0x00	; 0
    4fb4:	01 90       	ld	r0, Z+
    4fb6:	01 10       	cpse	r0, r1
    4fb8:	d8 f7       	brcc	.-10     	; 0x4fb0 <strnlen+0x2>
    4fba:	80 95       	com	r24
    4fbc:	90 95       	com	r25
    4fbe:	8e 0f       	add	r24, r30
    4fc0:	9f 1f       	adc	r25, r31
    4fc2:	08 95       	ret

00004fc4 <fputc>:
    4fc4:	0f 93       	push	r16
    4fc6:	1f 93       	push	r17
    4fc8:	cf 93       	push	r28
    4fca:	df 93       	push	r29
    4fcc:	8c 01       	movw	r16, r24
    4fce:	eb 01       	movw	r28, r22
    4fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    4fd2:	81 ff       	sbrs	r24, 1
    4fd4:	1b c0       	rjmp	.+54     	; 0x500c <fputc+0x48>
    4fd6:	82 ff       	sbrs	r24, 2
    4fd8:	0d c0       	rjmp	.+26     	; 0x4ff4 <fputc+0x30>
    4fda:	2e 81       	ldd	r18, Y+6	; 0x06
    4fdc:	3f 81       	ldd	r19, Y+7	; 0x07
    4fde:	8c 81       	ldd	r24, Y+4	; 0x04
    4fe0:	9d 81       	ldd	r25, Y+5	; 0x05
    4fe2:	28 17       	cp	r18, r24
    4fe4:	39 07       	cpc	r19, r25
    4fe6:	64 f4       	brge	.+24     	; 0x5000 <fputc+0x3c>
    4fe8:	e8 81       	ld	r30, Y
    4fea:	f9 81       	ldd	r31, Y+1	; 0x01
    4fec:	01 93       	st	Z+, r16
    4fee:	f9 83       	std	Y+1, r31	; 0x01
    4ff0:	e8 83       	st	Y, r30
    4ff2:	06 c0       	rjmp	.+12     	; 0x5000 <fputc+0x3c>
    4ff4:	e8 85       	ldd	r30, Y+8	; 0x08
    4ff6:	f9 85       	ldd	r31, Y+9	; 0x09
    4ff8:	80 2f       	mov	r24, r16
    4ffa:	09 95       	icall
    4ffc:	89 2b       	or	r24, r25
    4ffe:	31 f4       	brne	.+12     	; 0x500c <fputc+0x48>
    5000:	8e 81       	ldd	r24, Y+6	; 0x06
    5002:	9f 81       	ldd	r25, Y+7	; 0x07
    5004:	01 96       	adiw	r24, 0x01	; 1
    5006:	9f 83       	std	Y+7, r25	; 0x07
    5008:	8e 83       	std	Y+6, r24	; 0x06
    500a:	02 c0       	rjmp	.+4      	; 0x5010 <fputc+0x4c>
    500c:	0f ef       	ldi	r16, 0xFF	; 255
    500e:	1f ef       	ldi	r17, 0xFF	; 255
    5010:	c8 01       	movw	r24, r16
    5012:	df 91       	pop	r29
    5014:	cf 91       	pop	r28
    5016:	1f 91       	pop	r17
    5018:	0f 91       	pop	r16
    501a:	08 95       	ret

0000501c <__ultoa_invert>:
    501c:	fa 01       	movw	r30, r20
    501e:	aa 27       	eor	r26, r26
    5020:	28 30       	cpi	r18, 0x08	; 8
    5022:	51 f1       	breq	.+84     	; 0x5078 <__ultoa_invert+0x5c>
    5024:	20 31       	cpi	r18, 0x10	; 16
    5026:	81 f1       	breq	.+96     	; 0x5088 <__ultoa_invert+0x6c>
    5028:	e8 94       	clt
    502a:	6f 93       	push	r22
    502c:	6e 7f       	andi	r22, 0xFE	; 254
    502e:	6e 5f       	subi	r22, 0xFE	; 254
    5030:	7f 4f       	sbci	r23, 0xFF	; 255
    5032:	8f 4f       	sbci	r24, 0xFF	; 255
    5034:	9f 4f       	sbci	r25, 0xFF	; 255
    5036:	af 4f       	sbci	r26, 0xFF	; 255
    5038:	b1 e0       	ldi	r27, 0x01	; 1
    503a:	3e d0       	rcall	.+124    	; 0x50b8 <__ultoa_invert+0x9c>
    503c:	b4 e0       	ldi	r27, 0x04	; 4
    503e:	3c d0       	rcall	.+120    	; 0x50b8 <__ultoa_invert+0x9c>
    5040:	67 0f       	add	r22, r23
    5042:	78 1f       	adc	r23, r24
    5044:	89 1f       	adc	r24, r25
    5046:	9a 1f       	adc	r25, r26
    5048:	a1 1d       	adc	r26, r1
    504a:	68 0f       	add	r22, r24
    504c:	79 1f       	adc	r23, r25
    504e:	8a 1f       	adc	r24, r26
    5050:	91 1d       	adc	r25, r1
    5052:	a1 1d       	adc	r26, r1
    5054:	6a 0f       	add	r22, r26
    5056:	71 1d       	adc	r23, r1
    5058:	81 1d       	adc	r24, r1
    505a:	91 1d       	adc	r25, r1
    505c:	a1 1d       	adc	r26, r1
    505e:	20 d0       	rcall	.+64     	; 0x50a0 <__ultoa_invert+0x84>
    5060:	09 f4       	brne	.+2      	; 0x5064 <__ultoa_invert+0x48>
    5062:	68 94       	set
    5064:	3f 91       	pop	r19
    5066:	2a e0       	ldi	r18, 0x0A	; 10
    5068:	26 9f       	mul	r18, r22
    506a:	11 24       	eor	r1, r1
    506c:	30 19       	sub	r19, r0
    506e:	30 5d       	subi	r19, 0xD0	; 208
    5070:	31 93       	st	Z+, r19
    5072:	de f6       	brtc	.-74     	; 0x502a <__ultoa_invert+0xe>
    5074:	cf 01       	movw	r24, r30
    5076:	08 95       	ret
    5078:	46 2f       	mov	r20, r22
    507a:	47 70       	andi	r20, 0x07	; 7
    507c:	40 5d       	subi	r20, 0xD0	; 208
    507e:	41 93       	st	Z+, r20
    5080:	b3 e0       	ldi	r27, 0x03	; 3
    5082:	0f d0       	rcall	.+30     	; 0x50a2 <__ultoa_invert+0x86>
    5084:	c9 f7       	brne	.-14     	; 0x5078 <__ultoa_invert+0x5c>
    5086:	f6 cf       	rjmp	.-20     	; 0x5074 <__ultoa_invert+0x58>
    5088:	46 2f       	mov	r20, r22
    508a:	4f 70       	andi	r20, 0x0F	; 15
    508c:	40 5d       	subi	r20, 0xD0	; 208
    508e:	4a 33       	cpi	r20, 0x3A	; 58
    5090:	18 f0       	brcs	.+6      	; 0x5098 <__ultoa_invert+0x7c>
    5092:	49 5d       	subi	r20, 0xD9	; 217
    5094:	31 fd       	sbrc	r19, 1
    5096:	40 52       	subi	r20, 0x20	; 32
    5098:	41 93       	st	Z+, r20
    509a:	02 d0       	rcall	.+4      	; 0x50a0 <__ultoa_invert+0x84>
    509c:	a9 f7       	brne	.-22     	; 0x5088 <__ultoa_invert+0x6c>
    509e:	ea cf       	rjmp	.-44     	; 0x5074 <__ultoa_invert+0x58>
    50a0:	b4 e0       	ldi	r27, 0x04	; 4
    50a2:	a6 95       	lsr	r26
    50a4:	97 95       	ror	r25
    50a6:	87 95       	ror	r24
    50a8:	77 95       	ror	r23
    50aa:	67 95       	ror	r22
    50ac:	ba 95       	dec	r27
    50ae:	c9 f7       	brne	.-14     	; 0x50a2 <__ultoa_invert+0x86>
    50b0:	00 97       	sbiw	r24, 0x00	; 0
    50b2:	61 05       	cpc	r22, r1
    50b4:	71 05       	cpc	r23, r1
    50b6:	08 95       	ret
    50b8:	9b 01       	movw	r18, r22
    50ba:	ac 01       	movw	r20, r24
    50bc:	0a 2e       	mov	r0, r26
    50be:	06 94       	lsr	r0
    50c0:	57 95       	ror	r21
    50c2:	47 95       	ror	r20
    50c4:	37 95       	ror	r19
    50c6:	27 95       	ror	r18
    50c8:	ba 95       	dec	r27
    50ca:	c9 f7       	brne	.-14     	; 0x50be <__ultoa_invert+0xa2>
    50cc:	62 0f       	add	r22, r18
    50ce:	73 1f       	adc	r23, r19
    50d0:	84 1f       	adc	r24, r20
    50d2:	95 1f       	adc	r25, r21
    50d4:	a0 1d       	adc	r26, r0
    50d6:	08 95       	ret

000050d8 <_exit>:
    50d8:	f8 94       	cli

000050da <__stop_program>:
    50da:	ff cf       	rjmp	.-2      	; 0x50da <__stop_program>
